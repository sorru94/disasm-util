
src/AtomVM:     file format elf64-x86-64


Disassembly of section .init:

<_init>:
	endbr64 
	sub    $0x8,%rsp
	mov    0x8efc9(%rip),%rax        # <__gmon_start__@Base>
	test   %rax,%rax
	je     <_init+0x16>
	call   *%rax
	add    $0x8,%rsp
	ret    

Disassembly of section .plt:

<.plt>:
	push   0x8ed8a(%rip)        # <_GLOBAL_OFFSET_TABLE_+0x8>
	bnd jmp *0x8ed8b(%rip)        # <_GLOBAL_OFFSET_TABLE_+0x10>
	nopl   (%rax)
	endbr64 
	push   $0x0
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x1
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x2
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x3
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x4
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x5
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x6
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x7
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x8
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x9
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0xa
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0xb
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0xc
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0xd
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0xe
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0xf
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x10
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x11
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x12
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x13
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x14
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x15
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x16
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x17
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x18
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x19
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x1a
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x1b
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x1c
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x1d
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x1e
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x1f
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x20
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x21
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x22
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x23
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x24
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x25
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x26
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x27
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x28
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x29
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x2a
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x2b
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x2c
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x2d
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x2e
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x2f
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x30
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x31
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x32
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x33
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x34
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x35
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x36
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x37
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x38
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x39
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x3a
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x3b
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x3c
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x3d
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x3e
	bnd jmp <_init+0x20>
	nop
	endbr64 
	push   $0x3f
	bnd jmp <_init+0x20>
	nop

Disassembly of section .plt.got:

<__cxa_finalize@plt>:
	endbr64 
	bnd jmp *0x8eb85(%rip)        # <__cxa_finalize@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

<__errno_location@plt>:
	endbr64 
	bnd jmp *0x8e975(%rip)        # <__errno_location@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<printf@plt>:
	endbr64 
	bnd jmp *0x8e96d(%rip)        # <printf@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<htons@plt>:
	endbr64 
	bnd jmp *0x8e965(%rip)        # <htons@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<sendto@plt>:
	endbr64 
	bnd jmp *0x8e95d(%rip)        # <sendto@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<strtoll@plt>:
	endbr64 
	bnd jmp *0x8e955(%rip)        # <strtoll@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<bind@plt>:
	endbr64 
	bnd jmp *0x8e94d(%rip)        # <bind@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<ceil@plt>:
	endbr64 
	bnd jmp *0x8e945(%rip)        # <ceil@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<socket@plt>:
	endbr64 
	bnd jmp *0x8e93d(%rip)        # <socket@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<accept@plt>:
	endbr64 
	bnd jmp *0x8e935(%rip)        # <accept@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<strlen@plt>:
	endbr64 
	bnd jmp *0x8e92d(%rip)        # <strlen@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<memcmp@plt>:
	endbr64 
	bnd jmp *0x8e925(%rip)        # <memcmp@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<send@plt>:
	endbr64 
	bnd jmp *0x8e91d(%rip)        # <send@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<llround@plt>:
	endbr64 
	bnd jmp *0x8e915(%rip)        # <llround@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<memset@plt>:
	endbr64 
	bnd jmp *0x8e90d(%rip)        # <memset@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<abort@plt>:
	endbr64 
	bnd jmp *0x8e905(%rip)        # <abort@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<munmap@plt>:
	endbr64 
	bnd jmp *0x8e8fd(%rip)        # <munmap@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<fcntl@plt>:
	endbr64 
	bnd jmp *0x8e8f5(%rip)        # <fcntl@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<trunc@plt>:
	endbr64 
	bnd jmp *0x8e8ed(%rip)        # <trunc@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<calloc@plt>:
	endbr64 
	bnd jmp *0x8e8e5(%rip)        # <calloc@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<getpeername@plt>:
	endbr64 
	bnd jmp *0x8e8dd(%rip)        # <getpeername@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<open@plt>:
	endbr64 
	bnd jmp *0x8e8d5(%rip)        # <open@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<htonl@plt>:
	endbr64 
	bnd jmp *0x8e8cd(%rip)        # <htonl@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<recvfrom@plt>:
	endbr64 
	bnd jmp *0x8e8c5(%rip)        # <recvfrom@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<inflate@plt>:
	endbr64 
	bnd jmp *0x8e8bd(%rip)        # <inflate@Base>
	nopl   0x0(%rax,%rax,1)

<memcpy@plt>:
	endbr64 
	bnd jmp *0x8e8b5(%rip)        # <memcpy@GLIBC_2.14>
	nopl   0x0(%rax,%rax,1)

<connect@plt>:
	endbr64 
	bnd jmp *0x8e8ad(%rip)        # <connect@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<inflateInit_@plt>:
	endbr64 
	bnd jmp *0x8e8a5(%rip)        # <inflateInit_@Base>
	nopl   0x0(%rax,%rax,1)

<clock_gettime@plt>:
	endbr64 
	bnd jmp *0x8e89d(%rip)        # <clock_gettime@GLIBC_2.17>
	nopl   0x0(%rax,%rax,1)

<getsockname@plt>:
	endbr64 
	bnd jmp *0x8e895(%rip)        # <getsockname@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<dlsym@plt>:
	endbr64 
	bnd jmp *0x8e88d(%rip)        # <dlsym@GLIBC_2.34>
	nopl   0x0(%rax,%rax,1)

<__isoc99_sscanf@plt>:
	endbr64 
	bnd jmp *0x8e885(%rip)        # <__isoc99_sscanf@GLIBC_2.7>
	nopl   0x0(%rax,%rax,1)

<inflateEnd@plt>:
	endbr64 
	bnd jmp *0x8e87d(%rip)        # <inflateEnd@Base>
	nopl   0x0(%rax,%rax,1)

<__ctype_b_loc@plt>:
	endbr64 
	bnd jmp *0x8e875(%rip)        # <__ctype_b_loc@GLIBC_2.3>
	nopl   0x0(%rax,%rax,1)

<__stack_chk_fail@plt>:
	endbr64 
	bnd jmp *0x8e86d(%rip)        # <__stack_chk_fail@GLIBC_2.4>
	nopl   0x0(%rax,%rax,1)

<listen@plt>:
	endbr64 
	bnd jmp *0x8e865(%rip)        # <listen@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<fflush@plt>:
	endbr64 
	bnd jmp *0x8e85d(%rip)        # <fflush@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<free@plt>:
	endbr64 
	bnd jmp *0x8e855(%rip)        # <free@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<fputc@plt>:
	endbr64 
	bnd jmp *0x8e84d(%rip)        # <fputc@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<sigaction@plt>:
	endbr64 
	bnd jmp *0x8e845(%rip)        # <sigaction@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<getaddrinfo@plt>:
	endbr64 
	bnd jmp *0x8e83d(%rip)        # <getaddrinfo@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<ntohl@plt>:
	endbr64 
	bnd jmp *0x8e835(%rip)        # <ntohl@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<freeaddrinfo@plt>:
	endbr64 
	bnd jmp *0x8e82d(%rip)        # <freeaddrinfo@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<malloc@plt>:
	endbr64 
	bnd jmp *0x8e825(%rip)        # <malloc@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<dlopen@plt>:
	endbr64 
	bnd jmp *0x8e81d(%rip)        # <dlopen@GLIBC_2.34>
	nopl   0x0(%rax,%rax,1)

<putchar@plt>:
	endbr64 
	bnd jmp *0x8e815(%rip)        # <putchar@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<strcmp@plt>:
	endbr64 
	bnd jmp *0x8e80d(%rip)        # <strcmp@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<fprintf@plt>:
	endbr64 
	bnd jmp *0x8e805(%rip)        # <fprintf@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<RAND_bytes@plt>:
	endbr64 
	bnd jmp *0x8e7fd(%rip)        # <RAND_bytes@OPENSSL_3.0.0>
	nopl   0x0(%rax,%rax,1)

<setitimer@plt>:
	endbr64 
	bnd jmp *0x8e7f5(%rip)        # <setitimer@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<poll@plt>:
	endbr64 
	bnd jmp *0x8e7ed(%rip)        # <poll@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<puts@plt>:
	endbr64 
	bnd jmp *0x8e7e5(%rip)        # <puts@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<MD5@plt>:
	endbr64 
	bnd jmp *0x8e7dd(%rip)        # <MD5@OPENSSL_3.0.0>
	nopl   0x0(%rax,%rax,1)

<strnlen@plt>:
	endbr64 
	bnd jmp *0x8e7d5(%rip)        # <strnlen@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<snprintf@plt>:
	endbr64 
	bnd jmp *0x8e7cd(%rip)        # <snprintf@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<memmem@plt>:
	endbr64 
	bnd jmp *0x8e7c5(%rip)        # <memmem@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<fstat@plt>:
	endbr64 
	bnd jmp *0x8e7bd(%rip)        # <fstat@GLIBC_2.33>
	nopl   0x0(%rax,%rax,1)

<floor@plt>:
	endbr64 
	bnd jmp *0x8e7b5(%rip)        # <floor@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<__xpg_basename@plt>:
	endbr64 
	bnd jmp *0x8e7ad(%rip)        # <__xpg_basename@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<mmap@plt>:
	endbr64 
	bnd jmp *0x8e7a5(%rip)        # <mmap@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<setsockopt@plt>:
	endbr64 
	bnd jmp *0x8e79d(%rip)        # <setsockopt@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<ntohs@plt>:
	endbr64 
	bnd jmp *0x8e795(%rip)        # <ntohs@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<fwrite@plt>:
	endbr64 
	bnd jmp *0x8e78d(%rip)        # <fwrite@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<close@plt>:
	endbr64 
	bnd jmp *0x8e785(%rip)        # <close@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

<gmtime_r@plt>:
	endbr64 
	bnd jmp *0x8e77d(%rip)        # <gmtime_r@GLIBC_2.2.5>
	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

<_start>:
	endbr64 
	xor    %ebp,%ebp
	mov    %rdx,%r9
	pop    %rsi
	mov    %rsp,%rdx
	and    $0xfffffffffffffff0,%rsp
	push   %rax
	push   %rsp
	xor    %r8d,%r8d
	xor    %ecx,%ecx
	lea    0x1d1(%rip),%rdi        # <main>
	call   *0x8e763(%rip)        # <__libc_start_main@GLIBC_2.34>
	hlt    
	cs nopw 0x0(%rax,%rax,1)

<deregister_tm_clones>:
	lea    0x8e7e9(%rip),%rdi        # <stdout@GLIBC_2.2.5>
	lea    0x8e7e2(%rip),%rax        # <stdout@GLIBC_2.2.5>
	cmp    %rdi,%rax
	je     <deregister_tm_clones+0x28>
	mov    0x8e746(%rip),%rax        # <_ITM_deregisterTMCloneTable@Base>
	test   %rax,%rax
	je     <deregister_tm_clones+0x28>
	jmp    *%rax
	nopl   0x0(%rax)
	ret    
	nopl   0x0(%rax)

<register_tm_clones>:
	lea    0x8e7b9(%rip),%rdi        # <stdout@GLIBC_2.2.5>
	lea    0x8e7b2(%rip),%rsi        # <stdout@GLIBC_2.2.5>
	sub    %rdi,%rsi
	mov    %rsi,%rax
	shr    $0x3f,%rsi
	sar    $0x3,%rax
	add    %rax,%rsi
	sar    %rsi
	je     <register_tm_clones+0x38>
	mov    0x8e715(%rip),%rax        # <_ITM_registerTMCloneTable@Base>
	test   %rax,%rax
	je     <register_tm_clones+0x38>
	jmp    *%rax
	nopw   0x0(%rax,%rax,1)
	ret    
	nopl   0x0(%rax)

<__do_global_dtors_aux>:
	endbr64 
	cmpb   $0x0,0x8e79d(%rip)        # <completed.0>
	jne    <__do_global_dtors_aux+0x38>
	push   %rbp
	cmpq   $0x0,0x8e6ca(%rip)        # <__cxa_finalize@GLIBC_2.2.5>
	mov    %rsp,%rbp
	je     <__do_global_dtors_aux+0x27>
	mov    0x8e706(%rip),%rdi        # <__dso_handle>
	call   <__cxa_finalize@plt>
	call   <deregister_tm_clones>
	movb   $0x1,0x8e775(%rip)        # <completed.0>
	pop    %rbp
	ret    
	nopl   (%rax)
	ret    
	nopl   0x0(%rax)

<frame_dummy>:
	endbr64 
	jmp    <register_tm_clones>

<list_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<context_make_atom>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x20(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	mov    %eax,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_atom_index>
	leave  
	ret    

<close_mapped_files>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	movl   $0x0,-0x4(%rbp)
	jmp    <close_mapped_files+0x3f>
	mov    -0x4(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <mapped_file_close>
	addl   $0x1,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	cmp    -0x1c(%rbp),%eax
	jl     <close_mapped_files+0x1c>
	nop
	nop
	leave  
	ret    

<main>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x78,%rsp
	mov    %edi,-0x74(%rbp)
	mov    %rsi,-0x80(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	cmpl   $0x1,-0x74(%rbp)
	jg     <main+0x42>
	lea    0x7b5ac(%rip),%rax        # <_IO_stdin_used+0xc>
	mov    %rax,%rdi
	call   <puts@plt>
	mov    $0x1,%eax
	jmp    <main+0x553>
	mov    -0x74(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x64(%rbp)
	mov    -0x64(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x50(%rbp)
	cmpq   $0x0,-0x50(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <main+0x9b>
	mov    0x8e5d9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x64(%rbp),%edx
	lea    0x7b577(%rip),%rcx        # <_IO_stdin_used+0x28>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x1,%eax
	jmp    <main+0x553>
	movl   $0x0,-0x6c(%rbp)
	jmp    <main+0x14f>
	mov    -0x6c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x80(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    -0x6c(%rbp),%edx
	movslq %edx,%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x50(%rbp),%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    %rax,%rdi
	call   <mapped_file_open_beam>
	mov    %rax,(%rbx)
	mov    -0x6c(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <main+0x14b>
	mov    -0x6c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x80(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    0x8e526(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7b504(%rip),%rcx        # <_IO_stdin_used+0x65>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x1,%eax
	jmp    <main+0x553>
	addl   $0x1,-0x6c(%rbp)
	mov    -0x6c(%rbp),%eax
	cmp    -0x64(%rbp),%eax
	jl     <main+0xa7>
	mov    $0x0,%eax
	call   <globalcontext_new>
	mov    %rax,-0x48(%rbp)
	movq   $0x0,-0x60(%rbp)
	cmpl   $0x2,-0x74(%rbp)
	jne    <main+0x1cb>
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	mov    0x8(%rax),%rax
	mov    %rax,%rdi
	call   <iff_is_valid_beam>
	test   %eax,%eax
	je     <main+0x1cb>
	mov    -0x48(%rbp),%rax
	movq   $0x0,0x88(%rax)
	mov    -0x80(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x58(%rbp)
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	mov    0x10(%rax),%rax
	mov    %eax,-0x70(%rbp)
	jmp    <main+0x37b>
	mov    -0x48(%rbp),%rax
	mov    -0x50(%rbp),%rdx
	mov    %rdx,0x88(%rax)
	movl   $0x0,-0x68(%rbp)
	jmp    <main+0x36f>
	mov    -0x68(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    0x10(%rax),%rax
	mov    %eax,%edx
	mov    -0x68(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    -0x50(%rbp),%rax
	add    %rcx,%rax
	mov    (%rax),%rax
	mov    0x8(%rax),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <avmpack_is_valid>
	test   %eax,%eax
	je     <main+0x318>
	mov    $0x18,%edi
	call   <malloc@plt>
	mov    %rax,-0x40(%rbp)
	cmpq   $0x0,-0x40(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <main+0x28f>
	mov    0x8e3fb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x2b,%edx
	mov    $0x1,%esi
	lea    0x7b3e7(%rip),%rax        # <_IO_stdin_used+0x80>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x68(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x50(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <close_mapped_files>
	mov    $0x1,%eax
	jmp    <main+0x553>
	mov    -0x68(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    0x8(%rax),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rdx,0x10(%rax)
	mov    -0x48(%rbp),%rax
	lea    0x78(%rax),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_append>
	mov    -0x60(%rbp),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <main+0x36b>
	mov    -0x68(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    0x8(%rax),%rax
	lea    -0x58(%rbp),%rsi
	lea    -0x70(%rbp),%rcx
	lea    -0x60(%rbp),%rdx
	mov    %rsi,%r8
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <avmpack_find_section_by_flag>
	jmp    <main+0x36b>
	mov    -0x68(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x80(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    0x8e31a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7b33f(%rip),%rcx        # <_IO_stdin_used+0xac>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0x68(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x50(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <close_mapped_files>
	mov    $0x1,%eax
	jmp    <main+0x553>
	addl   $0x1,-0x68(%rbp)
	mov    -0x68(%rbp),%eax
	cmp    -0x64(%rbp),%eax
	jl     <main+0x1e6>
	mov    -0x60(%rbp),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <main+0x3cb>
	mov    0x8e2bc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x1d,%edx
	mov    $0x1,%esi
	lea    0x7b2ec(%rip),%rax        # <_IO_stdin_used+0xc4>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x64(%rbp),%edx
	mov    -0x50(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <close_mapped_files>
	mov    $0x1,%eax
	jmp    <main+0x553>
	mov    -0x70(%rbp),%eax
	mov    %eax,%edx
	mov    -0x60(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_new_from_iff_binary>
	mov    %rax,-0x38(%rbp)
	cmpq   $0x0,-0x38(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <main+0x423>
	mov    -0x58(%rbp),%rdx
	mov    0x8e24e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7b2af(%rip),%rcx        # <_IO_stdin_used+0xe8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x1,%eax
	jmp    <main+0x553>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <__xpg_basename@plt>
	mov    %rax,%rdx
	mov    -0x38(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_module_with_filename>
	mov    -0x38(%rbp),%rax
	movq   $0x0,0x60(%rax)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <context_new>
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	movzbl 0x178(%rax),%edx
	or     $0x1,%edx
	mov    %dl,0x178(%rax)
	mov    -0x38(%rbp),%rsi
	mov    -0x30(%rbp),%rax
	mov    $0x0,%ecx
	lea    0x7b24f(%rip),%rdx        # <_IO_stdin_used+0x108>
	mov    %rax,%rdi
	call   <context_execute_loop>
	mov    -0x30(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    0x8e1ac(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0xe,%edx
	mov    $0x1,%esi
	lea    0x7b226(%rip),%rax        # <_IO_stdin_used+0x10e>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    0x8e189(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    0x8e16f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rsi
	mov    $0xa,%edi
	call   <fputc@plt>
	mov    0x8e0eb(%rip),%rdx        # <ok_a>
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	mov    %rax,-0x20(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <context_destroy>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <globalcontext_destroy>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <module_destroy>
	mov    -0x64(%rbp),%edx
	mov    -0x50(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <close_mapped_files>
	mov    -0x20(%rbp),%rax
	cmp    -0x28(%rbp),%rax
	jne    <main+0x54e>
	mov    $0x0,%eax
	jmp    <main+0x553>
	mov    $0x1,%eax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <main+0x567>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<pad>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	add    $0x3,%eax
	and    $0xfffffffc,%eax
	pop    %rbp
	ret    

<avmpack_is_valid>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movabs $0x622f7273752f2123,%rax
	movabs $0x4120766e652f6e69,%rdx
	mov    %rax,-0x20(%rbp)
	mov    %rdx,-0x18(%rbp)
	movabs $0xa4d566d6f74,%rax
	mov    %rax,-0x10(%rbp)
	cmpl   $0x17,-0x2c(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <avmpack_is_valid+0x62>
	mov    $0x0,%eax
	jmp    <avmpack_is_valid+0x82>
	lea    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x18,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <avmpack_is_valid+0x96>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<avmpack_find_section_by_flag>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %r8,-0x48(%rbp)
	movl   $0x18,-0x20(%rbp)
	mov    -0x20(%rbp),%eax
	cltq   
	and    $0xfffffffffffffffc,%rax
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%eax
	cltq   
	and    $0xfffffffffffffffc,%rax
	lea    0x4(%rax),%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	and    -0x2c(%rbp),%eax
	cmp    %eax,-0x2c(%rbp)
	jne    <avmpack_find_section_by_flag+0xcb>
	mov    -0x18(%rbp),%rax
	add    $0xc,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	add    $0x1,%eax
	mov    %eax,%edi
	call   <pad>
	mov    %eax,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	and    $0xfffffffffffffffc,%rax
	lea    0xc(%rax),%rdx
	mov    -0x18(%rbp),%rax
	add    %rax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x18(%rbp),%rax
	lea    0xc(%rax),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,(%rax)
	mov    $0x1,%eax
	jmp    <avmpack_find_section_by_flag+0xf0>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%eax
	add    %edx,%eax
	mov    %eax,-0x20(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%eax
	test   %eax,%eax
	jne    <avmpack_find_section_by_flag+0x26>
	mov    $0x0,%eax
	leave  
	ret    

<avmpack_find_section_by_name>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	movl   $0x18,-0x20(%rbp)
	mov    -0x20(%rbp),%eax
	cltq   
	and    $0xfffffffffffffffc,%rax
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%eax
	cltq   
	and    $0xfffffffffffffffc,%rax
	lea    0x4(%rax),%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0xc,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <avmpack_find_section_by_name+0xc0>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	add    $0x1,%eax
	mov    %eax,%edi
	call   <pad>
	mov    %eax,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	and    $0xfffffffffffffffc,%rax
	lea    0xc(%rax),%rdx
	mov    -0x18(%rbp),%rax
	add    %rax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	mov    %edx,(%rax)
	mov    $0x1,%eax
	jmp    <avmpack_find_section_by_name+0xe5>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%eax
	add    %edx,%eax
	mov    %eax,-0x20(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%eax
	test   %eax,%eax
	jne    <avmpack_find_section_by_name+0x23>
	mov    $0x0,%eax
	leave  
	ret    

<avmpack_fold>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdx,-0x48(%rbp)
	movl   $0x18,-0x28(%rbp)
	movl   $0x0,-0x24(%rbp)
	mov    -0x28(%rbp),%eax
	cltq   
	and    $0xfffffffffffffffc,%rax
	mov    %rax,%rdx
	mov    -0x40(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x24(%rbp)
	cmpl   $0x0,-0x24(%rbp)
	je     <avmpack_fold+0xd4>
	mov    -0x18(%rbp),%rax
	add    $0x4,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0xc,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	add    $0x1,%eax
	mov    %eax,%edi
	call   <pad>
	mov    %eax,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	and    $0xfffffffffffffffc,%rax
	lea    0xc(%rax),%rdx
	mov    -0x18(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	mov    -0x8(%rbp),%r8
	mov    -0x20(%rbp),%edi
	mov    -0x24(%rbp),%edx
	mov    -0x18(%rbp),%rsi
	mov    -0x38(%rbp),%rax
	mov    -0x48(%rbp),%r10
	mov    %r8,%r9
	mov    %edi,%r8d
	mov    %rax,%rdi
	call   *%r10
	mov    %rax,-0x38(%rbp)
	mov    -0x28(%rbp),%edx
	mov    -0x24(%rbp),%eax
	add    %edx,%eax
	mov    %eax,-0x28(%rbp)
	cmpl   $0x0,-0x24(%rbp)
	jne    <avmpack_fold+0x26>
	mov    -0x38(%rbp),%rax
	leave  
	ret    

<list_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<list_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<list_remove>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x8(%rax)
	nop
	pop    %rbp
	ret    

<list_init>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_is_empty>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jne    <list_is_empty+0x2a>
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jne    <list_is_empty+0x2a>
	mov    $0x1,%eax
	jmp    <list_is_empty+0x2f>
	mov    $0x0,%eax
	pop    %rbp
	ret    

<list_first>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	pop    %rbp
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_atom>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0xb,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nonempty_list>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x1,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_list>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_is_list+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_is_list+0x33>
	mov    $0x1,%eax
	jmp    <term_is_list+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_get_size_from_boxed_header>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_boxed_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_is_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	jne    <term_is_binary+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    $0x28,%eax
	seta   %dl
	test   %dl,%dl
	jne    <term_is_binary+0x69>
	movabs $0x11100000000,%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	test   %al,%al
	je     <term_is_binary+0x69>
	mov    $0x1,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_refc_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_refc_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x20,-0xc(%rbp)
	sete   %al
	jmp    <term_is_refc_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_refc_binary_is_const>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	leave  
	ret    

<term_is_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_sub_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x28,-0xc(%rbp)
	sete   %al
	jmp    <term_is_sub_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_boxed_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_boxed_integer+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x8,%rax
	jne    <term_is_boxed_integer+0x43>
	mov    $0x1,%eax
	jmp    <term_is_boxed_integer+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_any_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <term_is_any_integer+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <term_is_any_integer+0x33>
	mov    $0x1,%eax
	jmp    <term_is_any_integer+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_catch_label>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x1b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_pid>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0x3,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_reference>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_reference+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x10,%rax
	jne    <term_is_reference+0x43>
	mov    $0x1,%eax
	jmp    <term_is_reference+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_function>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_function+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x14,%rax
	jne    <term_is_function+0x43>
	mov    $0x1,%eax
	jmp    <term_is_function+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_cp>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x3b,%eax
	pop    %rbp
	ret    

<term_to_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<term_to_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%eax
	pop    %rbp
	ret    

<term_to_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%rax
	pop    %rbp
	ret    

<term_to_catch_label_and_module>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x18,%rax
	mov    %eax,%edx
	mov    -0x10(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	and    $0x3ffff,%eax
	pop    %rbp
	ret    

<term_to_local_process_id>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x4,%rax
	pop    %rbp
	ret    

<term_from_int4>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,%eax
	mov    %al,-0x4(%rbp)
	movsbl -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_from_int11>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,%eax
	mov    %ax,-0x4(%rbp)
	movswl -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_from_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shl    $0x4,%rax
	or     $0xf,%rax
	pop    %rbp
	ret    

<term_unbox_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_unbox_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_maybe_unbox_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_maybe_unbox_int64+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	cmp    $0x1,%eax
	jne    <term_maybe_unbox_int64+0x3b>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	jmp    <term_maybe_unbox_int64+0x55>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int64>
	jmp    <term_maybe_unbox_int64+0x55>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	leave  
	ret    

<term_put_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x48,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	pop    %rbp
	ret    

<term_make_boxed_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_put_int>
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_make_maybe_boxed_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	movabs $0xf800000000000000,%rax
	cmp    %rax,-0x10(%rbp)
	jl     <term_make_maybe_boxed_int64+0x30>
	movabs $0x7ffffffffffffff,%rax
	cmp    %rax,-0x10(%rbp)
	jle    <term_make_maybe_boxed_int64+0x6f>
	mov    -0x8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <term_make_maybe_boxed_int64+0x5a>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <term_make_maybe_boxed_int64+0x7b>
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_make_boxed_int>
	jmp    <term_make_maybe_boxed_int64+0x7b>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	leave  
	ret    

<term_from_catch_label>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    %esi,-0x8(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x18,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%eax
	shl    $0x6,%eax
	or     %edx,%eax
	or     $0x1b,%eax
	mov    %eax,%eax
	pop    %rbp
	ret    

<term_from_local_process_id>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0x3,%eax
	mov    %eax,%eax
	pop    %rbp
	ret    

<term_binary_size_is_heap_binary>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	cmpl   $0x3f,-0x4(%rbp)
	setbe  %al
	pop    %rbp
	ret    

<term_binary_data_size_in_terms>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_binary_data_size_in_terms+0x27>
	mov    -0x4(%rbp),%eax
	add    $0x7,%eax
	shr    $0x3,%eax
	add    $0x1,%eax
	jmp    <term_binary_data_size_in_terms+0x2c>
	mov    $0x6,%eax
	leave  
	ret    

<term_binary_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_binary_data+0x5e>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	test   %al,%al
	je     <term_binary_data+0x49>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <refc_binary_get_data>
	jmp    <term_binary_data+0x9c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	je     <term_binary_data+0x94>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	add    %rdx,%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	leave  
	ret    

<term_create_uninitialized_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_create_uninitialized_binary+0x6f>
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0xc(%rbp),%eax
	shl    $0x6,%eax
	or     $0x24,%eax
	movslq %eax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x14(%rbp),%eax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	jmp    <term_create_uninitialized_binary+0x86>
	mov    -0x14(%rbp),%ecx
	mov    -0x20(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_refc_binary>
	leave  
	ret    

<term_from_literal_binary>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x2c(%rbp),%eax
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_create_uninitialized_binary>
	mov    %rax,-0x18(%rbp)
	mov    -0x2c(%rbp),%ebx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_sub_binary_heap_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_sub_binary_heap_size+0x2e>
	cmpq   $0xf,-0x10(%rbp)
	jbe    <term_sub_binary_heap_size+0x2e>
	mov    $0x4,%eax
	jmp    <term_sub_binary_heap_size+0x3e>
	mov    -0x10(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	cltq   
	leave  
	ret    

<term_maybe_create_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_maybe_create_sub_binary+0x49>
	cmpq   $0xf,-0x28(%rbp)
	jbe    <term_maybe_create_sub_binary+0x49>
	mov    -0x30(%rbp),%rcx
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rsi
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_alloc_sub_binary>
	jmp    <term_maybe_create_sub_binary+0x7a>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %eax,%esi
	mov    -0x8(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdx
	mov    %rcx,%rdi
	call   <term_from_literal_binary>
	leave  
	ret    

<term_create_empty_binary>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x28,%rsp
	mov    %edi,-0x24(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x24(%rbp),%eax
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_create_uninitialized_binary>
	mov    %rax,-0x18(%rbp)
	mov    -0x24(%rbp),%ebx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rbx,%rdx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <memset@plt>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_bs_insert_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %ecx,-0x30(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	jne    <term_bs_insert_binary+0x53>
	mov    0x8d265(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x17,%edx
	mov    $0x1,%esi
	lea    0x7a2f1(%rip),%rax        # <_IO_stdin_used+0x120>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    $0xffffffff,%eax
	jmp    <term_bs_insert_binary+0x172>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	jne    <term_bs_insert_binary+0x90>
	mov    0x8d228(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x17,%edx
	mov    $0x1,%esi
	lea    0x7a2cc(%rip),%rax        # <_IO_stdin_used+0x138>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    $0xfffffffe,%eax
	jmp    <term_bs_insert_binary+0x172>
	mov    -0x2c(%rbp),%eax
	and    $0x7,%eax
	test   %eax,%eax
	je     <term_bs_insert_binary+0xc7>
	mov    0x8d1f1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x26,%edx
	mov    $0x1,%esi
	lea    0x7a2ad(%rip),%rax        # <_IO_stdin_used+0x150>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    $0xfffffffd,%eax
	jmp    <term_bs_insert_binary+0x172>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x18(%rbp)
	mov    -0x2c(%rbp),%eax
	lea    0x7(%rax),%edx
	test   %eax,%eax
	cmovs  %edx,%eax
	sar    $0x3,%eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%eax
	add    %edx,%eax
	cltq   
	cmp    %rax,-0x18(%rbp)
	jae    <term_bs_insert_binary+0x11e>
	mov    0x8d197(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x26,%edx
	mov    $0x1,%esi
	lea    0x7a27b(%rip),%rax        # <_IO_stdin_used+0x178>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    $0xfffffffc,%eax
	jmp    <term_bs_insert_binary+0x172>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x2c(%rbp),%eax
	lea    0x7(%rax),%edx
	test   %eax,%eax
	cmovs  %edx,%eax
	sar    $0x3,%eax
	cltq   
	add    %rcx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x8(%rbp)
	mov    -0x30(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    $0x0,%eax
	leave  
	ret    

<term_from_ref_ticks>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x50,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_alloc_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x14(%rbp),%eax
	shl    $0x6,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_put_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_arity>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_get_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffe,%rax
	pop    %rbp
	ret    

<term_get_list_head>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	leave  
	ret    

<term_get_list_tail>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_list_alloc>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	leave  
	ret    

<term_list_init_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x1,%rax
	pop    %rbp
	ret    

<term_exactly_equals>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jne    <term_exactly_equals+0x25>
	mov    $0x1,%eax
	jmp    <term_exactly_equals+0x44>
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	leave  
	ret    

<term_equals>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jne    <term_equals+0x25>
	mov    $0x1,%eax
	jmp    <term_equals+0x44>
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	leave  
	ret    

<term_is_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_float+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x18,%rax
	sete   %al
	movzbl %al,%eax
	jmp    <term_is_float+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_number>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	jne    <term_is_number+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <term_is_number+0x33>
	mov    $0x1,%eax
	jmp    <term_is_number+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_match_state>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_match_state+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x4,%rax
	jne    <term_is_match_state+0x43>
	mov    $0x1,%eax
	jmp    <term_is_match_state+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_match_state_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_match_state_offset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_set_match_state_offset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	lea    0x10(%rax),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_match_state_save_offset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x4,%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_match_state_save_start_offset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_match_state_restore_start_offset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	lea    0x10(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_match_state_restore_offset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x4,%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    -0x8(%rbp),%rdx
	add    $0x10,%rdx
	mov    (%rax),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_alloc_bin_match_state>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x3c(%rbp),%eax
	add    $0x4,%eax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x20(%rbp)
	mov    -0x3c(%rbp),%eax
	add    $0x3,%eax
	shl    $0x6,%eax
	or     $0x4,%eax
	movslq %eax,%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	je     <term_alloc_bin_match_state+0xce>
	mov    -0x20(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,(%rbx)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	lea    0x10(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x20(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	movl   $0x0,-0x28(%rbp)
	jmp    <term_alloc_bin_match_state+0xc4>
	mov    -0x28(%rbp),%eax
	add    $0x4,%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x20(%rbp),%rax
	add    %rax,%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	addl   $0x1,-0x28(%rbp)
	mov    -0x28(%rbp),%eax
	cmp    -0x3c(%rbp),%eax
	jl     <term_alloc_bin_match_state+0xa2>
	jmp    <term_alloc_bin_match_state+0x12e>
	mov    -0x20(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x20(%rbp),%rax
	add    $0x10,%rax
	movq   $0x0,(%rax)
	mov    -0x20(%rbp),%rax
	add    $0x18,%rax
	movq   $0x0,(%rax)
	movl   $0x0,-0x24(%rbp)
	jmp    <term_alloc_bin_match_state+0x126>
	mov    -0x24(%rbp),%eax
	add    $0x4,%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x20(%rbp),%rax
	add    %rdx,%rax
	movq   $0x0,(%rax)
	addl   $0x1,-0x24(%rbp)
	mov    -0x24(%rbp),%eax
	cmp    -0x3c(%rbp),%eax
	jl     <term_alloc_bin_match_state+0x104>
	mov    -0x20(%rbp),%rax
	or     $0x2,%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_is_map>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_map+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x3c,%rax
	jne    <term_is_map+0x43>
	mov    $0x1,%eax
	jmp    <term_is_map+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_map_keys_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	pop    %rbp
	ret    

<term_get_map_value_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	pop    %rbp
	ret    

<term_map_size_in_terms_maybe_shared>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,%eax
	mov    %al,-0xc(%rbp)
	cmpb   $0x0,-0xc(%rbp)
	je     <term_map_size_in_terms_maybe_shared+0x1a>
	mov    $0x2,%edx
	jmp    <term_map_size_in_terms_maybe_shared+0x21>
	mov    -0x8(%rbp),%rax
	lea    0x3(%rax),%edx
	mov    -0x8(%rbp),%rax
	add    %edx,%eax
	pop    %rbp
	ret    

<term_alloc_map_maybe_shared>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <term_alloc_map_maybe_shared+0x3a>
	mov    -0x20(%rbp),%rax
	mov    %eax,%edx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_alloc_tuple>
	jmp    <term_alloc_map_maybe_shared+0x3e>
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	lea    0x2(%rax),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x20(%rbp),%rax
	add    $0x1,%rax
	shl    $0x6,%rax
	or     $0x3c,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_get_map_keys>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_map_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	leave  
	ret    

<term_set_map_assoc>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x30,%rsp
	mov    %rdi,-0x20(%rbp)
	mov    %rsi,-0x28(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %eax,%ebx
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rcx
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdx
	mov    %ebx,%esi
	mov    %rcx,%rdi
	call   <term_put_tuple_element>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x10(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x28(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x10(%rbp),%rax
	add    %rax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_map_key>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x10,%rsp
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %eax,%ebx
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %ebx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_map_value>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x20(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_find_map_pos>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x14(%rbp)
	movl   $0x0,-0x18(%rbp)
	jmp    <term_find_map_pos+0x75>
	mov    -0x18(%rbp),%edx
	mov    -0x10(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x38(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	je     <term_find_map_pos+0x71>
	mov    -0x18(%rbp),%eax
	jmp    <term_find_map_pos+0x82>
	addl   $0x1,-0x18(%rbp)
	mov    -0x18(%rbp),%eax
	cmp    -0x14(%rbp),%eax
	jl     <term_find_map_pos+0x3c>
	mov    $0xffffffff,%eax
	leave  
	ret    

<globalcontext_get_ref_ticks>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xa0(%rax),%rax
	lea    0x1(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0xa0(%rax)
	mov    -0x8(%rbp),%rax
	mov    0xa0(%rax),%rax
	pop    %rbp
	ret    

<timer_wheel_item_init>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	nop
	pop    %rbp
	ret    

<context_is_port_driver>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x168(%rax),%rax
	test   %rax,%rax
	setne  %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<context_clean_registers>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	mov    %eax,-0x4(%rbp)
	jmp    <context_clean_registers+0x38>
	mov    $0x0,%eax
	call   <term_nil>
	mov    -0x18(%rbp),%rdx
	mov    -0x4(%rbp),%ecx
	movslq %ecx,%rcx
	add    $0xa,%rcx
	mov    %rax,0x8(%rdx,%rcx,8)
	addl   $0x1,-0x4(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0xd8(%rax),%eax
	cmp    %eax,-0x4(%rbp)
	jl     <context_clean_registers+0x17>
	nop
	nop
	leave  
	ret    

<context_avail_free_memory>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xf0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<context_memory_size>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xe8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<module_get_atom_term_by_id>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	shl    $0x2,%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	mov    %eax,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_atom_index>
	leave  
	ret    

<module_address>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    %esi,-0x8(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x18,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%eax
	shl    $0x2,%eax
	or     %edx,%eax
	mov    %eax,%eax
	pop    %rbp
	ret    

<module_get_fun_freeze>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x10(%rbp)
	mov    -0x1c(%rbp),%eax
	cmp    -0x10(%rbp),%eax
	setge  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_get_fun_freeze+0x40>
	call   <abort@plt>
	mov    -0x1c(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x3,%eax
	cltq   
	lea    0x1c(%rax),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	leave  
	ret    

<module_get_fun>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    %r8,-0x38(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0xc(%rbp)
	mov    -0x1c(%rbp),%eax
	cmp    -0xc(%rbp),%eax
	setge  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_get_fun+0x4c>
	call   <abort@plt>
	mov    -0x1c(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x3,%eax
	cltq   
	lea    0x10(%rax),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x1c(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x3,%eax
	cltq   
	lea    0x14(%rax),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x1c(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x3,%eax
	cltq   
	lea    0x1c(%rax),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	nop
	leave  
	ret    

<module_get_str>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x30(%rax),%rax
	cmp    %rax,-0x10(%rbp)
	jb     <module_get_str+0x25>
	mov    $0x0,%eax
	jmp    <module_get_str+0x4e>
	mov    -0x8(%rbp),%rax
	mov    0x30(%rax),%rax
	sub    -0x10(%rbp),%rax
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x28(%rax),%rdx
	mov    -0x10(%rbp),%rax
	add    $0x8,%rax
	add    %rdx,%rax
	pop    %rbp
	ret    

<bitstring_extract_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    %ecx,-0x4c(%rbp)
	mov    %r8,-0x58(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	shl    $0x3,%rax
	sub    -0x40(%rbp),%rax
	mov    %rax,%rdx
	mov    -0x48(%rbp),%rax
	cmp    %rax,%rdx
	jae    <bitstring_extract_integer+0x4d>
	mov    $0x0,%eax
	jmp    <bitstring_extract_integer+0x37a>
	mov    -0x40(%rbp),%rax
	and    $0x7,%eax
	test   %rax,%rax
	jne    <bitstring_extract_integer+0x327>
	mov    -0x40(%rbp),%rax
	shr    $0x3,%rax
	mov    %eax,-0x24(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x24(%rbp),%eax
	cltq   
	add    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	cmpq   $0x40,-0x48(%rbp)
	je     <bitstring_extract_integer+0x201>
	cmpq   $0x40,-0x48(%rbp)
	jg     <bitstring_extract_integer+0x306>
	cmpq   $0x20,-0x48(%rbp)
	je     <bitstring_extract_integer+0x173>
	cmpq   $0x20,-0x48(%rbp)
	jg     <bitstring_extract_integer+0x306>
	cmpq   $0x8,-0x48(%rbp)
	je     <bitstring_extract_integer+0xc2>
	cmpq   $0x10,-0x48(%rbp)
	je     <bitstring_extract_integer+0xff>
	jmp    <bitstring_extract_integer+0x306>
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	mov    %al,-0x20(%rbp)
	mov    -0x4c(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_extract_integer+0xe7>
	movzbl -0x20(%rbp),%eax
	movsbq %al,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <bitstring_extract_integer+0xf5>
	movzbl -0x20(%rbp),%eax
	movzbl %al,%edx
	mov    -0x58(%rbp),%rax
	mov    %rdx,(%rax)
	mov    $0x1,%eax
	jmp    <bitstring_extract_integer+0x37a>
	mov    -0x4c(%rbp),%eax
	and    $0x2,%eax
	test   %eax,%eax
	je     <bitstring_extract_integer+0x12e>
	mov    -0x8(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %ax,-0x20(%rbp)
	jmp    <bitstring_extract_integer+0x140>
	mov    -0x8(%rbp),%rax
	movzwl (%rax),%eax
	movzwl %ax,%eax
	rol    $0x8,%ax
	mov    %ax,-0x20(%rbp)
	mov    -0x4c(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_extract_integer+0x15b>
	movzwl -0x20(%rbp),%eax
	movswq %ax,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <bitstring_extract_integer+0x169>
	movzwl -0x20(%rbp),%eax
	movzwl %ax,%edx
	mov    -0x58(%rbp),%rax
	mov    %rdx,(%rax)
	mov    $0x1,%eax
	jmp    <bitstring_extract_integer+0x37a>
	mov    -0x4c(%rbp),%eax
	and    $0x2,%eax
	test   %eax,%eax
	je     <bitstring_extract_integer+0x1c7>
	mov    -0x8(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%eax
	or     %eax,%edx
	mov    -0x8(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	or     %eax,%edx
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0x20(%rbp)
	jmp    <bitstring_extract_integer+0x1d2>
	mov    -0x8(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x20(%rbp)
	mov    -0x4c(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_extract_integer+0x1eb>
	mov    -0x20(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <bitstring_extract_integer+0x1f7>
	mov    -0x20(%rbp),%eax
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %rdx,(%rax)
	mov    $0x1,%eax
	jmp    <bitstring_extract_integer+0x37a>
	mov    -0x4c(%rbp),%eax
	and    $0x2,%eax
	test   %eax,%eax
	je     <bitstring_extract_integer+0x2b5>
	mov    -0x8(%rbp),%rax
	add    $0x7,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x38,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x6,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x30,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x5,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x28,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x4,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x20,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %rdx,%rax
	mov    %rax,-0x20(%rbp)
	jmp    <bitstring_extract_integer+0x2c3>
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	bswap  %rax
	mov    %rax,-0x20(%rbp)
	mov    -0x4c(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_extract_integer+0x2f4>
	mov    -0x20(%rbp),%rax
	shr    $0x3f,%rax
	movzbl %al,%eax
	test   %rax,%rax
	je     <bitstring_extract_integer+0x2e7>
	mov    $0x0,%eax
	jmp    <bitstring_extract_integer+0x37a>
	mov    -0x20(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <bitstring_extract_integer+0x2ff>
	mov    -0x20(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,(%rax)
	mov    $0x1,%eax
	jmp    <bitstring_extract_integer+0x37a>
	mov    -0x58(%rbp),%rsi
	mov    -0x4c(%rbp),%ecx
	mov    -0x48(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rsi,%r8
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <bitstring_extract_any_integer>
	jmp    <bitstring_extract_integer+0x37a>
	mov    -0x40(%rbp),%rax
	shr    $0x3,%rax
	mov    %eax,-0x28(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x28(%rbp),%eax
	cltq   
	add    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%eax
	shl    $0x3,%eax
	movslq %eax,%rdx
	mov    -0x40(%rbp),%rax
	sub    %rdx,%rax
	mov    %rax,%rsi
	mov    -0x58(%rbp),%rdi
	mov    -0x4c(%rbp),%ecx
	mov    -0x48(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <bitstring_extract_any_integer>
	leave  
	ret    

<bitstring_insert_integer>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x78,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %rsi,-0x60(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %rcx,-0x70(%rbp)
	mov    %r8d,-0x74(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	shl    $0x3,%rax
	sub    -0x60(%rbp),%rax
	cmp    %rax,-0x70(%rbp)
	jbe    <bitstring_insert_integer+0x58>
	mov    $0x0,%eax
	jmp    <bitstring_insert_integer+0x4ce>
	mov    -0x60(%rbp),%rax
	and    $0x7,%eax
	test   %rax,%rax
	jne    <bitstring_insert_integer+0x49f>
	mov    -0x60(%rbp),%rax
	shr    $0x3,%rax
	mov    %eax,-0x4c(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x4c(%rbp),%eax
	cltq   
	add    %rdx,%rax
	mov    %rax,-0x30(%rbp)
	cmpq   $0x40,-0x70(%rbp)
	je     <bitstring_insert_integer+0x2a7>
	cmpq   $0x40,-0x70(%rbp)
	ja     <bitstring_insert_integer+0x46d>
	cmpq   $0x20,-0x70(%rbp)
	je     <bitstring_insert_integer+0x1a4>
	cmpq   $0x20,-0x70(%rbp)
	ja     <bitstring_insert_integer+0x46d>
	cmpq   $0x8,-0x70(%rbp)
	je     <bitstring_insert_integer+0xcd>
	cmpq   $0x10,-0x70(%rbp)
	je     <bitstring_insert_integer+0xe3>
	jmp    <bitstring_insert_integer+0x46d>
	mov    -0x68(%rbp),%rax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %dl,(%rax)
	mov    $0x1,%eax
	jmp    <bitstring_insert_integer+0x4ce>
	mov    -0x74(%rbp),%eax
	and    $0x2,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x159>
	mov    -0x74(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x127>
	mov    -0x68(%rbp),%rax
	mov    %ax,-0x40(%rbp)
	lea    -0x40(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	mov    %eax,%edx
	lea    -0x40(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %dx,(%rax)
	jmp    <bitstring_insert_integer+0x19a>
	mov    -0x68(%rbp),%rax
	mov    %ax,-0x40(%rbp)
	lea    -0x40(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	mov    %eax,%edx
	lea    -0x40(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %dx,(%rax)
	jmp    <bitstring_insert_integer+0x19a>
	mov    -0x74(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x181>
	mov    -0x68(%rbp),%rax
	mov    %ax,-0x4e(%rbp)
	movzwl -0x4e(%rbp),%eax
	movzwl %ax,%eax
	mov    %eax,%edx
	rol    $0x8,%dx
	mov    -0x30(%rbp),%rax
	mov    %dx,(%rax)
	jmp    <bitstring_insert_integer+0x19a>
	mov    -0x68(%rbp),%rax
	mov    %ax,-0x50(%rbp)
	movzwl -0x50(%rbp),%eax
	mov    %eax,%edx
	rol    $0x8,%dx
	mov    -0x30(%rbp),%rax
	mov    %dx,(%rax)
	mov    $0x1,%eax
	jmp    <bitstring_insert_integer+0x4ce>
	mov    -0x74(%rbp),%eax
	and    $0x2,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x269>
	mov    -0x74(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x213>
	mov    -0x68(%rbp),%rax
	mov    %eax,-0x40(%rbp)
	lea    -0x40(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%eax
	mov    %eax,%edx
	lea    -0x40(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%eax
	or     %eax,%edx
	lea    -0x40(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	or     %eax,%edx
	lea    -0x40(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %edx,(%rax)
	jmp    <bitstring_insert_integer+0x29d>
	mov    -0x68(%rbp),%rax
	mov    %eax,-0x40(%rbp)
	lea    -0x40(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%eax
	mov    %eax,%edx
	lea    -0x40(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%eax
	or     %eax,%edx
	lea    -0x40(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	or     %eax,%edx
	lea    -0x40(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %edx,(%rax)
	jmp    <bitstring_insert_integer+0x29d>
	mov    -0x74(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x289>
	mov    -0x68(%rbp),%rax
	mov    %eax,-0x44(%rbp)
	mov    -0x44(%rbp),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %edx,(%rax)
	jmp    <bitstring_insert_integer+0x29d>
	mov    -0x68(%rbp),%rax
	mov    %eax,-0x48(%rbp)
	mov    -0x48(%rbp),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %edx,(%rax)
	mov    $0x1,%eax
	jmp    <bitstring_insert_integer+0x4ce>
	mov    -0x74(%rbp),%eax
	and    $0x2,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x428>
	mov    -0x74(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x377>
	mov    -0x68(%rbp),%rax
	mov    %rax,-0x40(%rbp)
	lea    -0x40(%rbp),%rax
	add    $0x7,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x38,%rax
	mov    %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x6,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x30,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x5,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x28,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x4,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x20,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <bitstring_insert_integer+0x466>
	mov    -0x68(%rbp),%rax
	mov    %rax,-0x40(%rbp)
	lea    -0x40(%rbp),%rax
	add    $0x7,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x38,%rax
	mov    %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x6,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x30,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x5,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x28,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x4,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x20,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%rax
	or     %rax,%rdx
	lea    -0x40(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <bitstring_insert_integer+0x466>
	mov    -0x74(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_insert_integer+0x44d>
	mov    -0x68(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	bswap  %rax
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <bitstring_insert_integer+0x466>
	mov    -0x68(%rbp),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	bswap  %rax
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,(%rax)
	mov    $0x1,%eax
	jmp    <bitstring_insert_integer+0x4ce>
	mov    -0x4c(%rbp),%eax
	shl    $0x3,%eax
	movslq %eax,%rdx
	mov    -0x60(%rbp),%rax
	sub    %rdx,%rax
	mov    %rax,%rdi
	mov    -0x74(%rbp),%esi
	mov    -0x70(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %esi,%r8d
	mov    %rdi,%rsi
	mov    %rax,%rdi
	call   <bitstring_insert_any_integer>
	jmp    <bitstring_insert_integer+0x4ce>
	mov    -0x60(%rbp),%rbx
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdi
	mov    -0x74(%rbp),%ecx
	mov    -0x70(%rbp),%rdx
	mov    -0x68(%rbp),%rax
	mov    %ecx,%r8d
	mov    %rdx,%rcx
	mov    %rax,%rdx
	mov    %rbx,%rsi
	call   <bitstring_insert_any_integer>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <bitstring_insert_integer+0x4e2>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<sort_kv_pairs>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %edx,-0x44(%rbp)
	mov    -0x44(%rbp),%eax
	mov    %eax,-0x30(%rbp)
	jmp    <sort_kv_pairs+0x123>
	movl   $0x0,-0x2c(%rbp)
	movl   $0x1,-0x28(%rbp)
	jmp    <sort_kv_pairs+0x90>
	mov    -0x2c(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x40(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x40(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	mov    %eax,-0x24(%rbp)
	cmpl   $0x0,-0x24(%rbp)
	jle    <sort_kv_pairs+0x8c>
	mov    -0x28(%rbp),%eax
	mov    %eax,-0x2c(%rbp)
	addl   $0x1,-0x28(%rbp)
	mov    -0x28(%rbp),%eax
	cmp    -0x30(%rbp),%eax
	jl     <sort_kv_pairs+0x32>
	mov    -0x30(%rbp),%eax
	sub    $0x1,%eax
	cmp    %eax,-0x2c(%rbp)
	je     <sort_kv_pairs+0x11f>
	mov    -0x30(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	lea    -0x10(%rax),%rdx
	mov    -0x40(%rbp),%rax
	add    %rdx,%rax
	mov    0x8(%rax),%rdx
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    -0x2c(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x40(%rbp),%rax
	add    %rdx,%rax
	mov    -0x30(%rbp),%edx
	movslq %edx,%rdx
	shl    $0x4,%rdx
	lea    -0x10(%rdx),%rcx
	mov    -0x40(%rbp),%rdx
	add    %rdx,%rcx
	mov    0x8(%rax),%rdx
	mov    (%rax),%rax
	mov    %rax,(%rcx)
	mov    %rdx,0x8(%rcx)
	mov    -0x2c(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x40(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rax,(%rcx)
	mov    %rdx,0x8(%rcx)
	subl   $0x1,-0x30(%rbp)
	cmpl   $0x1,-0x30(%rbp)
	jg     <sort_kv_pairs+0x22>
	nop
	nop
	leave  
	ret    

<get_catch_label_and_change_module>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x28(%rbp),%rax
	mov    0xf8(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0xf8(%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <get_catch_label_and_change_module+0xcf>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_catch_label>
	test   %eax,%eax
	je     <get_catch_label_and_change_module+0xab>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	lea    -0x20(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_to_catch_label_and_module>
	mov    %eax,-0x1c(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x68(%rax),%rdx
	mov    -0x20(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0xf8(%rax)
	mov    -0x1c(%rbp),%eax
	jmp    <get_catch_label_and_change_module+0xe9>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_cp>
	test   %eax,%eax
	je     <get_catch_label_and_change_module+0xca>
	mov    -0x18(%rbp),%rax
	add    $0x8,%rax
	mov    %rax,-0x10(%rbp)
	addq   $0x8,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0xe8(%rax),%rax
	cmp    %rax,-0x18(%rbp)
	jne    <get_catch_label_and_change_module+0x46>
	mov    $0x0,%eax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <get_catch_label_and_change_module+0xfd>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<cp_to_mod_lbl_off>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    %rcx,-0x50(%rbp)
	mov    %r8,-0x58(%rbp)
	mov    -0x40(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x68(%rax),%rdx
	mov    -0x38(%rbp),%rax
	shr    $0x18,%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x38(%rbp),%rax
	shr    $0x2,%rax
	and    $0x3fffff,%eax
	mov    %rax,-0x10(%rbp)
	mov    -0x48(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    0x14(%rax),%eax
	bswap  %eax
	mov    %eax,-0x24(%rbp)
	movl   $0x1,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x40(%rax),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	jmp    <cp_to_mod_lbl_off+0xd2>
	addl   $0x1,-0x28(%rbp)
	mov    -0x28(%rbp),%eax
	cmp    -0x24(%rbp),%eax
	jl     <cp_to_mod_lbl_off+0xb7>
	mov    -0x50(%rbp),%rax
	mov    -0x28(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x58(%rbp),%rax
	movl   $0x0,(%rax)
	jmp    <cp_to_mod_lbl_off+0x11e>
	mov    -0x18(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0x28(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	sub    -0x8(%rbp),%rax
	cmp    %rax,-0x10(%rbp)
	jg     <cp_to_mod_lbl_off+0x96>
	mov    -0x28(%rbp),%eax
	lea    -0x1(%rax),%edx
	mov    -0x50(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x10(%rbp),%rax
	mov    %eax,%ecx
	mov    -0x18(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0x50(%rbp),%rax
	mov    (%rax),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x8(%rbp),%rax
	mov    %eax,%edx
	mov    %ecx,%eax
	sub    %edx,%eax
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,(%rax)
	pop    %rbp
	ret    

<dump>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    0x8b97e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0xe,%edx
	mov    $0x1,%esi
	lea    0x78a89(%rip),%rax        # <_IO_stdin_used+0x19f>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    0x8b95b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x5,%edx
	mov    $0x1,%esi
	lea    0x78a75(%rip),%rax        # <_IO_stdin_used+0x1ae>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x48(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,%rcx
	mov    0x8b927(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x48(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    0x8b911(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rsi
	mov    $0xa,%edi
	call   <fputc@plt>
	mov    -0x48(%rbp),%rax
	mov    0x110(%rax),%rax
	lea    -0x34(%rbp),%rdi
	lea    -0x38(%rbp),%rcx
	lea    -0x28(%rbp),%rdx
	mov    -0x48(%rbp),%rsi
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <cp_to_mod_lbl_off>
	mov    -0x34(%rbp),%esi
	mov    -0x38(%rbp),%ecx
	mov    -0x28(%rbp),%rax
	mov    0x68(%rax),%edx
	mov    0x8b8ca(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %esi,%r8d
	lea    0x789f8(%rip),%rsi        # <_IO_stdin_used+0x1b8>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    0x8b8ac(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x6,%edx
	mov    $0x1,%esi
	lea    0x789fd(%rip),%rax        # <_IO_stdin_used+0x1e5>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rcx
	mov    0x8b881(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x48(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    0x8b86b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x7,%edx
	mov    $0x1,%esi
	lea    0x789c3(%rip),%rax        # <_IO_stdin_used+0x1ec>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x48(%rbp),%rax
	mov    0x60(%rax),%rcx
	mov    0x8b840(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x48(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    0x8b82a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x11,%edx
	mov    $0x1,%esi
	lea    0x7898a(%rip),%rax        # <_IO_stdin_used+0x1f4>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x48(%rbp),%rax
	mov    0xf8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	jmp    <dump+0x294>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_catch_label>
	test   %eax,%eax
	je     <dump+0x1fc>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	lea    -0x28(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_to_catch_label_and_module>
	mov    %eax,-0x2c(%rbp)
	mov    -0x28(%rbp),%ecx
	mov    0x8b7c4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x2c(%rbp),%edx
	lea    0x78940(%rip),%rsi        # <_IO_stdin_used+0x206>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <dump+0x28f>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_cp>
	test   %eax,%eax
	je     <dump+0x25e>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	lea    -0x34(%rbp),%rdi
	lea    -0x38(%rbp),%rcx
	lea    -0x28(%rbp),%rdx
	mov    -0x48(%rbp),%rsi
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <cp_to_mod_lbl_off>
	mov    -0x34(%rbp),%esi
	mov    -0x38(%rbp),%ecx
	mov    -0x28(%rbp),%rax
	mov    0x68(%rax),%edx
	mov    0x8b75f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %esi,%r8d
	lea    0x788ed(%rip),%rsi        # <_IO_stdin_used+0x218>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <dump+0x28f>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rcx
	mov    0x8b738(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x48(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    0x8b722(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rsi
	mov    $0xa,%edi
	call   <fputc@plt>
	addq   $0x8,-0x20(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0xe8(%rax),%rax
	cmp    %rax,-0x20(%rbp)
	jne    <dump+0x1aa>
	mov    0x8b6f4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x16,%edx
	mov    $0x1,%esi
	lea    0x788a0(%rip),%rax        # <_IO_stdin_used+0x240>
	mov    %rax,%rdi
	call   <fwrite@plt>
	movl   $0x0,-0x30(%rbp)
	jmp    <dump+0x323>
	mov    0x8b6c8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x30(%rbp),%edx
	lea    0x78895(%rip),%rcx        # <_IO_stdin_used+0x257>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0x48(%rbp),%rax
	mov    -0x30(%rbp),%edx
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rcx
	mov    0x8b694(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x48(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	addl   $0x1,-0x30(%rbp)
	cmpl   $0xf,-0x30(%rbp)
	jle    <dump+0x2d5>
	mov    0x8b674(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rsi
	mov    $0xa,%edi
	call   <fputc@plt>
	mov    0x8b660(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x13,%edx
	mov    $0x1,%esi
	lea    0x7882c(%rip),%rax        # <_IO_stdin_used+0x260>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x48(%rbp),%rax
	mov    0x130(%rax),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <dump+0x3b6>
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    0x20(%rax),%rcx
	mov    0x8b61c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x48(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    0x8b606(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rsi
	mov    $0xa,%edi
	call   <fputc@plt>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x48(%rbp),%rax
	add    $0x130,%rax
	cmp    %rax,-0x18(%rbp)
	jne    <dump+0x371>
	mov    0x8b5d7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x1a,%edx
	mov    $0x1,%esi
	lea    0x787b7(%rip),%rax        # <_IO_stdin_used+0x274>
	mov    %rax,%rdi
	call   <fwrite@plt>
	nop
	mov    -0x8(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <dump+0x3fe>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<maybe_alloc_boxed_integer_fragment>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	movabs $0xf800000000000000,%rax
	cmp    %rax,-0x20(%rbp)
	jl     <maybe_alloc_boxed_integer_fragment+0x34>
	movabs $0x7ffffffffffffff,%rax
	cmp    %rax,-0x20(%rbp)
	jle    <maybe_alloc_boxed_integer_fragment+0xa6>
	mov    -0x18(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_alloc_heap_fragment>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <maybe_alloc_boxed_integer_fragment+0x89>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <maybe_alloc_boxed_integer_fragment+0xb2>
	mov    -0x20(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_put_int>
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	jmp    <maybe_alloc_boxed_integer_fragment+0xb2>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	leave  
	ret    

<maybe_alloc_boxed_integer_fragment_helper>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %edx,-0x14(%rbp)
	cmpl   $0x7,-0x14(%rbp)
	ja     <maybe_alloc_boxed_integer_fragment_helper+0x27>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	jmp    <maybe_alloc_boxed_integer_fragment_helper+0x3a>
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <maybe_alloc_boxed_integer_fragment>
	leave  
	ret    

<large_integer_to_term>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x30(%rbp),%rax
	movzbl (%rax),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x2,%eax
	mov    %eax,-0x18(%rbp)
	cmpl   $0x8,-0x18(%rbp)
	ja     <large_integer_to_term+0x516>
	mov    -0x18(%rbp),%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x7867d(%rip),%rax        # <_IO_stdin_used+0x290>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x78671(%rip),%rdx        # <_IO_stdin_used+0x290>
	add    %rdx,%rax
	notrack jmp *%rax
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	lea    0x3(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x30(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %ax,-0x1a(%rbp)
	movswq -0x1a(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x2,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <maybe_alloc_boxed_integer_fragment_helper>
	jmp    <large_integer_to_term+0x544>
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	lea    0x4(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x30(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	or     %eax,%edx
	mov    -0x30(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	shl    $0x8,%eax
	sar    $0x8,%eax
	and    $0xffffff,%eax
	mov    %eax,%edx
	mov    -0x10(%rbp),%eax
	and    $0xff000000,%eax
	or     %edx,%eax
	mov    %eax,-0x10(%rbp)
	mov    -0x10(%rbp),%eax
	shl    $0x8,%eax
	sar    $0x8,%eax
	movslq %eax,%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x3,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <maybe_alloc_boxed_integer_fragment_helper>
	jmp    <large_integer_to_term+0x544>
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	lea    0x5(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x30(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%eax
	or     %eax,%edx
	mov    -0x30(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%eax
	or     %eax,%edx
	mov    -0x30(%rbp),%rax
	add    $0x4,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x4,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <maybe_alloc_boxed_integer_fragment_helper>
	jmp    <large_integer_to_term+0x544>
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	lea    0x6(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x30(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x20,%rax
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x4,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x5,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %rdx,%rax
	shl    $0x18,%rax
	sar    $0x18,%rax
	movabs $0xffffffffff,%rdx
	and    %rax,%rdx
	mov    -0x10(%rbp),%rax
	movabs $0xffffff0000000000,%rcx
	and    %rcx,%rax
	or     %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	shl    $0x18,%rax
	sar    $0x18,%rax
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x5,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <maybe_alloc_boxed_integer_fragment_helper>
	jmp    <large_integer_to_term+0x544>
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	lea    0x7(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x30(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x28,%rax
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x20,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x4,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x5,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x6,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %rdx,%rax
	shl    $0x10,%rax
	sar    $0x10,%rax
	movabs $0xffffffffffff,%rdx
	and    %rax,%rdx
	mov    -0x10(%rbp),%rax
	movabs $0xffff000000000000,%rcx
	and    %rcx,%rax
	or     %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	shl    $0x10,%rax
	sar    $0x10,%rax
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x6,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <maybe_alloc_boxed_integer_fragment_helper>
	jmp    <large_integer_to_term+0x544>
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	lea    0x8(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x30(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x30,%rax
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x28,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x20,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x4,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x5,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x6,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x7,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %rdx,%rax
	shl    $0x8,%rax
	sar    $0x8,%rax
	movabs $0xffffffffffffff,%rdx
	and    %rax,%rdx
	mov    -0x10(%rbp),%rax
	movabs $0xff00000000000000,%rcx
	and    %rcx,%rax
	or     %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	shl    $0x8,%rax
	sar    $0x8,%rax
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x7,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <maybe_alloc_boxed_integer_fragment_helper>
	jmp    <large_integer_to_term+0x544>
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	lea    0x9(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x30(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x38,%rax
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x2,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x30,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x3,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x28,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x4,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x20,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x5,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x18,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x6,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x10,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x7,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x8,%rax
	or     %rax,%rdx
	mov    -0x30(%rbp),%rax
	add    $0x8,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x8,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <maybe_alloc_boxed_integer_fragment_helper>
	jmp    <large_integer_to_term+0x544>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<make_fun>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %edx,-0x44(%rbp)
	mov    -0x44(%rbp),%edx
	mov    -0x40(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_fun_freeze>
	mov    %eax,-0x20(%rbp)
	mov    -0x20(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <make_fun+0x5e>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <make_fun+0xfc>
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x18(%rbp)
	mov    -0x1c(%rbp),%eax
	shl    $0x6,%eax
	or     $0x14,%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x44(%rbp),%eax
	cltq   
	mov    -0x18(%rbp),%rdx
	lea    0x10(%rdx),%rbx
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,(%rbx)
	movl   $0x3,-0x24(%rbp)
	jmp    <make_fun+0xe9>
	mov    -0x24(%rbp),%eax
	lea    -0x3(%rax),%ecx
	mov    -0x24(%rbp),%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x18(%rbp),%rax
	add    %rax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %ecx,%ecx
	add    $0xa,%rcx
	mov    0x8(%rax,%rcx,8),%rax
	mov    %rax,(%rdx)
	addl   $0x1,-0x24(%rbp)
	mov    -0x20(%rbp),%eax
	add    $0x3,%eax
	cmp    %eax,-0x24(%rbp)
	jb     <make_fun+0xbb>
	mov    -0x18(%rbp),%rax
	or     $0x2,%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<maybe_call_native>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %ecx,-0x5c(%rbp)
	mov    %r8,-0x68(%rbp)
	mov    -0x5c(%rbp),%edx
	mov    -0x58(%rbp),%rcx
	mov    -0x50(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <bif_registry_get_handler>
	mov    %rax,-0x40(%rbp)
	cmpq   $0x0,-0x40(%rbp)
	je     <maybe_call_native+0x1ec>
	mov    -0x5c(%rbp),%edx
	mov    -0x58(%rbp),%rcx
	mov    -0x50(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <bif_registry_is_gc_bif>
	test   %al,%al
	je     <maybe_call_native+0x13d>
	cmpl   $0x3,-0x5c(%rbp)
	je     <maybe_call_native+0xf6>
	cmpl   $0x3,-0x5c(%rbp)
	jg     <maybe_call_native+0x1ec>
	cmpl   $0x1,-0x5c(%rbp)
	je     <maybe_call_native+0x87>
	cmpl   $0x2,-0x5c(%rbp)
	je     <maybe_call_native+0xba>
	jmp    <maybe_call_native+0x1ec>
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x48(%rbp),%rax
	mov    -0x10(%rbp),%rcx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   *%rcx
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    $0x1,%eax
	jmp    <maybe_call_native+0x23f>
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x60(%rax),%rcx
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x48(%rbp),%rax
	mov    -0x18(%rbp),%r8
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   *%r8
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    $0x1,%eax
	jmp    <maybe_call_native+0x23f>
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x68(%rax),%rsi
	mov    -0x48(%rbp),%rax
	mov    0x60(%rax),%rcx
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x48(%rbp),%rax
	mov    -0x20(%rbp),%r9
	mov    %rsi,%r8
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   *%r9
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    $0x1,%eax
	jmp    <maybe_call_native+0x23f>
	cmpl   $0x2,-0x5c(%rbp)
	je     <maybe_call_native+0x1b5>
	cmpl   $0x2,-0x5c(%rbp)
	jg     <maybe_call_native+0x1ec>
	cmpl   $0x0,-0x5c(%rbp)
	je     <maybe_call_native+0x15e>
	cmpl   $0x1,-0x5c(%rbp)
	je     <maybe_call_native+0x184>
	jmp    <maybe_call_native+0x1ec>
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x48(%rbp),%rax
	mov    -0x28(%rbp),%rdx
	mov    %rax,%rdi
	call   *%rdx
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    $0x1,%eax
	jmp    <maybe_call_native+0x23f>
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x48(%rbp),%rax
	mov    -0x30(%rbp),%rcx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   *%rcx
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    $0x1,%eax
	jmp    <maybe_call_native+0x23f>
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x60(%rax),%rdx
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rcx
	mov    -0x48(%rbp),%rax
	mov    -0x38(%rbp),%r8
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   *%r8
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    $0x1,%eax
	jmp    <maybe_call_native+0x23f>
	mov    -0x5c(%rbp),%edx
	mov    -0x58(%rbp),%rcx
	mov    -0x50(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <nifs_get>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	je     <maybe_call_native+0x23a>
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%r8
	mov    -0x48(%rbp),%rax
	lea    0x58(%rax),%rdx
	mov    -0x5c(%rbp),%ecx
	mov    -0x48(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   *%r8
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    $0x1,%eax
	jmp    <maybe_call_native+0x23f>
	mov    $0x0,%eax
	leave  
	ret    

<context_execute_loop>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x1000,%rsp
	orq    $0x0,(%rsp)
	sub    $0x1a8,%rsp
	mov    %rdi,-0x1198(%rbp)
	mov    %rsi,-0x11a0(%rbp)
	mov    %rdx,-0x11a8(%rbp)
	mov    %ecx,-0x11ac(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	movl   $0x0,-0xdfc(%rbp)
	mov    -0x11a8(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %eax,-0xae0(%rbp)
	mov    -0xae0(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x550(%rbp)
	mov    -0xae0(%rbp),%eax
	mov    %eax,%edx
	mov    -0x550(%rbp),%rax
	mov    %dl,(%rax)
	mov    -0xae0(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x550(%rbp),%rax
	lea    0x1(%rax),%rcx
	mov    -0x11a8(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x11a0(%rbp),%rax
	mov    -0x11ac(%rbp),%edx
	mov    -0x550(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_search_exported_function>
	mov    %eax,-0xadc(%rbp)
	mov    -0x550(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	cmpl   $0x0,-0xadc(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x156>
	mov    0x8ab00(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x11ac(%rbp),%ecx
	mov    -0x11a8(%rbp),%rdx
	lea    0x77d20(%rip),%rsi        # <_IO_stdin_used+0x2b4>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	jmp    <context_execute_loop+0x3dd45>
	mov    -0x11a0(%rbp),%rax
	mov    0x6c(%rax),%eax
	mov    %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    0x68(%rax),%eax
	mov    %edx,%esi
	mov    %eax,%edi
	call   <module_address>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x110(%rdx)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xadc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	cmp    $0xaa,%eax
	ja     <context_execute_loop+0x3d67a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x77df2(%rip),%rax        # <_IO_stdin_used+0x430>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x77de6(%rip),%rdx        # <_IO_stdin_used+0x430>
	add    %rdx,%rax
	notrack jmp *%rax
	movl   $0x1,-0xdf4(%rbp)
	mov    -0xdf4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf07(%rbp)
	movzbl -0xf07(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x24d>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2ae>
	test   %eax,%eax
	je     <context_execute_loop+0x24d>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x269>
	jmp    <context_execute_loop+0x2ae>
	movzbl -0xf07(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa14(%rbp)
	addl   $0x1,-0xdf4(%rbp)
	jmp    <context_execute_loop+0x2d8>
	movzbl -0xf07(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdf4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xa14(%rbp)
	addl   $0x2,-0xdf4(%rbp)
	jmp    <context_execute_loop+0x2d8>
	movzbl -0xf07(%rbp),%edx
	mov    0x8a96f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x77bb8(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdf4(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xdf0(%rbp)
	mov    -0xdf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf0b(%rbp)
	movzbl -0xf0b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x33b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x39c>
	test   %eax,%eax
	je     <context_execute_loop+0x33b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x357>
	jmp    <context_execute_loop+0x39c>
	movzbl -0xf0b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa28(%rbp)
	addl   $0x1,-0xdf0(%rbp)
	jmp    <context_execute_loop+0x3c6>
	movzbl -0xf0b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xa28(%rbp)
	addl   $0x2,-0xdf0(%rbp)
	jmp    <context_execute_loop+0x3c6>
	movzbl -0xf0b(%rbp),%edx
	mov    0x8a881(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x77aca(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf0a(%rbp)
	movzbl -0xf0a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x40e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x46f>
	test   %eax,%eax
	je     <context_execute_loop+0x40e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x42a>
	jmp    <context_execute_loop+0x46f>
	movzbl -0xf0a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa24(%rbp)
	addl   $0x1,-0xdf0(%rbp)
	jmp    <context_execute_loop+0x499>
	movzbl -0xf0a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xa24(%rbp)
	addl   $0x2,-0xdf0(%rbp)
	jmp    <context_execute_loop+0x499>
	movzbl -0xf0a(%rbp),%edx
	mov    0x8a7ae(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x779f7(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf09(%rbp)
	movzbl -0xf09(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x4e1>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x542>
	test   %eax,%eax
	je     <context_execute_loop+0x4e1>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x4fd>
	jmp    <context_execute_loop+0x542>
	movzbl -0xf09(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa20(%rbp)
	addl   $0x1,-0xdf0(%rbp)
	jmp    <context_execute_loop+0x56c>
	movzbl -0xf09(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xa20(%rbp)
	addl   $0x2,-0xdf0(%rbp)
	jmp    <context_execute_loop+0x56c>
	movzbl -0xf09(%rbp),%edx
	mov    0x8a6db(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7795c(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x9,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	movq   $0xb0b,0x1b8(%rax)
	jmp    <context_execute_loop+0x3dc46>
	movl   $0x1,-0xdec(%rbp)
	mov    -0xdec(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf0d(%rbp)
	movzbl -0xf0d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x604>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x665>
	test   %eax,%eax
	je     <context_execute_loop+0x604>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x620>
	jmp    <context_execute_loop+0x665>
	movzbl -0xf0d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa2c(%rbp)
	addl   $0x1,-0xdec(%rbp)
	jmp    <context_execute_loop+0x68f>
	movzbl -0xf0d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdec(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xa2c(%rbp)
	addl   $0x2,-0xdec(%rbp)
	jmp    <context_execute_loop+0x68f>
	movzbl -0xf0d(%rbp),%edx
	mov    0x8a5b8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x77839(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdec(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf0c(%rbp)
	movzbl -0xf0c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x6d7>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x738>
	test   %eax,%eax
	je     <context_execute_loop+0x6d7>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x6f3>
	jmp    <context_execute_loop+0x738>
	movzbl -0xf0c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xde8(%rbp)
	addl   $0x1,-0xdec(%rbp)
	jmp    <context_execute_loop+0x762>
	movzbl -0xf0c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdec(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xde8(%rbp)
	addl   $0x2,-0xdec(%rbp)
	jmp    <context_execute_loop+0x762>
	movzbl -0xf0c(%rbp),%edx
	mov    0x8a4e5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7772e(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdec(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x68(%rax),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	mov    %eax,%esi
	mov    %edx,%edi
	call   <module_address>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x110(%rdx)
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x7df>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xde8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xde8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xde4(%rbp)
	mov    -0xde4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf10(%rbp)
	movzbl -0xf10(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x916>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x977>
	test   %eax,%eax
	je     <context_execute_loop+0x916>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x932>
	jmp    <context_execute_loop+0x977>
	movzbl -0xf10(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa30(%rbp)
	addl   $0x1,-0xde4(%rbp)
	jmp    <context_execute_loop+0x9a1>
	movzbl -0xf10(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xde4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xa30(%rbp)
	addl   $0x2,-0xde4(%rbp)
	jmp    <context_execute_loop+0x9a1>
	movzbl -0xf10(%rbp),%edx
	mov    0x8a2a6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x77527(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xde4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf0f(%rbp)
	movzbl -0xf0f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x9e9>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xa4a>
	test   %eax,%eax
	je     <context_execute_loop+0x9e9>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xa05>
	jmp    <context_execute_loop+0xa4a>
	movzbl -0xf0f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xde0(%rbp)
	addl   $0x1,-0xde4(%rbp)
	jmp    <context_execute_loop+0xa74>
	movzbl -0xf0f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xde4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xde0(%rbp)
	addl   $0x2,-0xde4(%rbp)
	jmp    <context_execute_loop+0xa74>
	movzbl -0xf0f(%rbp),%edx
	mov    0x8a1d3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7741c(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xde4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf0e(%rbp)
	movzbl -0xf0e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xabc>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xb1d>
	test   %eax,%eax
	je     <context_execute_loop+0xabc>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xad8>
	jmp    <context_execute_loop+0xb1d>
	movzbl -0xf0e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xddc(%rbp)
	addl   $0x1,-0xde4(%rbp)
	jmp    <context_execute_loop+0xb47>
	movzbl -0xf0e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xde4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xddc(%rbp)
	addl   $0x2,-0xde4(%rbp)
	jmp    <context_execute_loop+0xb47>
	movzbl -0xf0e(%rbp),%edx
	mov    0x8a100(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x77381(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xddc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x110(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xddc(%rbp),%eax
	cltq   
	add    $0x1,%rax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xbec>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xde0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xde0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x40(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xdd8(%rbp)
	mov    -0xdd8(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf12(%rbp)
	movzbl -0xf12(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xd23>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xd84>
	test   %eax,%eax
	je     <context_execute_loop+0xd23>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xd3f>
	jmp    <context_execute_loop+0xd84>
	movzbl -0xf12(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa34(%rbp)
	addl   $0x1,-0xdd8(%rbp)
	jmp    <context_execute_loop+0xdae>
	movzbl -0xf12(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdd8(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xa34(%rbp)
	addl   $0x2,-0xdd8(%rbp)
	jmp    <context_execute_loop+0xdae>
	movzbl -0xf12(%rbp),%edx
	mov    0x89e99(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7711a(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdd8(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf11(%rbp)
	movzbl -0xf11(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xdf6>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xe57>
	test   %eax,%eax
	je     <context_execute_loop+0xdf6>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xe12>
	jmp    <context_execute_loop+0xe57>
	movzbl -0xf11(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xdd4(%rbp)
	addl   $0x1,-0xdd8(%rbp)
	jmp    <context_execute_loop+0xe81>
	movzbl -0xf11(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdd8(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xdd4(%rbp)
	addl   $0x2,-0xdd8(%rbp)
	jmp    <context_execute_loop+0xe81>
	movzbl -0xf11(%rbp),%edx
	mov    0x89dc6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7700f(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdd8(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xed5>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xdd4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xdd4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xdd0(%rbp)
	mov    -0xdd0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf14(%rbp)
	movzbl -0xf14(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x100c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x106d>
	test   %eax,%eax
	je     <context_execute_loop+0x100c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1028>
	jmp    <context_execute_loop+0x106d>
	movzbl -0xf14(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xdcc(%rbp)
	addl   $0x1,-0xdd0(%rbp)
	jmp    <context_execute_loop+0x1097>
	movzbl -0xf14(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdd0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xdcc(%rbp)
	addl   $0x2,-0xdd0(%rbp)
	jmp    <context_execute_loop+0x1097>
	movzbl -0xf14(%rbp),%edx
	mov    0x89bb0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x76e31(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdd0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf13(%rbp)
	movzbl -0xf13(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x10df>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1140>
	test   %eax,%eax
	je     <context_execute_loop+0x10df>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x10fb>
	jmp    <context_execute_loop+0x1140>
	movzbl -0xf13(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xdc8(%rbp)
	addl   $0x1,-0xdd0(%rbp)
	jmp    <context_execute_loop+0x116a>
	movzbl -0xf13(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdd0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xdc8(%rbp)
	addl   $0x2,-0xdd0(%rbp)
	jmp    <context_execute_loop+0x116a>
	movzbl -0xf13(%rbp),%edx
	mov    0x89add(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x76d5e(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x125f>
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x50(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0xdd0(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xdc8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9f0(%rbp)
	mov    -0x9f0(%rbp),%rax
	mov    (%rax),%eax
	cmp    $0x3,%eax
	jne    <context_execute_loop+0x12fc>
	mov    -0x11a0(%rbp),%rax
	mov    -0xdc8(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_resolve_function>
	mov    %rax,-0x70(%rbp)
	cmpq   $0x0,-0x70(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x12f1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0xa0b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x70(%rbp),%rax
	mov    %rax,-0x9f0(%rbp)
	mov    -0x9f0(%rbp),%rax
	mov    (%rax),%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1314>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x137c>
	jmp    <context_execute_loop+0x1402>
	mov    -0x9f0(%rbp),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x60(%rbp),%rax
	mov    0x8(%rax),%r8
	mov    -0x1198(%rbp),%rax
	lea    0x58(%rax),%rdx
	mov    -0xdcc(%rbp),%ecx
	mov    -0x1198(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   *%r8
	mov    %rax,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da5f>
	mov    -0x1198(%rbp),%rax
	mov    -0x58(%rbp),%rdx
	mov    %rdx,0x58(%rax)
	jmp    <context_execute_loop+0x1431>
	mov    -0x9f0(%rbp),%rax
	mov    %rax,-0x68(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x68(%rax),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	mov    %eax,%esi
	mov    %edx,%edi
	call   <module_address>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x110(%rdx)
	mov    -0x68(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0x68(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x1431>
	mov    -0x9f0(%rbp),%rax
	mov    (%rax),%edx
	mov    0x89819(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0xdc8(%rbp),%ecx
	lea    0x76acc(%rip),%rsi        # <_IO_stdin_used+0x340>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xdc4(%rbp)
	mov    -0xdc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf17(%rbp)
	movzbl -0xf17(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1488>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x14e9>
	test   %eax,%eax
	je     <context_execute_loop+0x1488>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x14a4>
	jmp    <context_execute_loop+0x14e9>
	movzbl -0xf17(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xdc0(%rbp)
	addl   $0x1,-0xdc4(%rbp)
	jmp    <context_execute_loop+0x1513>
	movzbl -0xf17(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xdc0(%rbp)
	addl   $0x2,-0xdc4(%rbp)
	jmp    <context_execute_loop+0x1513>
	movzbl -0xf17(%rbp),%edx
	mov    0x89734(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x769b5(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf16(%rbp)
	movzbl -0xf16(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x155b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x15bc>
	test   %eax,%eax
	je     <context_execute_loop+0x155b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1577>
	jmp    <context_execute_loop+0x15bc>
	movzbl -0xf16(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xdbc(%rbp)
	addl   $0x1,-0xdc4(%rbp)
	jmp    <context_execute_loop+0x15e6>
	movzbl -0xf16(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xdbc(%rbp)
	addl   $0x2,-0xdc4(%rbp)
	jmp    <context_execute_loop+0x15e6>
	movzbl -0xf16(%rbp),%edx
	mov    0x89661(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x768e2(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf15(%rbp)
	movzbl -0xf15(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x162e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x168f>
	test   %eax,%eax
	je     <context_execute_loop+0x162e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x164a>
	jmp    <context_execute_loop+0x168f>
	movzbl -0xf15(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xdb8(%rbp)
	addl   $0x1,-0xdc4(%rbp)
	jmp    <context_execute_loop+0x16b9>
	movzbl -0xf15(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xdb8(%rbp)
	addl   $0x2,-0xdc4(%rbp)
	jmp    <context_execute_loop+0x16b9>
	movzbl -0xf15(%rbp),%edx
	mov    0x8958e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7680f(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x17ae>
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x78(%rbp)
	mov    -0x78(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xdb8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x110(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xdb8(%rbp),%eax
	cltq   
	add    $0x1,%rax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xdbc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9e8(%rbp)
	mov    -0x9e8(%rbp),%rax
	mov    (%rax),%eax
	cmp    $0x3,%eax
	jne    <context_execute_loop+0x18a5>
	mov    -0x11a0(%rbp),%rax
	mov    -0xdbc(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_resolve_function>
	mov    %rax,-0x98(%rbp)
	cmpq   $0x0,-0x98(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1897>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0xa0b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x98(%rbp),%rax
	mov    %rax,-0x9e8(%rbp)
	mov    -0x9e8(%rbp),%rax
	mov    (%rax),%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x18c1>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x1993>
	jmp    <context_execute_loop+0x19f9>
	mov    -0x9e8(%rbp),%rax
	mov    %rax,-0x88(%rbp)
	mov    -0x88(%rbp),%rax
	mov    0x8(%rax),%r8
	mov    -0x1198(%rbp),%rax
	lea    0x58(%rax),%rdx
	mov    -0xdc0(%rbp),%ecx
	mov    -0x1198(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   *%r8
	mov    %rax,-0x80(%rbp)
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da62>
	mov    -0x1198(%rbp),%rax
	mov    -0x80(%rbp),%rdx
	mov    %rdx,0x58(%rax)
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    0x68(%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	shr    $0x18,%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	shr    $0x2,%rax
	and    $0x3fffff,%eax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x1a28>
	mov    -0x9e8(%rbp),%rax
	mov    %rax,-0x90(%rbp)
	mov    -0x90(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0x90(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x1a28>
	mov    -0x9e8(%rbp),%rax
	mov    (%rax),%edx
	mov    0x89222(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0xdbc(%rbp),%ecx
	lea    0x764d5(%rip),%rsi        # <_IO_stdin_used+0x340>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xdb4(%rbp)
	mov    -0xdb4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf1b(%rbp)
	movzbl -0xf1b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1a7f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1ae0>
	test   %eax,%eax
	je     <context_execute_loop+0x1a7f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1a9b>
	jmp    <context_execute_loop+0x1ae0>
	movzbl -0xf1b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xdb0(%rbp)
	addl   $0x1,-0xdb4(%rbp)
	jmp    <context_execute_loop+0x1b0a>
	movzbl -0xf1b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdb4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xdb0(%rbp)
	addl   $0x2,-0xdb4(%rbp)
	jmp    <context_execute_loop+0x1b0a>
	movzbl -0xf1b(%rbp),%edx
	mov    0x8913d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x763be(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xdb4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf1a(%rbp)
	movzbl -0xf1a(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xf19(%rbp)
	movzbl -0xf1a(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xf18(%rbp)
	movzbl -0xf19(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x1bc2>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d6e1>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x1b71>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x1b98>
	jmp    <context_execute_loop+0x3d6e1>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf18(%rbp),%eax
	mov    %eax,-0xdac(%rbp)
	addl   $0x1,-0xdb4(%rbp)
	jmp    <context_execute_loop+0x1c35>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf18(%rbp),%eax
	mov    %eax,-0xdac(%rbp)
	addl   $0x1,-0xdb4(%rbp)
	jmp    <context_execute_loop+0x1c35>
	movzbl -0xf1a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf1a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xdb4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xdac(%rbp)
	addl   $0x2,-0xdb4(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xdb0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0xa8(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    -0xa8(%rbp),%rdx
	mov    %rax,%rdi
	call   *%rdx
	mov    %rax,-0xa0(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xdac(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0xa0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xdb4(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf23(%rbp)
	movzbl -0xf23(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1cfb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1d6e>
	test   %eax,%eax
	je     <context_execute_loop+0x1cfb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1d1f>
	jmp    <context_execute_loop+0x1d6e>
	movzbl -0xf23(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa38(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1d98>
	movzbl -0xf23(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa38(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1d98>
	movzbl -0xf23(%rbp),%edx
	mov    0x88eaf(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x760f8(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf22(%rbp)
	movzbl -0xf22(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1de2>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1e55>
	test   %eax,%eax
	je     <context_execute_loop+0x1de2>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1e06>
	jmp    <context_execute_loop+0x1e55>
	movzbl -0xf22(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xda8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1e7f>
	movzbl -0xf22(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xda8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1e7f>
	movzbl -0xf22(%rbp),%edx
	mov    0x88dc8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x76049(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf21(%rbp)
	movzbl -0xf21(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d6e7>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x763bf(%rip),%rax        # <_IO_stdin_used+0x6dc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x763b3(%rip),%rdx        # <_IO_stdin_used+0x6dc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf21(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1eff>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1f6f>
	test   %eax,%eax
	je     <context_execute_loop+0x1eff>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1f2b>
	jmp    <context_execute_loop+0x1f6f>
	movzbl -0xf21(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1f99>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1f99>
	movzbl -0xf21(%rbp),%edx
	mov    0x88cae(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x75f8f(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x23cf>
	movzbl -0xf21(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23cf>
	cmpb   $0x2,-0xf21(%rbp)
	jne    <context_execute_loop+0x1fe9>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x9e0(%rbp)
	jmp    <context_execute_loop+0x200e>
	movzbl -0xf21(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23cf>
	movzbl -0xf21(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23cf>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf21(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23cf>
	movzbl -0xf21(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf20(%rbp)
	movzbl -0xf20(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2123>
	movzbl -0xf20(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21b3>
	movzbl -0xf20(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf1f(%rbp)
	movzbl -0xf20(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf1f(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe06(%rbp)
	movzwl -0xe06(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x9e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x21fe>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x23cf>
	movzbl -0xf21(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf21(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23cf>
	movzbl -0xf21(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2293>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x22ea>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf21(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2346>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x9e0(%rbp)
	mov    -0x9e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x23cf>
	movzbl -0xf21(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf21(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf1e(%rbp)
	movzbl -0xf1e(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xf1d(%rbp)
	movzbl -0xf1e(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xf1c(%rbp)
	movzbl -0xf1d(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x2499>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d6ed>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x2438>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x2467>
	jmp    <context_execute_loop+0x3d6ed>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf1c(%rbp),%eax
	mov    %eax,-0xda4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2516>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf1c(%rbp),%eax
	mov    %eax,-0xda4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2516>
	movzbl -0xf1e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf1e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xda4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xda8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0xb8(%rbp)
	mov    -0x9e0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    -0xb8(%rbp),%rcx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   *%rcx
	mov    %rax,-0xb0(%rbp)
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da65>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xda4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0xb0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf2e(%rbp)
	movzbl -0xf2e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2606>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2679>
	test   %eax,%eax
	je     <context_execute_loop+0x2606>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x262a>
	jmp    <context_execute_loop+0x2679>
	movzbl -0xf2e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa3c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x26a3>
	movzbl -0xf2e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa3c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x26a3>
	movzbl -0xf2e(%rbp),%edx
	mov    0x885a4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x757ed(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf2d(%rbp)
	movzbl -0xf2d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x26ed>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2760>
	test   %eax,%eax
	je     <context_execute_loop+0x26ed>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2711>
	jmp    <context_execute_loop+0x2760>
	movzbl -0xf2d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xda0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x278a>
	movzbl -0xf2d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xda0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x278a>
	movzbl -0xf2d(%rbp),%edx
	mov    0x884bd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7573e(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf2c(%rbp)
	movzbl -0xf2c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d6f3>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x75ae8(%rip),%rax        # <_IO_stdin_used+0x710>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x75adc(%rip),%rdx        # <_IO_stdin_used+0x710>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf2c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x280a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x287a>
	test   %eax,%eax
	je     <context_execute_loop+0x280a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2836>
	jmp    <context_execute_loop+0x287a>
	movzbl -0xf2c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x28a4>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x28a4>
	movzbl -0xf2c(%rbp),%edx
	mov    0x883a3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x75684(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2cda>
	movzbl -0xf2c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2cda>
	cmpb   $0x2,-0xf2c(%rbp)
	jne    <context_execute_loop+0x28f4>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x9d8(%rbp)
	jmp    <context_execute_loop+0x2919>
	movzbl -0xf2c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2cda>
	movzbl -0xf2c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2cda>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf2c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2cda>
	movzbl -0xf2c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf2b(%rbp)
	movzbl -0xf2b(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2a2e>
	movzbl -0xf2b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2abe>
	movzbl -0xf2b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf2a(%rbp)
	movzbl -0xf2b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf2a(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe0a(%rbp)
	movzwl -0xe0a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x9d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2b09>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2cda>
	movzbl -0xf2c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf2c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2cda>
	movzbl -0xf2c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2b9e>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2bf5>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf2c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2c51>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x9d8(%rbp)
	mov    -0x9d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2cda>
	movzbl -0xf2c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf2c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9d8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf29(%rbp)
	movzbl -0xf29(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d6f9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x755cc(%rip),%rax        # <_IO_stdin_used+0x744>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x755c0(%rip),%rdx        # <_IO_stdin_used+0x744>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf29(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2d5a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2dca>
	test   %eax,%eax
	je     <context_execute_loop+0x2d5a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2d86>
	jmp    <context_execute_loop+0x2dca>
	movzbl -0xf29(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2df4>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2df4>
	movzbl -0xf29(%rbp),%edx
	mov    0x87e53(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x75134(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x322a>
	movzbl -0xf29(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x322a>
	cmpb   $0x2,-0xf29(%rbp)
	jne    <context_execute_loop+0x2e44>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x9d0(%rbp)
	jmp    <context_execute_loop+0x2e69>
	movzbl -0xf29(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x322a>
	movzbl -0xf29(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x322a>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf29(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x322a>
	movzbl -0xf29(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf28(%rbp)
	movzbl -0xf28(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2f7e>
	movzbl -0xf28(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x300e>
	movzbl -0xf28(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf27(%rbp)
	movzbl -0xf28(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf27(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe08(%rbp)
	movzwl -0xe08(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x9d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3059>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x322a>
	movzbl -0xf29(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf29(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x322a>
	movzbl -0xf29(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x30ee>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3145>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf29(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31a1>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x9d0(%rbp)
	mov    -0x9d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x322a>
	movzbl -0xf29(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf29(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9d0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf26(%rbp)
	movzbl -0xf26(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xf25(%rbp)
	movzbl -0xf26(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xf24(%rbp)
	movzbl -0xf25(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x32f4>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d6ff>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3293>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x32c2>
	jmp    <context_execute_loop+0x3d6ff>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf24(%rbp),%eax
	mov    %eax,-0xd9c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3371>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf24(%rbp),%eax
	mov    %eax,-0xd9c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3371>
	movzbl -0xf26(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf26(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd9c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xda0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0xc8(%rbp)
	mov    -0x9d0(%rbp),%rdx
	mov    -0x9d8(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    -0xc8(%rbp),%r8
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   *%r8
	mov    %rax,-0xc0(%rbp)
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da68>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xd9c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0xc0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xd98(%rbp)
	mov    -0xd98(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf30(%rbp)
	movzbl -0xf30(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3467>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x34c8>
	test   %eax,%eax
	je     <context_execute_loop+0x3467>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3483>
	jmp    <context_execute_loop+0x34c8>
	movzbl -0xf30(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd94(%rbp)
	addl   $0x1,-0xd98(%rbp)
	jmp    <context_execute_loop+0x34f2>
	movzbl -0xf30(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd98(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd94(%rbp)
	addl   $0x2,-0xd98(%rbp)
	jmp    <context_execute_loop+0x34f2>
	movzbl -0xf30(%rbp),%edx
	mov    0x87755(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x749d6(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xd98(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf2f(%rbp)
	movzbl -0xf2f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x353a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x359b>
	test   %eax,%eax
	je     <context_execute_loop+0x353a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3556>
	jmp    <context_execute_loop+0x359b>
	movzbl -0xf2f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd90(%rbp)
	addl   $0x1,-0xd98(%rbp)
	jmp    <context_execute_loop+0x35c5>
	movzbl -0xf2f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd98(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd90(%rbp)
	addl   $0x2,-0xd98(%rbp)
	jmp    <context_execute_loop+0x35c5>
	movzbl -0xf2f(%rbp),%edx
	mov    0x87682(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x74903(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0xd8(%rax),%eax
	cmp    %eax,-0xd90(%rbp)
	jle    <context_execute_loop+0x3602>
	mov    0x8764a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x22,%edx
	mov    $0x1,%esi
	lea    0x74956(%rip),%rax        # <_IO_stdin_used+0x3a0>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0xd90(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <context_clean_registers>
	mov    -0x1198(%rbp),%rax
	mov    0xf0(%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rcx
	mov    -0xd94(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rsi
	mov    $0xfffffffffffffff8,%rax
	sub    %rsi,%rax
	add    %rcx,%rax
	cmp    %rax,%rdx
	jbe    <context_execute_loop+0x36af>
	mov    -0xd94(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x36af>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd94(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    $0xfffffffffffffff8,%rax
	sub    %rcx,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd94(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	mov    %rax,(%rdx)
	mov    -0xd98(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xd8c(%rbp)
	mov    -0xd8c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf33(%rbp)
	movzbl -0xf33(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3779>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x37da>
	test   %eax,%eax
	je     <context_execute_loop+0x3779>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3795>
	jmp    <context_execute_loop+0x37da>
	movzbl -0xf33(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd88(%rbp)
	addl   $0x1,-0xd8c(%rbp)
	jmp    <context_execute_loop+0x3804>
	movzbl -0xf33(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd8c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd88(%rbp)
	addl   $0x2,-0xd8c(%rbp)
	jmp    <context_execute_loop+0x3804>
	movzbl -0xf33(%rbp),%edx
	mov    0x87443(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x746c4(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xd8c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf32(%rbp)
	movzbl -0xf32(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x384c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x38ad>
	test   %eax,%eax
	je     <context_execute_loop+0x384c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3868>
	jmp    <context_execute_loop+0x38ad>
	movzbl -0xf32(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd84(%rbp)
	addl   $0x1,-0xd8c(%rbp)
	jmp    <context_execute_loop+0x38d7>
	movzbl -0xf32(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd8c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd84(%rbp)
	addl   $0x2,-0xd8c(%rbp)
	jmp    <context_execute_loop+0x38d7>
	movzbl -0xf32(%rbp),%edx
	mov    0x87370(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x745f1(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xd8c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf31(%rbp)
	movzbl -0xf31(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x391f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3980>
	test   %eax,%eax
	je     <context_execute_loop+0x391f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x393b>
	jmp    <context_execute_loop+0x3980>
	movzbl -0xf31(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd80(%rbp)
	addl   $0x1,-0xd8c(%rbp)
	jmp    <context_execute_loop+0x39aa>
	movzbl -0xf31(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd8c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd80(%rbp)
	addl   $0x2,-0xd8c(%rbp)
	jmp    <context_execute_loop+0x39aa>
	movzbl -0xf31(%rbp),%edx
	mov    0x8729d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7451e(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0xd8(%rax),%eax
	cmp    %eax,-0xd80(%rbp)
	jle    <context_execute_loop+0x39e7>
	mov    0x87265(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x22,%edx
	mov    $0x1,%esi
	lea    0x74571(%rip),%rax        # <_IO_stdin_used+0x3a0>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0xd80(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <context_clean_registers>
	mov    -0x1198(%rbp),%rax
	mov    0xf0(%rax),%rdx
	mov    -0xd84(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rcx
	mov    -0xd88(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rsi
	mov    $0xfffffffffffffff8,%rax
	sub    %rsi,%rax
	add    %rcx,%rax
	cmp    %rax,%rdx
	jbe    <context_execute_loop+0x3aab>
	mov    -0xd84(%rbp),%edx
	mov    -0xd88(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3aab>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd88(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    $0xfffffffffffffff8,%rax
	sub    %rcx,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd88(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	mov    %rax,(%rdx)
	mov    -0xd8c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xd7c(%rbp)
	mov    -0xd7c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf35(%rbp)
	movzbl -0xf35(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3b75>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3bd6>
	test   %eax,%eax
	je     <context_execute_loop+0x3b75>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3b91>
	jmp    <context_execute_loop+0x3bd6>
	movzbl -0xf35(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd78(%rbp)
	addl   $0x1,-0xd7c(%rbp)
	jmp    <context_execute_loop+0x3c00>
	movzbl -0xf35(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd7c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd78(%rbp)
	addl   $0x2,-0xd7c(%rbp)
	jmp    <context_execute_loop+0x3c00>
	movzbl -0xf35(%rbp),%edx
	mov    0x87047(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x742c8(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xd7c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf34(%rbp)
	movzbl -0xf34(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3c48>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3ca9>
	test   %eax,%eax
	je     <context_execute_loop+0x3c48>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3c64>
	jmp    <context_execute_loop+0x3ca9>
	movzbl -0xf34(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd74(%rbp)
	addl   $0x1,-0xd7c(%rbp)
	jmp    <context_execute_loop+0x3cd3>
	movzbl -0xf34(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd7c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd74(%rbp)
	addl   $0x2,-0xd7c(%rbp)
	jmp    <context_execute_loop+0x3cd3>
	movzbl -0xf34(%rbp),%edx
	mov    0x86f74(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x741f5(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0xd8(%rax),%eax
	cmp    %eax,-0xd74(%rbp)
	jle    <context_execute_loop+0x3d10>
	mov    0x86f3c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x22,%edx
	mov    $0x1,%esi
	lea    0x74248(%rip),%rax        # <_IO_stdin_used+0x3a0>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0xd74(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <context_clean_registers>
	mov    -0x1198(%rbp),%rax
	mov    0xf0(%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rcx
	mov    -0xd78(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rsi
	mov    $0xfffffffffffffff8,%rax
	sub    %rsi,%rax
	add    %rcx,%rax
	cmp    %rax,%rdx
	jbe    <context_execute_loop+0x3dbd>
	mov    -0xd78(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3dbd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd78(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    $0xfffffffffffffff8,%rax
	sub    %rcx,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	movl   $0x0,-0xd70(%rbp)
	jmp    <context_execute_loop+0x3e34>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd70(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	lea    (%rdx,%rax,1),%rbx
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,(%rbx)
	addl   $0x1,-0xd70(%rbp)
	mov    -0xd70(%rbp),%eax
	cmp    -0xd78(%rbp),%eax
	jl     <context_execute_loop+0x3e02>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd78(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	mov    %rax,(%rdx)
	mov    -0xd7c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xd6c(%rbp)
	mov    -0xd6c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf38(%rbp)
	movzbl -0xf38(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3ed3>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3f34>
	test   %eax,%eax
	je     <context_execute_loop+0x3ed3>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3eef>
	jmp    <context_execute_loop+0x3f34>
	movzbl -0xf38(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd68(%rbp)
	addl   $0x1,-0xd6c(%rbp)
	jmp    <context_execute_loop+0x3f5e>
	movzbl -0xf38(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd6c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd68(%rbp)
	addl   $0x2,-0xd6c(%rbp)
	jmp    <context_execute_loop+0x3f5e>
	movzbl -0xf38(%rbp),%edx
	mov    0x86ce9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x73f6a(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xd6c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf37(%rbp)
	movzbl -0xf37(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3fa6>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x4007>
	test   %eax,%eax
	je     <context_execute_loop+0x3fa6>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3fc2>
	jmp    <context_execute_loop+0x4007>
	movzbl -0xf37(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd64(%rbp)
	addl   $0x1,-0xd6c(%rbp)
	jmp    <context_execute_loop+0x4031>
	movzbl -0xf37(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd6c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd64(%rbp)
	addl   $0x2,-0xd6c(%rbp)
	jmp    <context_execute_loop+0x4031>
	movzbl -0xf37(%rbp),%edx
	mov    0x86c16(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x73e97(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xd6c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf36(%rbp)
	movzbl -0xf36(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x4079>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x40da>
	test   %eax,%eax
	je     <context_execute_loop+0x4079>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x4095>
	jmp    <context_execute_loop+0x40da>
	movzbl -0xf36(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd60(%rbp)
	addl   $0x1,-0xd6c(%rbp)
	jmp    <context_execute_loop+0x4104>
	movzbl -0xf36(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd6c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd60(%rbp)
	addl   $0x2,-0xd6c(%rbp)
	jmp    <context_execute_loop+0x4104>
	movzbl -0xf36(%rbp),%edx
	mov    0x86b43(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x73dc4(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0xd8(%rax),%eax
	cmp    %eax,-0xd60(%rbp)
	jle    <context_execute_loop+0x4141>
	mov    0x86b0b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x22,%edx
	mov    $0x1,%esi
	lea    0x73e17(%rip),%rax        # <_IO_stdin_used+0x3a0>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0xd60(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <context_clean_registers>
	mov    -0x1198(%rbp),%rax
	mov    0xf0(%rax),%rdx
	mov    -0xd64(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rcx
	mov    -0xd68(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rsi
	mov    $0xfffffffffffffff8,%rax
	sub    %rsi,%rax
	add    %rcx,%rax
	cmp    %rax,%rdx
	jbe    <context_execute_loop+0x4205>
	mov    -0xd64(%rbp),%edx
	mov    -0xd68(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x4205>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd68(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    $0xfffffffffffffff8,%rax
	sub    %rcx,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	movl   $0x0,-0xd5c(%rbp)
	jmp    <context_execute_loop+0x427c>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd5c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	lea    (%rdx,%rax,1),%rbx
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,(%rbx)
	addl   $0x1,-0xd5c(%rbp)
	mov    -0xd5c(%rbp),%eax
	cmp    -0xd68(%rbp),%eax
	jl     <context_execute_loop+0x424a>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd68(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	mov    %rax,(%rdx)
	mov    -0xd6c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xd58(%rbp)
	mov    -0xd58(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf3a(%rbp)
	movzbl -0xf3a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x431b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x437c>
	test   %eax,%eax
	je     <context_execute_loop+0x431b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x4337>
	jmp    <context_execute_loop+0x437c>
	movzbl -0xf3a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd54(%rbp)
	addl   $0x1,-0xd58(%rbp)
	jmp    <context_execute_loop+0x43a6>
	movzbl -0xf3a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd58(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd54(%rbp)
	addl   $0x2,-0xd58(%rbp)
	jmp    <context_execute_loop+0x43a6>
	movzbl -0xf3a(%rbp),%edx
	mov    0x868a1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x73b22(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xd58(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf39(%rbp)
	movzbl -0xf39(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x43ee>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x444f>
	test   %eax,%eax
	je     <context_execute_loop+0x43ee>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x440a>
	jmp    <context_execute_loop+0x444f>
	movzbl -0xf39(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd50(%rbp)
	addl   $0x1,-0xd58(%rbp)
	jmp    <context_execute_loop+0x4479>
	movzbl -0xf39(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd58(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd50(%rbp)
	addl   $0x2,-0xd58(%rbp)
	jmp    <context_execute_loop+0x4479>
	movzbl -0xf39(%rbp),%edx
	mov    0x867ce(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x73a4f(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rdi
	call   <context_avail_free_memory>
	mov    %rax,-0xd0(%rbp)
	mov    -0xd54(%rbp),%eax
	cmp    %rax,-0xd0(%rbp)
	jae    <context_execute_loop+0x450c>
	mov    -0xd50(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <context_clean_registers>
	mov    -0xd54(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x458f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xd54(%rbp),%eax
	shl    $0x6,%eax
	mov    %eax,%eax
	cmp    %rax,-0xd0(%rbp)
	jbe    <context_execute_loop+0x458f>
	mov    -0xd50(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <context_clean_registers>
	mov    -0xd54(%rbp),%eax
	shl    $0x5,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x458f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xd58(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xd4c(%rbp)
	mov    -0xd4c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf3b(%rbp)
	movzbl -0xf3b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x45f2>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x4653>
	test   %eax,%eax
	je     <context_execute_loop+0x45f2>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x460e>
	jmp    <context_execute_loop+0x4653>
	movzbl -0xf3b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd48(%rbp)
	addl   $0x1,-0xd4c(%rbp)
	jmp    <context_execute_loop+0x467d>
	movzbl -0xf3b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd4c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd48(%rbp)
	addl   $0x2,-0xd4c(%rbp)
	jmp    <context_execute_loop+0x467d>
	movzbl -0xf3b(%rbp),%edx
	mov    0x865ca(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7384b(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd48(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	lea    (%rdx,%rax,1),%rbx
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,(%rbx)
	mov    -0xd4c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xd44(%rbp)
	mov    -0xd44(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf3c(%rbp)
	movzbl -0xf3c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x470b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x476c>
	test   %eax,%eax
	je     <context_execute_loop+0x470b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x4727>
	jmp    <context_execute_loop+0x476c>
	movzbl -0xf3c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd40(%rbp)
	addl   $0x1,-0xd44(%rbp)
	jmp    <context_execute_loop+0x4796>
	movzbl -0xf3c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd44(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd40(%rbp)
	addl   $0x2,-0xd44(%rbp)
	jmp    <context_execute_loop+0x4796>
	movzbl -0xf3c(%rbp),%edx
	mov    0x864b1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x73732(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd40(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x110(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xd40(%rbp),%eax
	cltq   
	add    $0x1,%rax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	mov    -0xd44(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	cmp    $0xffffffffffffffff,%rax
	jne    <context_execute_loop+0x4822>
	mov    $0x0,%eax
	jmp    <context_execute_loop+0x3dd45>
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    0x68(%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	shr    $0x18,%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	shr    $0x2,%rax
	and    $0x3fffff,%eax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x1198(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0xa40(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0xa40(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0xd8(%rbp)
	cmpq   $0x0,-0xd8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x48f9>
	mov    -0x1198(%rbp),%rax
	mov    0x60(%rax),%rdx
	mov    -0xd8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <mailbox_send>
	mov    -0x1198(%rbp),%rax
	mov    0x60(%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x58(%rax)
	addl   $0x1,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x1198(%rbp),%rax
	mov    0x194(%rax),%eax
	and    $0x6,%eax
	test   %eax,%eax
	je     <context_execute_loop+0x493e>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rdi
	call   <scheduler_cancel_timeout>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_remove>
	mov    -0x1198(%rbp),%rax
	mov    0x140(%rax),%rax
	mov    %rax,-0x9c8(%rbp)
	mov    -0x9c8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x9c0(%rbp)
	jmp    <context_execute_loop+0x49b4>
	mov    -0x1198(%rbp),%rax
	lea    0x130(%rax),%rdx
	mov    -0x9c8(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_prepend>
	mov    -0x9c0(%rbp),%rax
	mov    %rax,-0x9c8(%rbp)
	mov    -0x9c8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x9c0(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x140,%rax
	cmp    %rax,-0x9c8(%rbp)
	jne    <context_execute_loop+0x4975>
	mov    -0x1198(%rbp),%rax
	add    $0x140,%rax
	mov    %rax,%rdi
	call   <list_init>
	addl   $0x1,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x1198(%rbp),%rax
	mov    0x194(%rax),%eax
	and    $0xfffffffb,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,0x194(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x140(%rax),%rax
	mov    %rax,-0x9b8(%rbp)
	mov    -0x9b8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x9b0(%rbp)
	jmp    <context_execute_loop+0x4a71>
	mov    -0x1198(%rbp),%rax
	lea    0x130(%rax),%rdx
	mov    -0x9b8(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_prepend>
	mov    -0x9b0(%rbp),%rax
	mov    %rax,-0x9b8(%rbp)
	mov    -0x9b8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x9b0(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x140,%rax
	cmp    %rax,-0x9b8(%rbp)
	jne    <context_execute_loop+0x4a32>
	mov    -0x1198(%rbp),%rax
	add    $0x140,%rax
	mov    %rax,%rdi
	call   <list_init>
	addl   $0x1,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xd3c(%rbp)
	mov    -0xd3c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf40(%rbp)
	movzbl -0xf40(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x4afa>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x4b5b>
	test   %eax,%eax
	je     <context_execute_loop+0x4afa>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x4b16>
	jmp    <context_execute_loop+0x4b5b>
	movzbl -0xf40(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd38(%rbp)
	addl   $0x1,-0xd3c(%rbp)
	jmp    <context_execute_loop+0x4b85>
	movzbl -0xf40(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd3c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd38(%rbp)
	addl   $0x2,-0xd3c(%rbp)
	jmp    <context_execute_loop+0x4b85>
	movzbl -0xf40(%rbp),%edx
	mov    0x860c2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x7330b(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xd3c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf3f(%rbp)
	movzbl -0xf3f(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xf3e(%rbp)
	movzbl -0xf3f(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xf3d(%rbp)
	movzbl -0xf3e(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x4c3d>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d705>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x4bec>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x4c13>
	jmp    <context_execute_loop+0x3d705>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf3d(%rbp),%eax
	mov    %eax,-0xd34(%rbp)
	addl   $0x1,-0xd3c(%rbp)
	jmp    <context_execute_loop+0x4cb0>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf3d(%rbp),%eax
	mov    %eax,-0xd34(%rbp)
	addl   $0x1,-0xd3c(%rbp)
	jmp    <context_execute_loop+0x4cb0>
	movzbl -0xf3f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xf3f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xd3c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd34(%rbp)
	addl   $0x2,-0xd3c(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x130,%rax
	mov    %rax,%rdi
	call   <list_is_empty>
	test   %eax,%eax
	je     <context_execute_loop+0x4cf8>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd38(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_peek>
	mov    %rax,-0xe0(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xd34(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0xe0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xd3c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa44(%rbp)
	mov    -0xa44(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf41(%rbp)
	movzbl -0xf41(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x4d94>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x4df5>
	test   %eax,%eax
	je     <context_execute_loop+0x4d94>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x4db0>
	jmp    <context_execute_loop+0x4df5>
	movzbl -0xf41(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd30(%rbp)
	addl   $0x1,-0xa44(%rbp)
	jmp    <context_execute_loop+0x4e1f>
	movzbl -0xf41(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa44(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd30(%rbp)
	addl   $0x2,-0xa44(%rbp)
	jmp    <context_execute_loop+0x4e1f>
	movzbl -0xf41(%rbp),%edx
	mov    0x85e28(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x73071(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	add    $0x130,%rax
	mov    %rax,%rdi
	call   <list_first>
	mov    %rax,-0xe8(%rbp)
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x1198(%rbp),%rax
	lea    0x140(%rax),%rdx
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_prepend>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd30(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xa48(%rbp)
	mov    -0xa48(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf42(%rbp)
	movzbl -0xf42(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x4eeb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x4f4c>
	test   %eax,%eax
	je     <context_execute_loop+0x4eeb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x4f07>
	jmp    <context_execute_loop+0x4f4c>
	movzbl -0xf42(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd2c(%rbp)
	addl   $0x1,-0xa48(%rbp)
	jmp    <context_execute_loop+0x4f76>
	movzbl -0xf42(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa48(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xd2c(%rbp)
	addl   $0x2,-0xa48(%rbp)
	jmp    <context_execute_loop+0x4f76>
	movzbl -0xf42(%rbp),%edx
	mov    0x85cd1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x72f1a(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd2c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_wait>
	mov    %rax,-0xf0(%rbp)
	mov    -0xf0(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0xf0(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf46(%rbp)
	movzbl -0xf46(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x50ae>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x5121>
	test   %eax,%eax
	je     <context_execute_loop+0x50ae>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x50d2>
	jmp    <context_execute_loop+0x5121>
	movzbl -0xf46(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd28(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x514b>
	movzbl -0xf46(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd28(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x514b>
	movzbl -0xf46(%rbp),%edx
	mov    0x85afc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x72d45(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf45(%rbp)
	movzbl -0xf45(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d70b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x7318f(%rip),%rax        # <_IO_stdin_used+0x778>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x73183(%rip),%rdx        # <_IO_stdin_used+0x778>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf45(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x51cb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x5239>
	test   %eax,%eax
	je     <context_execute_loop+0x51cb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x51f6>
	jmp    <context_execute_loop+0x5239>
	movzbl -0xf45(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5263>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5263>
	movzbl -0xf45(%rbp),%edx
	mov    0x859e4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x72cc5(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x5690>
	movzbl -0xf45(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5690>
	cmpb   $0x2,-0xf45(%rbp)
	jne    <context_execute_loop+0x52b1>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %eax,-0xd24(%rbp)
	jmp    <context_execute_loop+0x52d5>
	movzbl -0xf45(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5690>
	movzbl -0xf45(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5690>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf45(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5690>
	movzbl -0xf45(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf44(%rbp)
	movzbl -0xf44(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x53e7>
	movzbl -0xf44(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5476>
	movzbl -0xf44(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf43(%rbp)
	movzbl -0xf44(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf43(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe0c(%rbp)
	movzwl -0xe0c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xd24(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x54c2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x5690>
	movzbl -0xf45(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf45(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5690>
	movzbl -0xf45(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x5556>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x55ac>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf45(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5608>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %eax,-0xd24(%rbp)
	mov    -0xd24(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x5690>
	movzbl -0xf45(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf45(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %eax,-0xd24(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd28(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	movl   $0x0,-0xd20(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x194(%rax),%eax
	and    $0x6,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x5747>
	mov    -0xd24(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_to_int32>
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <scheduler_set_timeout>
	movl   $0x1,-0xd20(%rbp)
	jmp    <context_execute_loop+0x578a>
	mov    -0x1198(%rbp),%rax
	mov    0x194(%rax),%eax
	and    $0x2,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x5767>
	movl   $0x1,-0xd20(%rbp)
	jmp    <context_execute_loop+0x578a>
	mov    -0x1198(%rbp),%rax
	add    $0x140,%rax
	mov    %rax,%rdi
	call   <list_is_empty>
	test   %eax,%eax
	jne    <context_execute_loop+0x578a>
	movl   $0x1,-0xd20(%rbp)
	cmpl   $0x0,-0xd20(%rbp)
	je     <context_execute_loop+0x3d6cf>
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_wait>
	mov    %rax,-0xf8(%rbp)
	mov    -0xf8(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0xf8(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf4d(%rbp)
	movzbl -0xf4d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x587d>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x58f0>
	test   %eax,%eax
	je     <context_execute_loop+0x587d>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x58a1>
	jmp    <context_execute_loop+0x58f0>
	movzbl -0xf4d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd1c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x591a>
	movzbl -0xf4d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd1c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x591a>
	movzbl -0xf4d(%rbp),%edx
	mov    0x8532d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x72576(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf4c(%rbp)
	movzbl -0xf4c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d711>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x729f4(%rip),%rax        # <_IO_stdin_used+0x7ac>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x729e8(%rip),%rdx        # <_IO_stdin_used+0x7ac>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf4c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x599a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x5a0a>
	test   %eax,%eax
	je     <context_execute_loop+0x599a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x59c6>
	jmp    <context_execute_loop+0x5a0a>
	movzbl -0xf4c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5a34>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5a34>
	movzbl -0xf4c(%rbp),%edx
	mov    0x85213(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x724f4(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x5e6a>
	movzbl -0xf4c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5e6a>
	cmpb   $0x2,-0xf4c(%rbp)
	jne    <context_execute_loop+0x5a84>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x9a8(%rbp)
	jmp    <context_execute_loop+0x5aa9>
	movzbl -0xf4c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5e6a>
	movzbl -0xf4c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5e6a>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf4c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5e6a>
	movzbl -0xf4c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf4b(%rbp)
	movzbl -0xf4b(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x5bbe>
	movzbl -0xf4b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5c4e>
	movzbl -0xf4b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf4a(%rbp)
	movzbl -0xf4b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf4a(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe10(%rbp)
	movzwl -0xe10(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x9a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x5c99>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x5e6a>
	movzbl -0xf4c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf4c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5e6a>
	movzbl -0xf4c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x5d2e>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x5d85>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf4c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5de1>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x9a8(%rbp)
	mov    -0x9a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x5e6a>
	movzbl -0xf4c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf4c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf49(%rbp)
	movzbl -0xf49(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d717>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x724d8(%rip),%rax        # <_IO_stdin_used+0x7e0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x724cc(%rip),%rdx        # <_IO_stdin_used+0x7e0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf49(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x5eea>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x5f5a>
	test   %eax,%eax
	je     <context_execute_loop+0x5eea>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x5f16>
	jmp    <context_execute_loop+0x5f5a>
	movzbl -0xf49(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5f84>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x5f84>
	movzbl -0xf49(%rbp),%edx
	mov    0x84cc3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x71fa4(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x63ba>
	movzbl -0xf49(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x63ba>
	cmpb   $0x2,-0xf49(%rbp)
	jne    <context_execute_loop+0x5fd4>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x9a0(%rbp)
	jmp    <context_execute_loop+0x5ff9>
	movzbl -0xf49(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x63ba>
	movzbl -0xf49(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x63ba>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf49(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x63ba>
	movzbl -0xf49(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf48(%rbp)
	movzbl -0xf48(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x610e>
	movzbl -0xf48(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x619e>
	movzbl -0xf48(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf47(%rbp)
	movzbl -0xf48(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf47(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe0e(%rbp)
	movzwl -0xe0e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x9a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x61e9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x63ba>
	movzbl -0xf49(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf49(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x63ba>
	movzbl -0xf49(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x627e>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x62d5>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf49(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6331>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x9a0(%rbp)
	mov    -0x9a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x63ba>
	movzbl -0xf49(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf49(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x9a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rdx
	mov    -0x9a0(%rbp),%rcx
	mov    -0x9a8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	jns    <context_execute_loop+0x63ef>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd1c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf54(%rbp)
	movzbl -0xf54(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x6472>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x64e5>
	test   %eax,%eax
	je     <context_execute_loop+0x6472>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x6496>
	jmp    <context_execute_loop+0x64e5>
	movzbl -0xf54(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd18(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x650f>
	movzbl -0xf54(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd18(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x650f>
	movzbl -0xf54(%rbp),%edx
	mov    0x84738(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x71981(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf53(%rbp)
	movzbl -0xf53(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d71d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x71e67(%rip),%rax        # <_IO_stdin_used+0x814>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x71e5b(%rip),%rdx        # <_IO_stdin_used+0x814>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf53(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x658f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x65ff>
	test   %eax,%eax
	je     <context_execute_loop+0x658f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x65bb>
	jmp    <context_execute_loop+0x65ff>
	movzbl -0xf53(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6629>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6629>
	movzbl -0xf53(%rbp),%edx
	mov    0x8461e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x718ff(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x6a5f>
	movzbl -0xf53(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6a5f>
	cmpb   $0x2,-0xf53(%rbp)
	jne    <context_execute_loop+0x6679>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x998(%rbp)
	jmp    <context_execute_loop+0x669e>
	movzbl -0xf53(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6a5f>
	movzbl -0xf53(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6a5f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf53(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6a5f>
	movzbl -0xf53(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf52(%rbp)
	movzbl -0xf52(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x67b3>
	movzbl -0xf52(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6843>
	movzbl -0xf52(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf51(%rbp)
	movzbl -0xf52(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf51(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe14(%rbp)
	movzwl -0xe14(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x998(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x688e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x6a5f>
	movzbl -0xf53(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf53(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6a5f>
	movzbl -0xf53(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x6923>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x697a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf53(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x69d6>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x998(%rbp)
	mov    -0x998(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x6a5f>
	movzbl -0xf53(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf53(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x998(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf50(%rbp)
	movzbl -0xf50(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d723>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x7194b(%rip),%rax        # <_IO_stdin_used+0x848>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x7193f(%rip),%rdx        # <_IO_stdin_used+0x848>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf50(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x6adf>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x6b4f>
	test   %eax,%eax
	je     <context_execute_loop+0x6adf>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x6b0b>
	jmp    <context_execute_loop+0x6b4f>
	movzbl -0xf50(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6b79>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6b79>
	movzbl -0xf50(%rbp),%edx
	mov    0x840ce(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x713af(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x6faf>
	movzbl -0xf50(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6faf>
	cmpb   $0x2,-0xf50(%rbp)
	jne    <context_execute_loop+0x6bc9>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x990(%rbp)
	jmp    <context_execute_loop+0x6bee>
	movzbl -0xf50(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6faf>
	movzbl -0xf50(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6faf>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf50(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6faf>
	movzbl -0xf50(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf4f(%rbp)
	movzbl -0xf4f(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x6d03>
	movzbl -0xf4f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6d93>
	movzbl -0xf4f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf4e(%rbp)
	movzbl -0xf4f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf4e(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe12(%rbp)
	movzwl -0xe12(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x990(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x6dde>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x6faf>
	movzbl -0xf50(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf50(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6faf>
	movzbl -0xf50(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x6e73>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x6eca>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf50(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x6f26>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x990(%rbp)
	mov    -0x990(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x6faf>
	movzbl -0xf50(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf50(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x990(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rdx
	mov    -0x990(%rbp),%rcx
	mov    -0x998(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	js     <context_execute_loop+0x6fe4>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd18(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf5b(%rbp)
	movzbl -0xf5b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x7067>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x70da>
	test   %eax,%eax
	je     <context_execute_loop+0x7067>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x708b>
	jmp    <context_execute_loop+0x70da>
	movzbl -0xf5b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7104>
	movzbl -0xf5b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7104>
	movzbl -0xf5b(%rbp),%edx
	mov    0x83b43(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x70d8c(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf5a(%rbp)
	movzbl -0xf5a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d729>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x712da(%rip),%rax        # <_IO_stdin_used+0x87c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x712ce(%rip),%rdx        # <_IO_stdin_used+0x87c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf5a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x7184>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x71f4>
	test   %eax,%eax
	je     <context_execute_loop+0x7184>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x71b0>
	jmp    <context_execute_loop+0x71f4>
	movzbl -0xf5a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x721e>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x721e>
	movzbl -0xf5a(%rbp),%edx
	mov    0x83a29(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x70d0a(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x7654>
	movzbl -0xf5a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7654>
	cmpb   $0x2,-0xf5a(%rbp)
	jne    <context_execute_loop+0x726e>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x988(%rbp)
	jmp    <context_execute_loop+0x7293>
	movzbl -0xf5a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7654>
	movzbl -0xf5a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7654>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf5a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7654>
	movzbl -0xf5a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf59(%rbp)
	movzbl -0xf59(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x73a8>
	movzbl -0xf59(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7438>
	movzbl -0xf59(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf58(%rbp)
	movzbl -0xf59(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf58(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe18(%rbp)
	movzwl -0xe18(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x988(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x7483>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x7654>
	movzbl -0xf5a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf5a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7654>
	movzbl -0xf5a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x7518>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x756f>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf5a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x75cb>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x988(%rbp)
	mov    -0x988(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x7654>
	movzbl -0xf5a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf5a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x988(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf57(%rbp)
	movzbl -0xf57(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d72f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x70dbe(%rip),%rax        # <_IO_stdin_used+0x8b0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x70db2(%rip),%rdx        # <_IO_stdin_used+0x8b0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf57(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x76d4>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x7744>
	test   %eax,%eax
	je     <context_execute_loop+0x76d4>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x7700>
	jmp    <context_execute_loop+0x7744>
	movzbl -0xf57(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x776e>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x776e>
	movzbl -0xf57(%rbp),%edx
	mov    0x834d9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x707ba(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x7ba4>
	movzbl -0xf57(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7ba4>
	cmpb   $0x2,-0xf57(%rbp)
	jne    <context_execute_loop+0x77be>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x980(%rbp)
	jmp    <context_execute_loop+0x77e3>
	movzbl -0xf57(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7ba4>
	movzbl -0xf57(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7ba4>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf57(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7ba4>
	movzbl -0xf57(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf56(%rbp)
	movzbl -0xf56(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x78f8>
	movzbl -0xf56(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7988>
	movzbl -0xf56(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf55(%rbp)
	movzbl -0xf56(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf55(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe16(%rbp)
	movzwl -0xe16(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x980(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x79d3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x7ba4>
	movzbl -0xf57(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf57(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7ba4>
	movzbl -0xf57(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x7a68>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x7abf>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf57(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7b1b>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x980(%rbp)
	mov    -0x980(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x7ba4>
	movzbl -0xf57(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf57(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x980(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rdx
	mov    -0x980(%rbp),%rcx
	mov    -0x988(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	je     <context_execute_loop+0x7bd9>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf62(%rbp)
	movzbl -0xf62(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x7c5c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x7ccf>
	test   %eax,%eax
	je     <context_execute_loop+0x7c5c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x7c80>
	jmp    <context_execute_loop+0x7ccf>
	movzbl -0xf62(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd10(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7cf9>
	movzbl -0xf62(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd10(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7cf9>
	movzbl -0xf62(%rbp),%edx
	mov    0x82f4e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x70197(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf61(%rbp)
	movzbl -0xf61(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d735>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x7074d(%rip),%rax        # <_IO_stdin_used+0x8e4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x70741(%rip),%rdx        # <_IO_stdin_used+0x8e4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf61(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x7d79>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x7de9>
	test   %eax,%eax
	je     <context_execute_loop+0x7d79>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x7da5>
	jmp    <context_execute_loop+0x7de9>
	movzbl -0xf61(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7e13>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x7e13>
	movzbl -0xf61(%rbp),%edx
	mov    0x82e34(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x70115(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x8249>
	movzbl -0xf61(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8249>
	cmpb   $0x2,-0xf61(%rbp)
	jne    <context_execute_loop+0x7e63>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x978(%rbp)
	jmp    <context_execute_loop+0x7e88>
	movzbl -0xf61(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8249>
	movzbl -0xf61(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8249>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf61(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8249>
	movzbl -0xf61(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf60(%rbp)
	movzbl -0xf60(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x7f9d>
	movzbl -0xf60(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x802d>
	movzbl -0xf60(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf5f(%rbp)
	movzbl -0xf60(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf5f(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe1c(%rbp)
	movzwl -0xe1c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x978(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x8078>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x8249>
	movzbl -0xf61(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf61(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8249>
	movzbl -0xf61(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x810d>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x8164>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf61(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x81c0>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x978(%rbp)
	mov    -0x978(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x8249>
	movzbl -0xf61(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf61(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x978(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf5e(%rbp)
	movzbl -0xf5e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d73b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x70231(%rip),%rax        # <_IO_stdin_used+0x918>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x70225(%rip),%rdx        # <_IO_stdin_used+0x918>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf5e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x82c9>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x8339>
	test   %eax,%eax
	je     <context_execute_loop+0x82c9>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x82f5>
	jmp    <context_execute_loop+0x8339>
	movzbl -0xf5e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8363>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8363>
	movzbl -0xf5e(%rbp),%edx
	mov    0x828e4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6fbc5(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x8799>
	movzbl -0xf5e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8799>
	cmpb   $0x2,-0xf5e(%rbp)
	jne    <context_execute_loop+0x83b3>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x970(%rbp)
	jmp    <context_execute_loop+0x83d8>
	movzbl -0xf5e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8799>
	movzbl -0xf5e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8799>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf5e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8799>
	movzbl -0xf5e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf5d(%rbp)
	movzbl -0xf5d(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x84ed>
	movzbl -0xf5d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x857d>
	movzbl -0xf5d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf5c(%rbp)
	movzbl -0xf5d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf5c(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe1a(%rbp)
	movzwl -0xe1a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x970(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x85c8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x8799>
	movzbl -0xf5e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf5e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8799>
	movzbl -0xf5e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x865d>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x86b4>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf5e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8710>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x970(%rbp)
	mov    -0x970(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x8799>
	movzbl -0xf5e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf5e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x970(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rdx
	mov    -0x970(%rbp),%rcx
	mov    -0x978(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	jne    <context_execute_loop+0x87ce>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd10(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf69(%rbp)
	movzbl -0xf69(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x8851>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x88c4>
	test   %eax,%eax
	je     <context_execute_loop+0x8851>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x8875>
	jmp    <context_execute_loop+0x88c4>
	movzbl -0xf69(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd0c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x88ee>
	movzbl -0xf69(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd0c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x88ee>
	movzbl -0xf69(%rbp),%edx
	mov    0x82359(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6f5a2(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf68(%rbp)
	movzbl -0xf68(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d741>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6fbc0(%rip),%rax        # <_IO_stdin_used+0x94c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6fbb4(%rip),%rdx        # <_IO_stdin_used+0x94c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf68(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x896e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x89de>
	test   %eax,%eax
	je     <context_execute_loop+0x896e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x899a>
	jmp    <context_execute_loop+0x89de>
	movzbl -0xf68(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8a08>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8a08>
	movzbl -0xf68(%rbp),%edx
	mov    0x8223f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6f520(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x8e3e>
	movzbl -0xf68(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8e3e>
	cmpb   $0x2,-0xf68(%rbp)
	jne    <context_execute_loop+0x8a58>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x968(%rbp)
	jmp    <context_execute_loop+0x8a7d>
	movzbl -0xf68(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8e3e>
	movzbl -0xf68(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8e3e>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf68(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8e3e>
	movzbl -0xf68(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf67(%rbp)
	movzbl -0xf67(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x8b92>
	movzbl -0xf67(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8c22>
	movzbl -0xf67(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf66(%rbp)
	movzbl -0xf67(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf66(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe20(%rbp)
	movzwl -0xe20(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x968(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x8c6d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x8e3e>
	movzbl -0xf68(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf68(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8e3e>
	movzbl -0xf68(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x8d02>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x8d59>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf68(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8db5>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x968(%rbp)
	mov    -0x968(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x8e3e>
	movzbl -0xf68(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf68(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x968(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf65(%rbp)
	movzbl -0xf65(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d747>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6f6a4(%rip),%rax        # <_IO_stdin_used+0x980>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6f698(%rip),%rdx        # <_IO_stdin_used+0x980>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf65(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x8ebe>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x8f2e>
	test   %eax,%eax
	je     <context_execute_loop+0x8ebe>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x8eea>
	jmp    <context_execute_loop+0x8f2e>
	movzbl -0xf65(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8f58>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x8f58>
	movzbl -0xf65(%rbp),%edx
	mov    0x81cef(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6efd0(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x938e>
	movzbl -0xf65(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x938e>
	cmpb   $0x2,-0xf65(%rbp)
	jne    <context_execute_loop+0x8fa8>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x960(%rbp)
	jmp    <context_execute_loop+0x8fcd>
	movzbl -0xf65(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x938e>
	movzbl -0xf65(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x938e>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf65(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x938e>
	movzbl -0xf65(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf64(%rbp)
	movzbl -0xf64(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x90e2>
	movzbl -0xf64(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9172>
	movzbl -0xf64(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf63(%rbp)
	movzbl -0xf64(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf63(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe1e(%rbp)
	movzwl -0xe1e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x960(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x91bd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x938e>
	movzbl -0xf65(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf65(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x938e>
	movzbl -0xf65(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x9252>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x92a9>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf65(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9305>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x960(%rbp)
	mov    -0x960(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x938e>
	movzbl -0xf65(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf65(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x960(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rdx
	mov    -0x960(%rbp),%rcx
	mov    -0x968(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_exactly_equals>
	test   %eax,%eax
	je     <context_execute_loop+0x93c3>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd0c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf70(%rbp)
	movzbl -0xf70(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x9446>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x94b9>
	test   %eax,%eax
	je     <context_execute_loop+0x9446>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x946a>
	jmp    <context_execute_loop+0x94b9>
	movzbl -0xf70(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd08(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x94e3>
	movzbl -0xf70(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd08(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x94e3>
	movzbl -0xf70(%rbp),%edx
	mov    0x81764(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6e9ad(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf6f(%rbp)
	movzbl -0xf6f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d74d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6f033(%rip),%rax        # <_IO_stdin_used+0x9b4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6f027(%rip),%rdx        # <_IO_stdin_used+0x9b4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf6f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x9563>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x95d3>
	test   %eax,%eax
	je     <context_execute_loop+0x9563>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x958f>
	jmp    <context_execute_loop+0x95d3>
	movzbl -0xf6f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x95fd>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x95fd>
	movzbl -0xf6f(%rbp),%edx
	mov    0x8164a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6e92b(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x9a33>
	movzbl -0xf6f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9a33>
	cmpb   $0x2,-0xf6f(%rbp)
	jne    <context_execute_loop+0x964d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x958(%rbp)
	jmp    <context_execute_loop+0x9672>
	movzbl -0xf6f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9a33>
	movzbl -0xf6f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9a33>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf6f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9a33>
	movzbl -0xf6f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf6e(%rbp)
	movzbl -0xf6e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x9787>
	movzbl -0xf6e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9817>
	movzbl -0xf6e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf6d(%rbp)
	movzbl -0xf6e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf6d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe24(%rbp)
	movzwl -0xe24(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x958(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x9862>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x9a33>
	movzbl -0xf6f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf6f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9a33>
	movzbl -0xf6f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x98f7>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x994e>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf6f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x99aa>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x958(%rbp)
	mov    -0x958(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x9a33>
	movzbl -0xf6f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf6f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x958(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf6c(%rbp)
	movzbl -0xf6c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d753>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6eb17(%rip),%rax        # <_IO_stdin_used+0x9e8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6eb0b(%rip),%rdx        # <_IO_stdin_used+0x9e8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf6c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x9ab3>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x9b23>
	test   %eax,%eax
	je     <context_execute_loop+0x9ab3>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x9adf>
	jmp    <context_execute_loop+0x9b23>
	movzbl -0xf6c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9b4d>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9b4d>
	movzbl -0xf6c(%rbp),%edx
	mov    0x810fa(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6e3db(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x9f83>
	movzbl -0xf6c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9f83>
	cmpb   $0x2,-0xf6c(%rbp)
	jne    <context_execute_loop+0x9b9d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x950(%rbp)
	jmp    <context_execute_loop+0x9bc2>
	movzbl -0xf6c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9f83>
	movzbl -0xf6c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9f83>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf6c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9f83>
	movzbl -0xf6c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf6b(%rbp)
	movzbl -0xf6b(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x9cd7>
	movzbl -0xf6b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9d67>
	movzbl -0xf6b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf6a(%rbp)
	movzbl -0xf6b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf6a(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe22(%rbp)
	movzwl -0xe22(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x950(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x9db2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x9f83>
	movzbl -0xf6c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf6c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9f83>
	movzbl -0xf6c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x9e47>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x9e9e>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf6c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x9efa>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x950(%rbp)
	mov    -0x950(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x9f83>
	movzbl -0xf6c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf6c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x950(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rdx
	mov    -0x950(%rbp),%rcx
	mov    -0x958(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_exactly_equals>
	test   %eax,%eax
	jne    <context_execute_loop+0x9fb8>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd08(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf74(%rbp)
	movzbl -0xf74(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xa03b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xa0ae>
	test   %eax,%eax
	je     <context_execute_loop+0xa03b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xa05f>
	jmp    <context_execute_loop+0xa0ae>
	movzbl -0xf74(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd04(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa0d8>
	movzbl -0xf74(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd04(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa0d8>
	movzbl -0xf74(%rbp),%edx
	mov    0x80b6f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6ddb8(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf73(%rbp)
	movzbl -0xf73(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d759>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6e4a6(%rip),%rax        # <_IO_stdin_used+0xa1c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6e49a(%rip),%rdx        # <_IO_stdin_used+0xa1c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf73(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xa158>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xa1c8>
	test   %eax,%eax
	je     <context_execute_loop+0xa158>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xa184>
	jmp    <context_execute_loop+0xa1c8>
	movzbl -0xf73(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa1f2>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa1f2>
	movzbl -0xf73(%rbp),%edx
	mov    0x80a55(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6dd36(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xa628>
	movzbl -0xf73(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa628>
	cmpb   $0x2,-0xf73(%rbp)
	jne    <context_execute_loop+0xa242>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x948(%rbp)
	jmp    <context_execute_loop+0xa267>
	movzbl -0xf73(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa628>
	movzbl -0xf73(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa628>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf73(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa628>
	movzbl -0xf73(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf72(%rbp)
	movzbl -0xf72(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xa37c>
	movzbl -0xf72(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa40c>
	movzbl -0xf72(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf71(%rbp)
	movzbl -0xf72(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf71(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe26(%rbp)
	movzwl -0xe26(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x948(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xa457>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xa628>
	movzbl -0xf73(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf73(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa628>
	movzbl -0xf73(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xa4ec>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xa543>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf73(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa59f>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x948(%rbp)
	mov    -0x948(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xa628>
	movzbl -0xf73(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf73(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x948(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x948(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <context_execute_loop+0xa64c>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd04(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf78(%rbp)
	movzbl -0xf78(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xa6cf>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xa742>
	test   %eax,%eax
	je     <context_execute_loop+0xa6cf>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xa6f3>
	jmp    <context_execute_loop+0xa742>
	movzbl -0xf78(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xd00(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa76c>
	movzbl -0xf78(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xd00(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa76c>
	movzbl -0xf78(%rbp),%edx
	mov    0x804db(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6d724(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf77(%rbp)
	movzbl -0xf77(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d75f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6de46(%rip),%rax        # <_IO_stdin_used+0xa50>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6de3a(%rip),%rdx        # <_IO_stdin_used+0xa50>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf77(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xa7ec>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xa85c>
	test   %eax,%eax
	je     <context_execute_loop+0xa7ec>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xa818>
	jmp    <context_execute_loop+0xa85c>
	movzbl -0xf77(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa886>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xa886>
	movzbl -0xf77(%rbp),%edx
	mov    0x803c1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6d6a2(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xacbc>
	movzbl -0xf77(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xacbc>
	cmpb   $0x2,-0xf77(%rbp)
	jne    <context_execute_loop+0xa8d6>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x940(%rbp)
	jmp    <context_execute_loop+0xa8fb>
	movzbl -0xf77(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xacbc>
	movzbl -0xf77(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xacbc>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf77(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xacbc>
	movzbl -0xf77(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf76(%rbp)
	movzbl -0xf76(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xaa10>
	movzbl -0xf76(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xaaa0>
	movzbl -0xf76(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf75(%rbp)
	movzbl -0xf76(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf75(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe28(%rbp)
	movzwl -0xe28(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x940(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xaaeb>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xacbc>
	movzbl -0xf77(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf77(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xacbc>
	movzbl -0xf77(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xab80>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xabd7>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf77(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xac33>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x940(%rbp)
	mov    -0x940(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xacbc>
	movzbl -0xf77(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf77(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x940(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x940(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <context_execute_loop+0xace0>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xd00(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf7c(%rbp)
	movzbl -0xf7c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xad63>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xadd6>
	test   %eax,%eax
	je     <context_execute_loop+0xad63>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xad87>
	jmp    <context_execute_loop+0xadd6>
	movzbl -0xf7c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcfc(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xae00>
	movzbl -0xf7c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcfc(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xae00>
	movzbl -0xf7c(%rbp),%edx
	mov    0x7fe47(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6d090(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf7b(%rbp)
	movzbl -0xf7b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d765>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6d7e6(%rip),%rax        # <_IO_stdin_used+0xa84>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6d7da(%rip),%rdx        # <_IO_stdin_used+0xa84>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf7b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xae80>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xaef0>
	test   %eax,%eax
	je     <context_execute_loop+0xae80>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xaeac>
	jmp    <context_execute_loop+0xaef0>
	movzbl -0xf7b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xaf1a>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xaf1a>
	movzbl -0xf7b(%rbp),%edx
	mov    0x7fd2d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6d00e(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xb350>
	movzbl -0xf7b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb350>
	cmpb   $0x2,-0xf7b(%rbp)
	jne    <context_execute_loop+0xaf6a>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x938(%rbp)
	jmp    <context_execute_loop+0xaf8f>
	movzbl -0xf7b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb350>
	movzbl -0xf7b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb350>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf7b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb350>
	movzbl -0xf7b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf7a(%rbp)
	movzbl -0xf7a(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xb0a4>
	movzbl -0xf7a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb134>
	movzbl -0xf7a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf79(%rbp)
	movzbl -0xf7a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf79(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe2a(%rbp)
	movzwl -0xe2a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x938(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xb17f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xb350>
	movzbl -0xf7b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf7b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb350>
	movzbl -0xf7b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xb214>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xb26b>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf7b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb2c7>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x938(%rbp)
	mov    -0x938(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xb350>
	movzbl -0xf7b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf7b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x938(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x938(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_number>
	test   %eax,%eax
	je     <context_execute_loop+0xb374>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcfc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf94(%rbp)
	movzbl -0xf94(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xb3f7>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xb46a>
	test   %eax,%eax
	je     <context_execute_loop+0xb3f7>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xb41b>
	jmp    <context_execute_loop+0xb46a>
	movzbl -0xf94(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcf8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb494>
	movzbl -0xf94(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcf8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb494>
	movzbl -0xf94(%rbp),%edx
	mov    0x7f7b3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6c9fc(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf93(%rbp)
	movzbl -0xf93(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d76b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6d186(%rip),%rax        # <_IO_stdin_used+0xab8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6d17a(%rip),%rdx        # <_IO_stdin_used+0xab8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf93(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xb514>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xb584>
	test   %eax,%eax
	je     <context_execute_loop+0xb514>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xb540>
	jmp    <context_execute_loop+0xb584>
	movzbl -0xf93(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb5ae>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb5ae>
	movzbl -0xf93(%rbp),%edx
	mov    0x7f699(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6c97a(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xb9e4>
	movzbl -0xf93(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb9e4>
	cmpb   $0x2,-0xf93(%rbp)
	jne    <context_execute_loop+0xb5fe>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x930(%rbp)
	jmp    <context_execute_loop+0xb623>
	movzbl -0xf93(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb9e4>
	movzbl -0xf93(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb9e4>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf93(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb9e4>
	movzbl -0xf93(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf92(%rbp)
	movzbl -0xf92(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xb738>
	movzbl -0xf92(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb7c8>
	movzbl -0xf92(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf91(%rbp)
	movzbl -0xf92(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf91(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe36(%rbp)
	movzwl -0xe36(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x930(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xb813>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xb9e4>
	movzbl -0xf93(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf93(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb9e4>
	movzbl -0xf93(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xb8a8>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xb8ff>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf93(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xb95b>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x930(%rbp)
	mov    -0x930(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xb9e4>
	movzbl -0xf93(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf93(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x930(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x930(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <context_execute_loop+0xba08>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcf8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf98(%rbp)
	movzbl -0xf98(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xba8b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xbafe>
	test   %eax,%eax
	je     <context_execute_loop+0xba8b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xbaaf>
	jmp    <context_execute_loop+0xbafe>
	movzbl -0xf98(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcf4(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xbb28>
	movzbl -0xf98(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcf4(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xbb28>
	movzbl -0xf98(%rbp),%edx
	mov    0x7f11f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6c368(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf97(%rbp)
	movzbl -0xf97(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d771>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6cb26(%rip),%rax        # <_IO_stdin_used+0xaec>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6cb1a(%rip),%rdx        # <_IO_stdin_used+0xaec>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf97(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xbba8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xbc18>
	test   %eax,%eax
	je     <context_execute_loop+0xbba8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xbbd4>
	jmp    <context_execute_loop+0xbc18>
	movzbl -0xf97(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xbc42>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xbc42>
	movzbl -0xf97(%rbp),%edx
	mov    0x7f005(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6c2e6(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xc078>
	movzbl -0xf97(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc078>
	cmpb   $0x2,-0xf97(%rbp)
	jne    <context_execute_loop+0xbc92>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x928(%rbp)
	jmp    <context_execute_loop+0xbcb7>
	movzbl -0xf97(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc078>
	movzbl -0xf97(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc078>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf97(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc078>
	movzbl -0xf97(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf96(%rbp)
	movzbl -0xf96(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xbdcc>
	movzbl -0xf96(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xbe5c>
	movzbl -0xf96(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf95(%rbp)
	movzbl -0xf96(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf95(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe38(%rbp)
	movzwl -0xe38(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x928(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xbea7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xc078>
	movzbl -0xf97(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf97(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc078>
	movzbl -0xf97(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xbf3c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xbf93>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf97(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xbfef>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x928(%rbp)
	mov    -0x928(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xc078>
	movzbl -0xf97(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf97(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x928(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x928(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <context_execute_loop+0xc09c>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcf4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf9c(%rbp)
	movzbl -0xf9c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xc11f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xc192>
	test   %eax,%eax
	je     <context_execute_loop+0xc11f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xc143>
	jmp    <context_execute_loop+0xc192>
	movzbl -0xf9c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcf0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc1bc>
	movzbl -0xf9c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcf0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc1bc>
	movzbl -0xf9c(%rbp),%edx
	mov    0x7ea8b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6bcd4(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf9b(%rbp)
	movzbl -0xf9b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d777>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6c4c6(%rip),%rax        # <_IO_stdin_used+0xb20>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6c4ba(%rip),%rdx        # <_IO_stdin_used+0xb20>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf9b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xc23c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xc2ac>
	test   %eax,%eax
	je     <context_execute_loop+0xc23c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xc268>
	jmp    <context_execute_loop+0xc2ac>
	movzbl -0xf9b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc2d6>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc2d6>
	movzbl -0xf9b(%rbp),%edx
	mov    0x7e971(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6bc52(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xc70c>
	movzbl -0xf9b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc70c>
	cmpb   $0x2,-0xf9b(%rbp)
	jne    <context_execute_loop+0xc326>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x920(%rbp)
	jmp    <context_execute_loop+0xc34b>
	movzbl -0xf9b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc70c>
	movzbl -0xf9b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc70c>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf9b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc70c>
	movzbl -0xf9b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf9a(%rbp)
	movzbl -0xf9a(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xc460>
	movzbl -0xf9a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc4f0>
	movzbl -0xf9a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf99(%rbp)
	movzbl -0xf9a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf99(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe3a(%rbp)
	movzwl -0xe3a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x920(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xc53b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xc70c>
	movzbl -0xf9b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf9b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc70c>
	movzbl -0xf9b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xc5d0>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xc627>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf9b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc683>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x920(%rbp)
	mov    -0x920(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xc70c>
	movzbl -0xf9b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf9b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x920(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x920(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <context_execute_loop+0xc730>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcf0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf90(%rbp)
	movzbl -0xf90(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xc7b3>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xc826>
	test   %eax,%eax
	je     <context_execute_loop+0xc7b3>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xc7d7>
	jmp    <context_execute_loop+0xc826>
	movzbl -0xf90(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcec(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc850>
	movzbl -0xf90(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcec(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc850>
	movzbl -0xf90(%rbp),%edx
	mov    0x7e3f7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6b640(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf8f(%rbp)
	movzbl -0xf8f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d77d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6be66(%rip),%rax        # <_IO_stdin_used+0xb54>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6be5a(%rip),%rdx        # <_IO_stdin_used+0xb54>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf8f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xc8d0>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xc940>
	test   %eax,%eax
	je     <context_execute_loop+0xc8d0>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xc8fc>
	jmp    <context_execute_loop+0xc940>
	movzbl -0xf8f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc96a>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xc96a>
	movzbl -0xf8f(%rbp),%edx
	mov    0x7e2dd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6b5be(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xcda0>
	movzbl -0xf8f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcda0>
	cmpb   $0x2,-0xf8f(%rbp)
	jne    <context_execute_loop+0xc9ba>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x918(%rbp)
	jmp    <context_execute_loop+0xc9df>
	movzbl -0xf8f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcda0>
	movzbl -0xf8f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcda0>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf8f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcda0>
	movzbl -0xf8f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf8e(%rbp)
	movzbl -0xf8e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xcaf4>
	movzbl -0xf8e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcb84>
	movzbl -0xf8e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf8d(%rbp)
	movzbl -0xf8e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf8d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe34(%rbp)
	movzwl -0xe34(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x918(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xcbcf>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xcda0>
	movzbl -0xf8f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf8f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcda0>
	movzbl -0xf8f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xcc64>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xccbb>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf8f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcd17>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x918(%rbp)
	mov    -0x918(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xcda0>
	movzbl -0xf8f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf8f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x918(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x918(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <context_execute_loop+0xcdc4>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcec(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf80(%rbp)
	movzbl -0xf80(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xce47>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xceba>
	test   %eax,%eax
	je     <context_execute_loop+0xce47>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xce6b>
	jmp    <context_execute_loop+0xceba>
	movzbl -0xf80(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xce8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcee4>
	movzbl -0xf80(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xce8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcee4>
	movzbl -0xf80(%rbp),%edx
	mov    0x7dd63(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6afac(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf7f(%rbp)
	movzbl -0xf7f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d783>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6b806(%rip),%rax        # <_IO_stdin_used+0xb88>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6b7fa(%rip),%rdx        # <_IO_stdin_used+0xb88>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf7f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xcf64>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xcfd4>
	test   %eax,%eax
	je     <context_execute_loop+0xcf64>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xcf90>
	jmp    <context_execute_loop+0xcfd4>
	movzbl -0xf7f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcffe>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xcffe>
	movzbl -0xf7f(%rbp),%edx
	mov    0x7dc49(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6af2a(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xd434>
	movzbl -0xf7f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd434>
	cmpb   $0x2,-0xf7f(%rbp)
	jne    <context_execute_loop+0xd04e>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x910(%rbp)
	jmp    <context_execute_loop+0xd073>
	movzbl -0xf7f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd434>
	movzbl -0xf7f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd434>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf7f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd434>
	movzbl -0xf7f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf7e(%rbp)
	movzbl -0xf7e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xd188>
	movzbl -0xf7e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd218>
	movzbl -0xf7e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf7d(%rbp)
	movzbl -0xf7e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf7d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe2c(%rbp)
	movzwl -0xe2c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x910(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xd263>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xd434>
	movzbl -0xf7f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf7f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd434>
	movzbl -0xf7f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xd2f8>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xd34f>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf7f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd3ab>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x910(%rbp)
	mov    -0x910(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xd434>
	movzbl -0xf7f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf7f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x910(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x910(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <context_execute_loop+0xd458>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xce8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf84(%rbp)
	movzbl -0xf84(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xd4db>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xd54e>
	test   %eax,%eax
	je     <context_execute_loop+0xd4db>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xd4ff>
	jmp    <context_execute_loop+0xd54e>
	movzbl -0xf84(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xce4(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd578>
	movzbl -0xf84(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xce4(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd578>
	movzbl -0xf84(%rbp),%edx
	mov    0x7d6cf(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6a918(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf83(%rbp)
	movzbl -0xf83(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d789>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6b1a6(%rip),%rax        # <_IO_stdin_used+0xbbc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6b19a(%rip),%rdx        # <_IO_stdin_used+0xbbc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf83(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xd5f8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xd668>
	test   %eax,%eax
	je     <context_execute_loop+0xd5f8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xd624>
	jmp    <context_execute_loop+0xd668>
	movzbl -0xf83(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd692>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd692>
	movzbl -0xf83(%rbp),%edx
	mov    0x7d5b5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6a896(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xdac8>
	movzbl -0xf83(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdac8>
	cmpb   $0x2,-0xf83(%rbp)
	jne    <context_execute_loop+0xd6e2>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x908(%rbp)
	jmp    <context_execute_loop+0xd707>
	movzbl -0xf83(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdac8>
	movzbl -0xf83(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdac8>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf83(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdac8>
	movzbl -0xf83(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf82(%rbp)
	movzbl -0xf82(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xd81c>
	movzbl -0xf82(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xd8ac>
	movzbl -0xf82(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf81(%rbp)
	movzbl -0xf82(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf81(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe2e(%rbp)
	movzwl -0xe2e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x908(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xd8f7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xdac8>
	movzbl -0xf83(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf83(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdac8>
	movzbl -0xf83(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xd98c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xd9e3>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf83(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xda3f>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x908(%rbp)
	mov    -0x908(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xdac8>
	movzbl -0xf83(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf83(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x908(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x908(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <context_execute_loop+0xdaec>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xce4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf88(%rbp)
	movzbl -0xf88(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xdb6f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xdbe2>
	test   %eax,%eax
	je     <context_execute_loop+0xdb6f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xdb93>
	jmp    <context_execute_loop+0xdbe2>
	movzbl -0xf88(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xce0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdc0c>
	movzbl -0xf88(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xce0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdc0c>
	movzbl -0xf88(%rbp),%edx
	mov    0x7d03b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6a284(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf87(%rbp)
	movzbl -0xf87(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d78f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6ab46(%rip),%rax        # <_IO_stdin_used+0xbf0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6ab3a(%rip),%rdx        # <_IO_stdin_used+0xbf0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf87(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xdc8c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xdcfc>
	test   %eax,%eax
	je     <context_execute_loop+0xdc8c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xdcb8>
	jmp    <context_execute_loop+0xdcfc>
	movzbl -0xf87(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdd26>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdd26>
	movzbl -0xf87(%rbp),%edx
	mov    0x7cf21(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6a202(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xe15c>
	movzbl -0xf87(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe15c>
	cmpb   $0x2,-0xf87(%rbp)
	jne    <context_execute_loop+0xdd76>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x900(%rbp)
	jmp    <context_execute_loop+0xdd9b>
	movzbl -0xf87(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe15c>
	movzbl -0xf87(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe15c>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf87(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe15c>
	movzbl -0xf87(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf86(%rbp)
	movzbl -0xf86(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xdeb0>
	movzbl -0xf86(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xdf40>
	movzbl -0xf86(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf85(%rbp)
	movzbl -0xf86(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf85(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe30(%rbp)
	movzwl -0xe30(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x900(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xdf8b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xe15c>
	movzbl -0xf87(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf87(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe15c>
	movzbl -0xf87(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xe020>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xe077>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf87(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe0d3>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x900(%rbp)
	mov    -0x900(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xe15c>
	movzbl -0xf87(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf87(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x900(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x900(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	je     <context_execute_loop+0xe180>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xce0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf8c(%rbp)
	movzbl -0xf8c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xe203>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xe276>
	test   %eax,%eax
	je     <context_execute_loop+0xe203>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xe227>
	jmp    <context_execute_loop+0xe276>
	movzbl -0xf8c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcdc(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe2a0>
	movzbl -0xf8c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcdc(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe2a0>
	movzbl -0xf8c(%rbp),%edx
	mov    0x7c9a7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x69bf0(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf8b(%rbp)
	movzbl -0xf8b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d795>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6a4e6(%rip),%rax        # <_IO_stdin_used+0xc24>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6a4da(%rip),%rdx        # <_IO_stdin_used+0xc24>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf8b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xe320>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xe390>
	test   %eax,%eax
	je     <context_execute_loop+0xe320>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xe34c>
	jmp    <context_execute_loop+0xe390>
	movzbl -0xf8b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe3ba>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe3ba>
	movzbl -0xf8b(%rbp),%edx
	mov    0x7c88d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x69b6e(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xe7f0>
	movzbl -0xf8b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe7f0>
	cmpb   $0x2,-0xf8b(%rbp)
	jne    <context_execute_loop+0xe40a>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8f8(%rbp)
	jmp    <context_execute_loop+0xe42f>
	movzbl -0xf8b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe7f0>
	movzbl -0xf8b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe7f0>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf8b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe7f0>
	movzbl -0xf8b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf8a(%rbp)
	movzbl -0xf8a(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xe544>
	movzbl -0xf8a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe5d4>
	movzbl -0xf8a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf89(%rbp)
	movzbl -0xf8a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf89(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe32(%rbp)
	movzwl -0xe32(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xe61f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xe7f0>
	movzbl -0xf8b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf8b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe7f0>
	movzbl -0xf8b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xe6b4>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xe70b>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf8b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe767>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8f8(%rbp)
	mov    -0x8f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xe7f0>
	movzbl -0xf8b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf8b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <context_execute_loop+0xe894>
	mov    -0x8f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0xa4c(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0xa4c(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x100(%rbp)
	mov    -0x100(%rbp),%rax
	mov    %rax,%rdi
	call   <context_is_port_driver>
	test   %eax,%eax
	je     <context_execute_loop+0xe865>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcdc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcdc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa0(%rbp)
	movzbl -0xfa0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xe917>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xe98a>
	test   %eax,%eax
	je     <context_execute_loop+0xe917>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xe93b>
	jmp    <context_execute_loop+0xe98a>
	movzbl -0xfa0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcd8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe9b4>
	movzbl -0xfa0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcd8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xe9b4>
	movzbl -0xfa0(%rbp),%edx
	mov    0x7c293(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x694dc(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf9f(%rbp)
	movzbl -0xf9f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d79b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x69e06(%rip),%rax        # <_IO_stdin_used+0xc58>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x69dfa(%rip),%rdx        # <_IO_stdin_used+0xc58>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xf9f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xea34>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xeaa4>
	test   %eax,%eax
	je     <context_execute_loop+0xea34>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xea60>
	jmp    <context_execute_loop+0xeaa4>
	movzbl -0xf9f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xeace>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xeace>
	movzbl -0xf9f(%rbp),%edx
	mov    0x7c179(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6945a(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xef04>
	movzbl -0xf9f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xef04>
	cmpb   $0x2,-0xf9f(%rbp)
	jne    <context_execute_loop+0xeb1e>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8f0(%rbp)
	jmp    <context_execute_loop+0xeb43>
	movzbl -0xf9f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xef04>
	movzbl -0xf9f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xef04>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf9f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xef04>
	movzbl -0xf9f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf9e(%rbp)
	movzbl -0xf9e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xec58>
	movzbl -0xf9e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xece8>
	movzbl -0xf9e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xf9d(%rbp)
	movzbl -0xf9e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xf9d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe3c(%rbp)
	movzwl -0xe3c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xed33>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xef04>
	movzbl -0xf9f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xf9f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xef04>
	movzbl -0xf9f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xedc8>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xee1f>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xf9f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xee7b>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8f0(%rbp)
	mov    -0x8f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xef04>
	movzbl -0xf9f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xf9f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <context_execute_loop+0xef28>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcd8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa5(%rbp)
	movzbl -0xfa5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xefab>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xf01e>
	test   %eax,%eax
	je     <context_execute_loop+0xefab>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xefcf>
	jmp    <context_execute_loop+0xf01e>
	movzbl -0xfa5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcd4(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf048>
	movzbl -0xfa5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcd4(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf048>
	movzbl -0xfa5(%rbp),%edx
	mov    0x7bbff(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x68e48(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa4(%rbp)
	movzbl -0xfa4(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7a1>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x697a6(%rip),%rax        # <_IO_stdin_used+0xc8c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x6979a(%rip),%rdx        # <_IO_stdin_used+0xc8c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfa4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xf0c8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xf138>
	test   %eax,%eax
	je     <context_execute_loop+0xf0c8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xf0f4>
	jmp    <context_execute_loop+0xf138>
	movzbl -0xfa4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf162>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf162>
	movzbl -0xfa4(%rbp),%edx
	mov    0x7bae5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x68dc6(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xf598>
	movzbl -0xfa4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf598>
	cmpb   $0x2,-0xfa4(%rbp)
	jne    <context_execute_loop+0xf1b2>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8e8(%rbp)
	jmp    <context_execute_loop+0xf1d7>
	movzbl -0xfa4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf598>
	movzbl -0xfa4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf598>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfa4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf598>
	movzbl -0xfa4(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa3(%rbp)
	movzbl -0xfa3(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xf2ec>
	movzbl -0xfa3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf37c>
	movzbl -0xfa3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa2(%rbp)
	movzbl -0xfa3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfa2(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe3e(%rbp)
	movzwl -0xe3e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xf3c7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xf598>
	movzbl -0xfa4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfa4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf598>
	movzbl -0xfa4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xf45c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xf4b3>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfa4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf50f>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8e8(%rbp)
	mov    -0x8e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xf598>
	movzbl -0xfa4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfa4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa1(%rbp)
	movzbl -0xfa1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xf5e2>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xf655>
	test   %eax,%eax
	je     <context_execute_loop+0xf5e2>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xf606>
	jmp    <context_execute_loop+0xf655>
	movzbl -0xfa1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcd0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf67f>
	movzbl -0xfa1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcd0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf67f>
	movzbl -0xfa1(%rbp),%edx
	mov    0x7b5c8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x68849(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <context_execute_loop+0xf6b7>
	mov    -0x8e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    %eax,-0xcd0(%rbp)
	jne    <context_execute_loop+0xf6b7>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0xf6e2>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcd4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	nop
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfae(%rbp)
	movzbl -0xfae(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7a7>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x69131(%rip),%rax        # <_IO_stdin_used+0xcc0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x69125(%rip),%rdx        # <_IO_stdin_used+0xcc0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfae(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xf771>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xf7e1>
	test   %eax,%eax
	je     <context_execute_loop+0xf771>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xf79d>
	jmp    <context_execute_loop+0xf7e1>
	movzbl -0xfae(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf80b>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xf80b>
	movzbl -0xfae(%rbp),%edx
	mov    0x7b43c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6871d(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0xfc41>
	movzbl -0xfae(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfc41>
	cmpb   $0x2,-0xfae(%rbp)
	jne    <context_execute_loop+0xf85b>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8e0(%rbp)
	jmp    <context_execute_loop+0xf880>
	movzbl -0xfae(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfc41>
	movzbl -0xfae(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfc41>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfae(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfc41>
	movzbl -0xfae(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfad(%rbp)
	movzbl -0xfad(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0xf995>
	movzbl -0xfad(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfa25>
	movzbl -0xfad(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfac(%rbp)
	movzbl -0xfad(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfac(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe42(%rbp)
	movzwl -0xe42(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0xfa70>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xfc41>
	movzbl -0xfae(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfae(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfc41>
	movzbl -0xfae(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0xfb05>
	cmp    $0x18,%eax
	je     <context_execute_loop+0xfb5c>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfae(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfbb8>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8e0(%rbp)
	mov    -0x8e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0xfc41>
	movzbl -0xfae(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfae(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfab(%rbp)
	movzbl -0xfab(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xfc8b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xfcfe>
	test   %eax,%eax
	je     <context_execute_loop+0xfc8b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xfcaf>
	jmp    <context_execute_loop+0xfcfe>
	movzbl -0xfab(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xccc(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfd28>
	movzbl -0xfab(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xccc(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfd28>
	movzbl -0xfab(%rbp),%edx
	mov    0x7af1f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x68168(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfaa(%rbp)
	movzbl -0xfaa(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xfd81>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xfdf4>
	test   %eax,%eax
	je     <context_execute_loop+0xfd81>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xfda5>
	jmp    <context_execute_loop+0xfdf4>
	movzbl -0xfaa(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcc8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfe1e>
	movzbl -0xfaa(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcc8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xfe1e>
	movzbl -0xfaa(%rbp),%edx
	mov    0x7ae29(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x680aa(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movq   $0x0,-0x8d8(%rbp)
	movl   $0x0,-0xcc4(%rbp)
	jmp    <context_execute_loop+0x104b4>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa9(%rbp)
	movzbl -0xfa9(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7ad>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x68a1e(%rip),%rax        # <_IO_stdin_used+0xcf4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x68a12(%rip),%rdx        # <_IO_stdin_used+0xcf4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfa9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0xfeb8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0xff28>
	test   %eax,%eax
	je     <context_execute_loop+0xfeb8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0xfee4>
	jmp    <context_execute_loop+0xff28>
	movzbl -0xfa9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xff52>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0xff52>
	movzbl -0xfa9(%rbp),%edx
	mov    0x7acf5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x67fd6(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x10388>
	movzbl -0xfa9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10388>
	cmpb   $0x2,-0xfa9(%rbp)
	jne    <context_execute_loop+0xffa2>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8d0(%rbp)
	jmp    <context_execute_loop+0xffc7>
	movzbl -0xfa9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10388>
	movzbl -0xfa9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10388>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfa9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10388>
	movzbl -0xfa9(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa8(%rbp)
	movzbl -0xfa8(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x100dc>
	movzbl -0xfa8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1016c>
	movzbl -0xfa8(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa7(%rbp)
	movzbl -0xfa8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfa7(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe40(%rbp)
	movzwl -0xe40(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x101b7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x10388>
	movzbl -0xfa9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfa9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10388>
	movzbl -0xfa9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1024c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x102a3>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfa9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x102ff>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8d0(%rbp)
	mov    -0x8d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x10388>
	movzbl -0xfa9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfa9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfa6(%rbp)
	movzbl -0xfa6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x103d2>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x10445>
	test   %eax,%eax
	je     <context_execute_loop+0x103d2>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x103f6>
	jmp    <context_execute_loop+0x10445>
	movzbl -0xfa6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcc0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1046f>
	movzbl -0xfa6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcc0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1046f>
	movzbl -0xfa6(%rbp),%edx
	mov    0x7a7d8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x67a21(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	cmpq   $0x0,-0x8d8(%rbp)
	jne    <context_execute_loop+0x104ad>
	mov    -0x8e0(%rbp),%rax
	cmp    -0x8d0(%rbp),%rax
	jne    <context_execute_loop+0x104ad>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcc0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8d8(%rbp)
	addl   $0x1,-0xcc4(%rbp)
	mov    -0xcc8(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	cmp    %eax,-0xcc4(%rbp)
	jl     <context_execute_loop+0xfe38>
	cmpq   $0x0,-0x8d8(%rbp)
	jne    <context_execute_loop+0x10508>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xccc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x8d8(%rbp),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfb5(%rbp)
	movzbl -0xfb5(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7b3>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6835f(%rip),%rax        # <_IO_stdin_used+0xd28>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x68353(%rip),%rdx        # <_IO_stdin_used+0xd28>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfb5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x105ab>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1061b>
	test   %eax,%eax
	je     <context_execute_loop+0x105ab>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x105d7>
	jmp    <context_execute_loop+0x1061b>
	movzbl -0xfb5(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10645>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10645>
	movzbl -0xfb5(%rbp),%edx
	mov    0x7a602(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x678e3(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x10a7b>
	movzbl -0xfb5(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10a7b>
	cmpb   $0x2,-0xfb5(%rbp)
	jne    <context_execute_loop+0x10695>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8c8(%rbp)
	jmp    <context_execute_loop+0x106ba>
	movzbl -0xfb5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10a7b>
	movzbl -0xfb5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10a7b>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfb5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10a7b>
	movzbl -0xfb5(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfb4(%rbp)
	movzbl -0xfb4(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x107cf>
	movzbl -0xfb4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1085f>
	movzbl -0xfb4(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfb3(%rbp)
	movzbl -0xfb4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfb3(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe44(%rbp)
	movzwl -0xe44(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8c8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x108aa>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x10a7b>
	movzbl -0xfb5(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfb5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10a7b>
	movzbl -0xfb5(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1093f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x10996>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfb5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x109f2>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8c8(%rbp)
	mov    -0x8c8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x10a7b>
	movzbl -0xfb5(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfb5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfb2(%rbp)
	movzbl -0xfb2(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x10ac5>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x10b38>
	test   %eax,%eax
	je     <context_execute_loop+0x10ac5>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x10ae9>
	jmp    <context_execute_loop+0x10b38>
	movzbl -0xfb2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcbc(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10b62>
	movzbl -0xfb2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcbc(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10b62>
	movzbl -0xfb2(%rbp),%edx
	mov    0x7a0e5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6732e(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfb1(%rbp)
	movzbl -0xfb1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x10bbb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x10c2e>
	test   %eax,%eax
	je     <context_execute_loop+0x10bbb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x10bdf>
	jmp    <context_execute_loop+0x10c2e>
	movzbl -0xfb1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcb8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10c58>
	movzbl -0xfb1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcb8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10c58>
	movzbl -0xfb1(%rbp),%edx
	mov    0x79fef(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x67270(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movq   $0x0,-0x8c0(%rbp)
	mov    -0x8c8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x10ed3>
	mov    -0x8c8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0xa50(%rbp)
	movl   $0x0,-0xcb4(%rbp)
	jmp    <context_execute_loop+0x10eb8>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfb0(%rbp)
	movzbl -0xfb0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x10cf1>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x10d64>
	test   %eax,%eax
	je     <context_execute_loop+0x10cf1>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x10d15>
	jmp    <context_execute_loop+0x10d64>
	movzbl -0xfb0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcb0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10d8e>
	movzbl -0xfb0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcb0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10d8e>
	movzbl -0xfb0(%rbp),%edx
	mov    0x79eb9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6713a(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfaf(%rbp)
	movzbl -0xfaf(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x10dd8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x10e4b>
	test   %eax,%eax
	je     <context_execute_loop+0x10dd8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x10dfc>
	jmp    <context_execute_loop+0x10e4b>
	movzbl -0xfaf(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xcac(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10e75>
	movzbl -0xfaf(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xcac(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x10e75>
	movzbl -0xfaf(%rbp),%edx
	mov    0x79dd2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6701b(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	cmpq   $0x0,-0x8c0(%rbp)
	jne    <context_execute_loop+0x10eb1>
	mov    -0xa50(%rbp),%eax
	cmp    -0xcb0(%rbp),%eax
	jne    <context_execute_loop+0x10eb1>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcac(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8c0(%rbp)
	addl   $0x1,-0xcb4(%rbp)
	mov    -0xcb8(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	cmp    %eax,-0xcb4(%rbp)
	jl     <context_execute_loop+0x10ca7>
	cmpq   $0x0,-0x8c0(%rbp)
	jne    <context_execute_loop+0x10f0c>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xcbc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x8c0(%rbp),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa54(%rbp)
	mov    -0xa54(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfb6(%rbp)
	movzbl -0xfb6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x10f77>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x10fd8>
	test   %eax,%eax
	je     <context_execute_loop+0x10f77>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x10f93>
	jmp    <context_execute_loop+0x10fd8>
	movzbl -0xfb6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xca8(%rbp)
	addl   $0x1,-0xa54(%rbp)
	jmp    <context_execute_loop+0x11002>
	movzbl -0xfb6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa54(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xca8(%rbp)
	addl   $0x2,-0xa54(%rbp)
	jmp    <context_execute_loop+0x11002>
	movzbl -0xfb6(%rbp),%edx
	mov    0x79c45(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x66e8e(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1104a>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xca8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xca8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x108(%rbp)
	mov    -0x108(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x108(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfc3(%rbp)
	movzbl -0xfc3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7b9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6777c(%rip),%rax        # <_IO_stdin_used+0xd5c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x67770(%rip),%rdx        # <_IO_stdin_used+0xd5c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfc3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x111c2>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x11232>
	test   %eax,%eax
	je     <context_execute_loop+0x111c2>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x111ee>
	jmp    <context_execute_loop+0x11232>
	movzbl -0xfc3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1125c>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1125c>
	movzbl -0xfc3(%rbp),%edx
	mov    0x799eb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x66ccc(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x11692>
	movzbl -0xfc3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x11692>
	cmpb   $0x2,-0xfc3(%rbp)
	jne    <context_execute_loop+0x112ac>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8b8(%rbp)
	jmp    <context_execute_loop+0x112d1>
	movzbl -0xfc3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x11692>
	movzbl -0xfc3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x11692>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfc3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x11692>
	movzbl -0xfc3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfc2(%rbp)
	movzbl -0xfc2(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x113e6>
	movzbl -0xfc2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x11476>
	movzbl -0xfc2(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfc1(%rbp)
	movzbl -0xfc2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfc1(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe46(%rbp)
	movzwl -0xe46(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x8b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x114c1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x11692>
	movzbl -0xfc3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfc3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x11692>
	movzbl -0xfc3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x11556>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x115ad>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfc3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x11609>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8b8(%rbp)
	mov    -0x8b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x11692>
	movzbl -0xfc3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfc3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8b8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfc0(%rbp)
	movzbl -0xfc0(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xfbf(%rbp)
	movzbl -0xfc0(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xfbe(%rbp)
	movzbl -0xfbf(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x1175c>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d7bf>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x116fb>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x1172a>
	jmp    <context_execute_loop+0x3d7bf>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfbe(%rbp),%eax
	mov    %eax,-0xca4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x117d9>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfbe(%rbp),%eax
	mov    %eax,-0xca4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x117d9>
	movzbl -0xfc0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfc0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xca4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xca4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x8b8(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfcc(%rbp)
	movzbl -0xfcc(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7c5>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x670db(%rip),%rax        # <_IO_stdin_used+0xd90>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x670cf(%rip),%rdx        # <_IO_stdin_used+0xd90>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfcc(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x11897>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x11907>
	test   %eax,%eax
	je     <context_execute_loop+0x11897>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x118c3>
	jmp    <context_execute_loop+0x11907>
	movzbl -0xfcc(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11931>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11931>
	movzbl -0xfcc(%rbp),%edx
	mov    0x79316(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x665f7(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x11d67>
	movzbl -0xfcc(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11d67>
	cmpb   $0x2,-0xfcc(%rbp)
	jne    <context_execute_loop+0x11981>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8b0(%rbp)
	jmp    <context_execute_loop+0x119a6>
	movzbl -0xfcc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11d67>
	movzbl -0xfcc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11d67>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfcc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11d67>
	movzbl -0xfcc(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfcb(%rbp)
	movzbl -0xfcb(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x11abb>
	movzbl -0xfcb(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11b4b>
	movzbl -0xfcb(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfca(%rbp)
	movzbl -0xfcb(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfca(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe48(%rbp)
	movzwl -0xe48(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x8b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x11b96>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x11d67>
	movzbl -0xfcc(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfcc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11d67>
	movzbl -0xfcc(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x11c2b>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x11c82>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfcc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11cde>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8b0(%rbp)
	mov    -0x8b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x11d67>
	movzbl -0xfcc(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfcc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfc9(%rbp)
	movzbl -0xfc9(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xfc8(%rbp)
	movzbl -0xfc9(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xfc7(%rbp)
	movzbl -0xfc8(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x11e31>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d7cb>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x11dd0>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x11dff>
	jmp    <context_execute_loop+0x3d7cb>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0xfc7(%rbp),%eax
	mov    %eax,-0xca0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11eae>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0xfc7(%rbp),%eax
	mov    %eax,-0xca0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11eae>
	movzbl -0xfc9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0xfc9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xca0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfc6(%rbp)
	movzbl -0xfc6(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xfc5(%rbp)
	movzbl -0xfc6(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xfc4(%rbp)
	movzbl -0xfc5(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x11f78>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d7d1>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x11f17>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x11f46>
	jmp    <context_execute_loop+0x3d7d1>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfc4(%rbp),%eax
	mov    %eax,-0xc9c(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11ff5>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfc4(%rbp),%eax
	mov    %eax,-0xc9c(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x11ff5>
	movzbl -0xfc6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfc6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc9c(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x8b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x138(%rbp)
	mov    -0x8b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x130(%rbp)
	mov    -0xa08(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xca0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x138(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc9c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x130(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xe00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd3(%rbp)
	movzbl -0xfd3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7d7>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x668a4(%rip),%rax        # <_IO_stdin_used+0xdc4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x66898(%rip),%rdx        # <_IO_stdin_used+0xdc4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfd3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x12102>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x12172>
	test   %eax,%eax
	je     <context_execute_loop+0x12102>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1212e>
	jmp    <context_execute_loop+0x12172>
	movzbl -0xfd3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1219c>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1219c>
	movzbl -0xfd3(%rbp),%edx
	mov    0x78aab(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x65d8c(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x125d2>
	movzbl -0xfd3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x125d2>
	cmpb   $0x2,-0xfd3(%rbp)
	jne    <context_execute_loop+0x121ec>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8a8(%rbp)
	jmp    <context_execute_loop+0x12211>
	movzbl -0xfd3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x125d2>
	movzbl -0xfd3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x125d2>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfd3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x125d2>
	movzbl -0xfd3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd2(%rbp)
	movzbl -0xfd2(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x12326>
	movzbl -0xfd2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x123b6>
	movzbl -0xfd2(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd1(%rbp)
	movzbl -0xfd2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfd1(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe4a(%rbp)
	movzwl -0xe4a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x8a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x12401>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x125d2>
	movzbl -0xfd3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfd3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x125d2>
	movzbl -0xfd3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x12496>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x124ed>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfd3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x12549>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8a8(%rbp)
	mov    -0x8a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x125d2>
	movzbl -0xfd3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfd3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8a8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd0(%rbp)
	movzbl -0xfd0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1261c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1268f>
	test   %eax,%eax
	je     <context_execute_loop+0x1261c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x12640>
	jmp    <context_execute_loop+0x1268f>
	movzbl -0xfd0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc98(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x126b9>
	movzbl -0xfd0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc98(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x126b9>
	movzbl -0xfd0(%rbp),%edx
	mov    0x7858e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6580f(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfcf(%rbp)
	movzbl -0xfcf(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xfce(%rbp)
	movzbl -0xfcf(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xfcd(%rbp)
	movzbl -0xfce(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x12783>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d7dd>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x12722>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x12751>
	jmp    <context_execute_loop+0x3d7dd>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfcd(%rbp),%eax
	mov    %eax,-0xc94(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x12800>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfcd(%rbp),%eax
	mov    %eax,-0xc94(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x12800>
	movzbl -0xfcf(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfcf(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc94(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x8a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x1282d>
	mov    -0xc98(%rbp),%eax
	shr    $0x1f,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x12834>
	mov    $0x1,%eax
	jmp    <context_execute_loop+0x12839>
	mov    $0x0,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1285d>
	mov    -0x8a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    %eax,-0xc98(%rbp)
	setge  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x12862>
	call   <abort@plt>
	mov    -0xc98(%rbp),%edx
	mov    -0x8a8(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x140(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc94(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x140(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfda(%rbp)
	movzbl -0xfda(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7e3>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6609c(%rip),%rax        # <_IO_stdin_used+0xdf8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x66090(%rip),%rdx        # <_IO_stdin_used+0xdf8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfda(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1293e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x129ae>
	test   %eax,%eax
	je     <context_execute_loop+0x1293e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1296a>
	jmp    <context_execute_loop+0x129ae>
	movzbl -0xfda(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x129d8>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x129d8>
	movzbl -0xfda(%rbp),%edx
	mov    0x7826f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x65550(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x12e0e>
	movzbl -0xfda(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12e0e>
	cmpb   $0x2,-0xfda(%rbp)
	jne    <context_execute_loop+0x12a28>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x8a0(%rbp)
	jmp    <context_execute_loop+0x12a4d>
	movzbl -0xfda(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12e0e>
	movzbl -0xfda(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12e0e>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfda(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12e0e>
	movzbl -0xfda(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd9(%rbp)
	movzbl -0xfd9(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x12b62>
	movzbl -0xfd9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12bf2>
	movzbl -0xfd9(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd8(%rbp)
	movzbl -0xfd9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfd8(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe4e(%rbp)
	movzwl -0xe4e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x8a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x12c3d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x12e0e>
	movzbl -0xfda(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfda(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12e0e>
	movzbl -0xfda(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x12cd2>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x12d29>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfda(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12d85>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x8a0(%rbp)
	mov    -0x8a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x12e0e>
	movzbl -0xfda(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfda(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x8a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd7(%rbp)
	movzbl -0xfd7(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7e9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x65b80(%rip),%rax        # <_IO_stdin_used+0xe2c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x65b74(%rip),%rdx        # <_IO_stdin_used+0xe2c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfd7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x12e8e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x12efe>
	test   %eax,%eax
	je     <context_execute_loop+0x12e8e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x12eba>
	jmp    <context_execute_loop+0x12efe>
	movzbl -0xfd7(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12f28>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x12f28>
	movzbl -0xfd7(%rbp),%edx
	mov    0x77d1f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x65000(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1335e>
	movzbl -0xfd7(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1335e>
	cmpb   $0x2,-0xfd7(%rbp)
	jne    <context_execute_loop+0x12f78>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x898(%rbp)
	jmp    <context_execute_loop+0x12f9d>
	movzbl -0xfd7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1335e>
	movzbl -0xfd7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1335e>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfd7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1335e>
	movzbl -0xfd7(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd6(%rbp)
	movzbl -0xfd6(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x130b2>
	movzbl -0xfd6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x13142>
	movzbl -0xfd6(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd5(%rbp)
	movzbl -0xfd6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfd5(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe4c(%rbp)
	movzwl -0xe4c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x898(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1318d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1335e>
	movzbl -0xfd7(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfd7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1335e>
	movzbl -0xfd7(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x13222>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x13279>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfd7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x132d5>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x898(%rbp)
	mov    -0x898(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1335e>
	movzbl -0xfd7(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfd7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x898(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfd4(%rbp)
	movzbl -0xfd4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x133a8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1341b>
	test   %eax,%eax
	je     <context_execute_loop+0x133a8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x133cc>
	jmp    <context_execute_loop+0x1341b>
	movzbl -0xfd4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc90(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x13445>
	movzbl -0xfd4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc90(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x13445>
	movzbl -0xfd4(%rbp),%edx
	mov    0x77802(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x64a83(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x898(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x13472>
	mov    -0xc90(%rbp),%eax
	shr    $0x1f,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x13479>
	mov    $0x1,%eax
	jmp    <context_execute_loop+0x1347e>
	mov    $0x0,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x134a2>
	mov    -0x898(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    %eax,-0xc90(%rbp)
	setge  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x134a7>
	call   <abort@plt>
	mov    -0xc90(%rbp),%ecx
	mov    -0x8a0(%rbp),%rdx
	mov    -0x898(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfe3(%rbp)
	movzbl -0xfe3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7ef>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x654e2(%rip),%rax        # <_IO_stdin_used+0xe60>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x654d6(%rip),%rdx        # <_IO_stdin_used+0xe60>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfe3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x13560>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x135d0>
	test   %eax,%eax
	je     <context_execute_loop+0x13560>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1358c>
	jmp    <context_execute_loop+0x135d0>
	movzbl -0xfe3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x135fa>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x135fa>
	movzbl -0xfe3(%rbp),%edx
	mov    0x7764d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6492e(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x13a30>
	movzbl -0xfe3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13a30>
	cmpb   $0x2,-0xfe3(%rbp)
	jne    <context_execute_loop+0x1364a>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x890(%rbp)
	jmp    <context_execute_loop+0x1366f>
	movzbl -0xfe3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13a30>
	movzbl -0xfe3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13a30>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfe3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13a30>
	movzbl -0xfe3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfe2(%rbp)
	movzbl -0xfe2(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x13784>
	movzbl -0xfe2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13814>
	movzbl -0xfe2(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfe1(%rbp)
	movzbl -0xfe2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfe1(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe52(%rbp)
	movzwl -0xe52(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x890(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1385f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x13a30>
	movzbl -0xfe3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfe3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13a30>
	movzbl -0xfe3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x138f4>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1394b>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfe3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x139a7>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x890(%rbp)
	mov    -0x890(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x13a30>
	movzbl -0xfe3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfe3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x890(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfe0(%rbp)
	movzbl -0xfe0(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d7f5>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x64fc6(%rip),%rax        # <_IO_stdin_used+0xe94>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x64fba(%rip),%rdx        # <_IO_stdin_used+0xe94>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfe0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x13ab0>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x13b20>
	test   %eax,%eax
	je     <context_execute_loop+0x13ab0>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x13adc>
	jmp    <context_execute_loop+0x13b20>
	movzbl -0xfe0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13b4a>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13b4a>
	movzbl -0xfe0(%rbp),%edx
	mov    0x770fd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x643de(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x13f80>
	movzbl -0xfe0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13f80>
	cmpb   $0x2,-0xfe0(%rbp)
	jne    <context_execute_loop+0x13b9a>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x888(%rbp)
	jmp    <context_execute_loop+0x13bbf>
	movzbl -0xfe0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13f80>
	movzbl -0xfe0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13f80>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfe0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13f80>
	movzbl -0xfe0(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfdf(%rbp)
	movzbl -0xfdf(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x13cd4>
	movzbl -0xfdf(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13d64>
	movzbl -0xfdf(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfde(%rbp)
	movzbl -0xfdf(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfde(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe50(%rbp)
	movzwl -0xe50(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x888(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x13daf>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x13f80>
	movzbl -0xfe0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfe0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13f80>
	movzbl -0xfe0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x13e44>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x13e9b>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfe0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x13ef7>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x888(%rbp)
	mov    -0x888(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x13f80>
	movzbl -0xfe0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfe0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x888(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfdd(%rbp)
	movzbl -0xfdd(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xfdc(%rbp)
	movzbl -0xfdd(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xfdb(%rbp)
	movzbl -0xfdc(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x1404a>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d7fb>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x13fe9>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x14018>
	jmp    <context_execute_loop+0x3d7fb>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfdb(%rbp),%eax
	mov    %eax,-0xc8c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x140c7>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfdb(%rbp),%eax
	mov    %eax,-0xc8c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x140c7>
	movzbl -0xfdd(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfdd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc8c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_alloc>
	mov    %rax,-0x150(%rbp)
	mov    -0x888(%rbp),%rdx
	mov    -0x890(%rbp),%rcx
	mov    -0x150(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_list_init_prepend>
	mov    %rax,-0x148(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc8c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x148(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfea(%rbp)
	movzbl -0xfea(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1418c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x141ff>
	test   %eax,%eax
	je     <context_execute_loop+0x1418c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x141b0>
	jmp    <context_execute_loop+0x141ff>
	movzbl -0xfea(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc88(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14229>
	movzbl -0xfea(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc88(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14229>
	movzbl -0xfea(%rbp),%edx
	mov    0x76a1e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x63c9f(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfe9(%rbp)
	movzbl -0xfe9(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xfe8(%rbp)
	movzbl -0xfe9(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xfe7(%rbp)
	movzbl -0xfe8(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x142f3>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d801>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x14292>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x142c1>
	jmp    <context_execute_loop+0x3d801>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfe7(%rbp),%eax
	mov    %eax,-0xc84(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14370>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfe7(%rbp),%eax
	mov    %eax,-0xc84(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14370>
	movzbl -0xfe9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfe9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc84(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xc88(%rbp),%eax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x158(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc84(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x158(%rbp),%rax
	mov    %rax,(%rdx)
	movl   $0x0,-0xc80(%rbp)
	jmp    <context_execute_loop+0x149ac>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	cmp    $0x47,%al
	je     <context_execute_loop+0x14428>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%edx
	mov    0x7681f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x63b5b(%rip),%rcx        # <_IO_stdin_used+0x3c3>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfe6(%rbp)
	movzbl -0xfe6(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d807>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x645f3(%rip),%rax        # <_IO_stdin_used+0xec8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x645e7(%rip),%rdx        # <_IO_stdin_used+0xec8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfe6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x144b7>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x14527>
	test   %eax,%eax
	je     <context_execute_loop+0x144b7>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x144e3>
	jmp    <context_execute_loop+0x14527>
	movzbl -0xfe6(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14551>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14551>
	movzbl -0xfe6(%rbp),%edx
	mov    0x766f6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x639d7(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x14987>
	movzbl -0xfe6(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14987>
	cmpb   $0x2,-0xfe6(%rbp)
	jne    <context_execute_loop+0x145a1>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x880(%rbp)
	jmp    <context_execute_loop+0x145c6>
	movzbl -0xfe6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14987>
	movzbl -0xfe6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14987>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfe6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14987>
	movzbl -0xfe6(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfe5(%rbp)
	movzbl -0xfe5(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x146db>
	movzbl -0xfe5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1476b>
	movzbl -0xfe5(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfe4(%rbp)
	movzbl -0xfe5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfe4(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe54(%rbp)
	movzwl -0xe54(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x880(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x147b6>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x14987>
	movzbl -0xfe6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfe6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x14987>
	movzbl -0xfe6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1484b>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x148a2>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfe6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x148fe>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x880(%rbp)
	mov    -0x880(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x14987>
	movzbl -0xfe6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfe6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x880(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xc80(%rbp),%ecx
	mov    -0x880(%rbp),%rdx
	mov    -0x158(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	addl   $0x1,-0xc80(%rbp)
	mov    -0xc80(%rbp),%eax
	cmp    -0xc88(%rbp),%eax
	jl     <context_execute_loop+0x143c0>
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x1198(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x14a1f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfed(%rbp)
	movzbl -0xfed(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d80d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x64035(%rip),%rax        # <_IO_stdin_used+0xefc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x64029(%rip),%rdx        # <_IO_stdin_used+0xefc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xfed(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x14aa9>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x14b19>
	test   %eax,%eax
	je     <context_execute_loop+0x14aa9>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x14ad5>
	jmp    <context_execute_loop+0x14b19>
	movzbl -0xfed(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14b43>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14b43>
	movzbl -0xfed(%rbp),%edx
	mov    0x76104(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x633e5(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x14f79>
	movzbl -0xfed(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14f79>
	cmpb   $0x2,-0xfed(%rbp)
	jne    <context_execute_loop+0x14b93>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x878(%rbp)
	jmp    <context_execute_loop+0x14bb8>
	movzbl -0xfed(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14f79>
	movzbl -0xfed(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14f79>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfed(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14f79>
	movzbl -0xfed(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfec(%rbp)
	movzbl -0xfec(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x14ccd>
	movzbl -0xfec(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14d5d>
	movzbl -0xfec(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfeb(%rbp)
	movzbl -0xfec(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfeb(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe56(%rbp)
	movzwl -0xe56(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x878(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x14da8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x14f79>
	movzbl -0xfed(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xfed(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14f79>
	movzbl -0xfed(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x14e3d>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x14e94>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xfed(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x14ef0>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x878(%rbp)
	mov    -0x878(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x14f79>
	movzbl -0xfed(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xfed(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x878(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x160(%rbp)
	mov    -0x160(%rbp),%rax
	mov    $0x7cb,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x878(%rbp),%rdx
	mov    -0x160(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	mov    -0x160(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x84b,0x60(%rax)
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x84b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x15091>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff0(%rbp)
	movzbl -0xff0(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d813>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x639f7(%rip),%rax        # <_IO_stdin_used+0xf30>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x639eb(%rip),%rdx        # <_IO_stdin_used+0xf30>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xff0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1511b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1518b>
	test   %eax,%eax
	je     <context_execute_loop+0x1511b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x15147>
	jmp    <context_execute_loop+0x1518b>
	movzbl -0xff0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x151b5>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x151b5>
	movzbl -0xff0(%rbp),%edx
	mov    0x75a92(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x62d73(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x155eb>
	movzbl -0xff0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x155eb>
	cmpb   $0x2,-0xff0(%rbp)
	jne    <context_execute_loop+0x15205>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x870(%rbp)
	jmp    <context_execute_loop+0x1522a>
	movzbl -0xff0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x155eb>
	movzbl -0xff0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x155eb>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xff0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x155eb>
	movzbl -0xff0(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfef(%rbp)
	movzbl -0xfef(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1533f>
	movzbl -0xfef(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x153cf>
	movzbl -0xfef(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfee(%rbp)
	movzbl -0xfef(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xfee(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe58(%rbp)
	movzwl -0xe58(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x870(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1541a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x155eb>
	movzbl -0xff0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xff0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x155eb>
	movzbl -0xff0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x154af>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x15506>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xff0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x15562>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x870(%rbp)
	mov    -0x870(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x155eb>
	movzbl -0xff0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xff0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x870(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x168(%rbp)
	mov    -0x168(%rbp),%rax
	mov    $0x80b,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x870(%rbp),%rdx
	mov    -0x168(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	mov    -0x168(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x1,-0xc7c(%rbp)
	mov    -0xc7c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff1(%rbp)
	movzbl -0xff1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x156b8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x15719>
	test   %eax,%eax
	je     <context_execute_loop+0x156b8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x156d4>
	jmp    <context_execute_loop+0x15719>
	movzbl -0xff1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc78(%rbp)
	addl   $0x1,-0xc7c(%rbp)
	jmp    <context_execute_loop+0x15743>
	movzbl -0xff1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc7c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc78(%rbp)
	addl   $0x2,-0xc7c(%rbp)
	jmp    <context_execute_loop+0x15743>
	movzbl -0xff1(%rbp),%edx
	mov    0x75504(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x62785(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x15841>
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x170(%rbp)
	mov    -0x170(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x170(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x1198(%rbp),%rax
	mov    -0xc78(%rbp),%edx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x1b8(%rbp)
	mov    -0x1b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_function>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x15910>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x178(%rbp)
	mov    $0x8,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x178(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x1198(%rbp),%rax
	mov    -0xc78(%rbp),%edx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rdx
	mov    -0x178(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	mov    -0x178(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x1b0(%rbp)
	mov    -0x1b0(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	mov    %rax,-0x1a8(%rbp)
	mov    -0x1a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <context_execute_loop+0x15af2>
	mov    -0x1b0(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,-0x1a0(%rbp)
	mov    -0x1b0(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %eax,-0xc74(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x1a0(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x198(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x1a8(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x190(%rbp)
	mov    -0xc74(%rbp),%edx
	mov    -0x190(%rbp),%rcx
	mov    -0x198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <nifs_get>
	mov    %rax,-0x188(%rbp)
	cmpq   $0x0,-0x188(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x15a77>
	mov    -0x188(%rbp),%rax
	mov    0x8(%rax),%r8
	mov    -0x1198(%rbp),%rax
	lea    0x58(%rax),%rdx
	mov    -0x11ac(%rbp),%ecx
	mov    -0x1198(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   *%r8
	mov    %rax,-0x180(%rbp)
	mov    -0x180(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da6b>
	mov    -0x1198(%rbp),%rax
	mov    -0x180(%rbp),%rdx
	mov    %rdx,0x58(%rax)
	mov    -0xc7c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_get_module>
	mov    %rax,-0x868(%rbp)
	cmpq   $0x0,-0x868(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da6e>
	mov    -0x11ac(%rbp),%edx
	mov    -0x190(%rbp),%rcx
	mov    -0x868(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_search_exported_function>
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x15b5d>
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1b0(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,-0x868(%rbp)
	mov    -0x1a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %eax,-0xa58(%rbp)
	mov    -0xa58(%rbp),%esi
	lea    -0xe00(%rbp),%rdi
	lea    -0xa00(%rbp),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x868(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <module_get_fun>
	mov    -0xa00(%rbp),%eax
	mov    -0xe00(%rbp),%edx
	sub    %edx,%eax
	mov    %eax,-0xc74(%rbp)
	mov    -0xc78(%rbp),%eax
	cmp    -0xc74(%rbp),%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x15ba3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x7,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x0,-0xc70(%rbp)
	jmp    <context_execute_loop+0x15bf6>
	mov    -0xc70(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x1b0(%rbp),%rax
	add    %rdx,%rax
	mov    -0xc70(%rbp),%ecx
	mov    -0xc74(%rbp),%edx
	add    %edx,%ecx
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %ecx,%ecx
	add    $0xa,%rcx
	mov    %rdx,0x8(%rax,%rcx,8)
	addl   $0x1,-0xc70(%rbp)
	mov    -0xe00(%rbp),%eax
	cmp    %eax,-0xc70(%rbp)
	jb     <context_execute_loop+0x15baf>
	mov    -0xc7c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x68(%rax),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	mov    %eax,%esi
	mov    %edx,%edi
	call   <module_address>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x110(%rdx)
	mov    -0x868(%rbp),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rax
	mov    -0xa08(%rbp),%edx
	mov    %edx,%edx
	shl    $0x3,%rdx
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff5(%rbp)
	movzbl -0xff5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x15ce0>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x15d53>
	test   %eax,%eax
	je     <context_execute_loop+0x15ce0>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x15d04>
	jmp    <context_execute_loop+0x15d53>
	movzbl -0xff5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc6c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x15d7d>
	movzbl -0xff5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc6c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x15d7d>
	movzbl -0xff5(%rbp),%edx
	mov    0x74eca(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x62113(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff4(%rbp)
	movzbl -0xff4(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d819>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x62d49(%rip),%rax        # <_IO_stdin_used+0xf64>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x62d3d(%rip),%rdx        # <_IO_stdin_used+0xf64>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xff4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x15dfd>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x15e6d>
	test   %eax,%eax
	je     <context_execute_loop+0x15dfd>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x15e29>
	jmp    <context_execute_loop+0x15e6d>
	movzbl -0xff4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x15e97>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x15e97>
	movzbl -0xff4(%rbp),%edx
	mov    0x74db0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x62091(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x162cd>
	movzbl -0xff4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x162cd>
	cmpb   $0x2,-0xff4(%rbp)
	jne    <context_execute_loop+0x15ee7>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x860(%rbp)
	jmp    <context_execute_loop+0x15f0c>
	movzbl -0xff4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x162cd>
	movzbl -0xff4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x162cd>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xff4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x162cd>
	movzbl -0xff4(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff3(%rbp)
	movzbl -0xff3(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x16021>
	movzbl -0xff3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x160b1>
	movzbl -0xff3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff2(%rbp)
	movzbl -0xff3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xff2(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe5a(%rbp)
	movzwl -0xe5a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x860(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x160fc>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x162cd>
	movzbl -0xff4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xff4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x162cd>
	movzbl -0xff4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x16191>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x161e8>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xff4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x16244>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x860(%rbp)
	mov    -0x860(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x162cd>
	movzbl -0xff4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xff4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x860(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x860(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_function>
	test   %eax,%eax
	je     <context_execute_loop+0x162f1>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xc6c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xc68(%rbp)
	mov    -0xc68(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff7(%rbp)
	movzbl -0xff7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x16372>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x163d3>
	test   %eax,%eax
	je     <context_execute_loop+0x16372>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1638e>
	jmp    <context_execute_loop+0x163d3>
	movzbl -0xff7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc64(%rbp)
	addl   $0x1,-0xc68(%rbp)
	jmp    <context_execute_loop+0x163fd>
	movzbl -0xff7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc68(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc64(%rbp)
	addl   $0x2,-0xc68(%rbp)
	jmp    <context_execute_loop+0x163fd>
	movzbl -0xff7(%rbp),%edx
	mov    0x7484a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x61acb(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xc68(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff6(%rbp)
	movzbl -0xff6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x16445>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x164a6>
	test   %eax,%eax
	je     <context_execute_loop+0x16445>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x16461>
	jmp    <context_execute_loop+0x164a6>
	movzbl -0xff6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc60(%rbp)
	addl   $0x1,-0xc68(%rbp)
	jmp    <context_execute_loop+0x164d0>
	movzbl -0xff6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc68(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc60(%rbp)
	addl   $0x2,-0xc68(%rbp)
	jmp    <context_execute_loop+0x164d0>
	movzbl -0xff6(%rbp),%edx
	mov    0x74777(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x619f8(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x165ce>
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x1c0(%rbp)
	mov    -0x1c0(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x1c0(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xc60(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x858(%rbp)
	mov    -0x858(%rbp),%rax
	mov    (%rax),%eax
	cmp    $0x3,%eax
	jne    <context_execute_loop+0x16668>
	mov    -0x11a0(%rbp),%rax
	mov    -0xc60(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_resolve_function>
	mov    %rax,-0x1e0(%rbp)
	cmpq   $0x0,-0x1e0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1665a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0xa0b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1e0(%rbp),%rax
	mov    %rax,-0x858(%rbp)
	mov    -0x858(%rbp),%rax
	mov    (%rax),%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x16684>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x1677a>
	jmp    <context_execute_loop+0x167e0>
	mov    -0x858(%rbp),%rax
	mov    %rax,-0x1d0(%rbp)
	mov    -0x1d0(%rbp),%rax
	mov    0x8(%rax),%r8
	mov    -0x1198(%rbp),%rax
	lea    0x58(%rax),%rdx
	mov    -0xc64(%rbp),%ecx
	mov    -0x1198(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   *%r8
	mov    %rax,-0x1c8(%rbp)
	mov    -0x1c8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da71>
	mov    -0x1198(%rbp),%rax
	mov    -0x1c8(%rbp),%rdx
	mov    %rdx,0x58(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	cmp    $0xffffffffffffffff,%rax
	jne    <context_execute_loop+0x16714>
	mov    $0x0,%eax
	jmp    <context_execute_loop+0x3dd45>
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    0x68(%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	shr    $0x18,%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	shr    $0x2,%rax
	and    $0x3fffff,%eax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x167e5>
	mov    -0x858(%rbp),%rax
	mov    %rax,-0x1d8(%rbp)
	mov    -0x1d8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0x1d8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x167e5>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xc5c(%rbp)
	mov    -0xc5c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1011(%rbp)
	movzbl -0x1011(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1683c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1689d>
	test   %eax,%eax
	je     <context_execute_loop+0x1683c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x16858>
	jmp    <context_execute_loop+0x1689d>
	movzbl -0x1011(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc58(%rbp)
	addl   $0x1,-0xc5c(%rbp)
	jmp    <context_execute_loop+0x168c7>
	movzbl -0x1011(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc5c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc58(%rbp)
	addl   $0x2,-0xc5c(%rbp)
	jmp    <context_execute_loop+0x168c7>
	movzbl -0x1011(%rbp),%edx
	mov    0x74380(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x615c9(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x11a0(%rbp),%rcx
	mov    -0xc58(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <make_fun>
	mov    %rax,-0x218(%rbp)
	mov    -0x218(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <context_execute_loop+0x1692f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    -0x218(%rbp),%rdx
	mov    %rdx,0x58(%rax)
	mov    -0xc5c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xc54(%rbp)
	mov    -0xc54(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1015(%rbp)
	movzbl -0x1015(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1014(%rbp)
	movzbl -0x1015(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1013(%rbp)
	movzbl -0x1014(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x16a14>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d81f>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x169c3>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x169ea>
	jmp    <context_execute_loop+0x3d81f>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1013(%rbp),%eax
	mov    %eax,-0xc50(%rbp)
	addl   $0x1,-0xc54(%rbp)
	jmp    <context_execute_loop+0x16a87>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1013(%rbp),%eax
	mov    %eax,-0xc50(%rbp)
	addl   $0x1,-0xc54(%rbp)
	jmp    <context_execute_loop+0x16a87>
	movzbl -0x1015(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1015(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc54(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc50(%rbp)
	addl   $0x2,-0xc54(%rbp)
	mov    -0xc54(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1012(%rbp)
	movzbl -0x1012(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x16acf>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x16b30>
	test   %eax,%eax
	je     <context_execute_loop+0x16acf>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x16aeb>
	jmp    <context_execute_loop+0x16b30>
	movzbl -0x1012(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc4c(%rbp)
	addl   $0x1,-0xc54(%rbp)
	jmp    <context_execute_loop+0x16b5a>
	movzbl -0x1012(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc54(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc4c(%rbp)
	addl   $0x2,-0xc54(%rbp)
	jmp    <context_execute_loop+0x16b5a>
	movzbl -0x1012(%rbp),%edx
	mov    0x740ed(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x61336(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xc4c(%rbp),%eax
	mov    -0x11a0(%rbp),%rdx
	mov    0x68(%rdx),%edx
	mov    %eax,%esi
	mov    %edx,%edi
	call   <term_from_catch_label>
	mov    %rax,-0x220(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc50(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x220(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xc54(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xc48(%rbp)
	mov    -0xc48(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1018(%rbp)
	movzbl -0x1018(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1017(%rbp)
	movzbl -0x1018(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1016(%rbp)
	movzbl -0x1017(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x16c70>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d825>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x16c1f>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x16c46>
	jmp    <context_execute_loop+0x3d825>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1016(%rbp),%eax
	mov    %eax,-0xc44(%rbp)
	addl   $0x1,-0xc48(%rbp)
	jmp    <context_execute_loop+0x16ce3>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1016(%rbp),%eax
	mov    %eax,-0xc44(%rbp)
	addl   $0x1,-0xc48(%rbp)
	jmp    <context_execute_loop+0x16ce3>
	movzbl -0x1018(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1018(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc48(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc44(%rbp)
	addl   $0x2,-0xc48(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc44(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	lea    (%rdx,%rax,1),%rbx
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,(%rbx)
	mov    -0xc48(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xc40(%rbp)
	mov    -0xc40(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x101b(%rbp)
	movzbl -0x101b(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x101a(%rbp)
	movzbl -0x101b(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1019(%rbp)
	movzbl -0x101a(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x16ddd>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d82b>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x16d8c>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x16db3>
	jmp    <context_execute_loop+0x3d82b>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1019(%rbp),%eax
	mov    %eax,-0xc3c(%rbp)
	addl   $0x1,-0xc40(%rbp)
	jmp    <context_execute_loop+0x16e50>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1019(%rbp),%eax
	mov    %eax,-0xc3c(%rbp)
	addl   $0x1,-0xc40(%rbp)
	jmp    <context_execute_loop+0x16e50>
	movzbl -0x101b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x101b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc40(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc3c(%rbp)
	addl   $0x2,-0xc40(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc3c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	lea    (%rdx,%rax,1),%rbx
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,(%rbx)
	mov    -0xc40(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x1198(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x16ed8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x101e(%rbp)
	movzbl -0x101e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d831>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x61c18(%rip),%rax        # <_IO_stdin_used+0xf98>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x61c0c(%rip),%rdx        # <_IO_stdin_used+0xf98>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x101e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x16f62>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x16fd2>
	test   %eax,%eax
	je     <context_execute_loop+0x16f62>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x16f8e>
	jmp    <context_execute_loop+0x16fd2>
	movzbl -0x101e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x16ffc>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x16ffc>
	movzbl -0x101e(%rbp),%edx
	mov    0x73c4b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x60f2c(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x17432>
	movzbl -0x101e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17432>
	cmpb   $0x2,-0x101e(%rbp)
	jne    <context_execute_loop+0x1704c>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x850(%rbp)
	jmp    <context_execute_loop+0x17071>
	movzbl -0x101e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17432>
	movzbl -0x101e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17432>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x101e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17432>
	movzbl -0x101e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x101d(%rbp)
	movzbl -0x101d(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x17186>
	movzbl -0x101d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17216>
	movzbl -0x101d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x101c(%rbp)
	movzbl -0x101d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x101c(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe68(%rbp)
	movzwl -0xe68(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x850(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x17261>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x17432>
	movzbl -0x101e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x101e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17432>
	movzbl -0x101e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x172f6>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1734d>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x101e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x173a9>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x850(%rbp)
	mov    -0x850(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x17432>
	movzbl -0x101e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x101e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x850(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x228(%rbp)
	mov    $0xa,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x228(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x850(%rbp),%rdx
	mov    -0x228(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	mov    -0x228(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1024(%rbp)
	movzbl -0x1024(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d837>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6166f(%rip),%rax        # <_IO_stdin_used+0xfcc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x61663(%rip),%rdx        # <_IO_stdin_used+0xfcc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1024(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1753f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x175af>
	test   %eax,%eax
	je     <context_execute_loop+0x1753f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1756b>
	jmp    <context_execute_loop+0x175af>
	movzbl -0x1024(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x175d9>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x175d9>
	movzbl -0x1024(%rbp),%edx
	mov    0x7366e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x6094f(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x17a0f>
	movzbl -0x1024(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17a0f>
	cmpb   $0x2,-0x1024(%rbp)
	jne    <context_execute_loop+0x17629>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x848(%rbp)
	jmp    <context_execute_loop+0x1764e>
	movzbl -0x1024(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17a0f>
	movzbl -0x1024(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17a0f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1024(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17a0f>
	movzbl -0x1024(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1023(%rbp)
	movzbl -0x1023(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x17763>
	movzbl -0x1023(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x177f3>
	movzbl -0x1023(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1022(%rbp)
	movzbl -0x1023(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1022(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe6c(%rbp)
	movzwl -0xe6c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x848(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1783e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x17a0f>
	movzbl -0x1024(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1024(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17a0f>
	movzbl -0x1024(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x178d3>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1792a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1024(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17986>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x848(%rbp)
	mov    -0x848(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x17a0f>
	movzbl -0x1024(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1024(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x848(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1021(%rbp)
	movzbl -0x1021(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d83d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x61153(%rip),%rax        # <_IO_stdin_used+0x1000>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x61147(%rip),%rdx        # <_IO_stdin_used+0x1000>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1021(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x17a8f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x17aff>
	test   %eax,%eax
	je     <context_execute_loop+0x17a8f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x17abb>
	jmp    <context_execute_loop+0x17aff>
	movzbl -0x1021(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17b29>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17b29>
	movzbl -0x1021(%rbp),%edx
	mov    0x7311e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x603ff(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x17f5f>
	movzbl -0x1021(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17f5f>
	cmpb   $0x2,-0x1021(%rbp)
	jne    <context_execute_loop+0x17b79>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x840(%rbp)
	jmp    <context_execute_loop+0x17b9e>
	movzbl -0x1021(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17f5f>
	movzbl -0x1021(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17f5f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1021(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17f5f>
	movzbl -0x1021(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1020(%rbp)
	movzbl -0x1020(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x17cb3>
	movzbl -0x1020(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17d43>
	movzbl -0x1020(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x101f(%rbp)
	movzbl -0x1020(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x101f(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe6a(%rbp)
	movzwl -0xe6a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x840(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x17d8e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x17f5f>
	movzbl -0x1021(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1021(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17f5f>
	movzbl -0x1021(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x17e23>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x17e7a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1021(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x17ed6>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x840(%rbp)
	mov    -0x840(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x17f5f>
	movzbl -0x1021(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1021(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x840(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	mov    -0x840(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x1,-0xc38(%rbp)
	mov    -0xc38(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfba(%rbp)
	movzbl -0xfba(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xfb9(%rbp)
	movzbl -0xfba(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xfb8(%rbp)
	movzbl -0xfb9(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x1804d>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d843>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x17ffc>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x18023>
	jmp    <context_execute_loop+0x3d843>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfb8(%rbp),%eax
	mov    %eax,-0xc34(%rbp)
	addl   $0x1,-0xc38(%rbp)
	jmp    <context_execute_loop+0x180c0>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfb8(%rbp),%eax
	mov    %eax,-0xc34(%rbp)
	addl   $0x1,-0xc38(%rbp)
	jmp    <context_execute_loop+0x180c0>
	movzbl -0xfba(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfba(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc38(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc34(%rbp)
	addl   $0x2,-0xc38(%rbp)
	mov    -0xc38(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfb7(%rbp)
	movzbl -0xfb7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x18108>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x18169>
	test   %eax,%eax
	je     <context_execute_loop+0x18108>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x18124>
	jmp    <context_execute_loop+0x18169>
	movzbl -0xfb7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc30(%rbp)
	addl   $0x1,-0xc38(%rbp)
	jmp    <context_execute_loop+0x18193>
	movzbl -0xfb7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc38(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc30(%rbp)
	addl   $0x2,-0xc38(%rbp)
	jmp    <context_execute_loop+0x18193>
	movzbl -0xfb7(%rbp),%edx
	mov    0x72ab4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5fcfd(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xc30(%rbp),%eax
	mov    -0x11a0(%rbp),%rdx
	mov    0x68(%rdx),%edx
	mov    %eax,%esi
	mov    %edx,%edi
	call   <term_from_catch_label>
	mov    %rax,-0x110(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc34(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x110(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xc38(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xc2c(%rbp)
	mov    -0xc2c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfbd(%rbp)
	movzbl -0xfbd(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xfbc(%rbp)
	movzbl -0xfbd(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0xfbb(%rbp)
	movzbl -0xfbc(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x182a9>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d849>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x18258>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x1827f>
	jmp    <context_execute_loop+0x3d849>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfbb(%rbp),%eax
	mov    %eax,-0xc28(%rbp)
	addl   $0x1,-0xc2c(%rbp)
	jmp    <context_execute_loop+0x1831c>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfbb(%rbp),%eax
	mov    %eax,-0xc28(%rbp)
	addl   $0x1,-0xc2c(%rbp)
	jmp    <context_execute_loop+0x1831c>
	movzbl -0xfbd(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0xfbd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc2c(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xc28(%rbp)
	addl   $0x2,-0xc2c(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc28(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	lea    (%rdx,%rax,1),%rbx
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,(%rbx)
	mov    -0x1198(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	cmp    $0x3a,%eax
	je     <context_execute_loop+0x184a2>
	cmp    $0x3a,%eax
	jg     <context_execute_loop+0x18558>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x18391>
	cmp    $0x22,%eax
	jne    <context_execute_loop+0x18558>
	mov    -0x1198(%rbp),%rax
	mov    0x60(%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x58(%rax)
	jmp    <context_execute_loop+0x18558>
	mov    -0x1198(%rbp),%rax
	mov    $0x6,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x183e1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x120(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x60(%rax),%rdx
	mov    -0x120(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x120(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x118(%rbp)
	mov    -0x118(%rbp),%rax
	mov    $0xccb,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x120(%rbp),%rdx
	mov    -0x118(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x1198(%rbp),%rax
	mov    -0x118(%rbp),%rdx
	mov    %rdx,0x58(%rax)
	jmp    <context_execute_loop+0x18558>
	mov    -0x1198(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x184f2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x128(%rbp)
	mov    -0x128(%rbp),%rax
	mov    $0xccb,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x1198(%rbp),%rax
	mov    0x60(%rax),%rdx
	mov    -0x128(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x1198(%rbp),%rax
	mov    -0x128(%rbp),%rdx
	mov    %rdx,0x58(%rax)
	nop
	mov    -0xc2c(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x103b(%rbp)
	movzbl -0x103b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x185bd>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x18630>
	test   %eax,%eax
	je     <context_execute_loop+0x185bd>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x185e1>
	jmp    <context_execute_loop+0x18630>
	movzbl -0x103b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa6c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1865a>
	movzbl -0x103b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa6c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1865a>
	movzbl -0x103b(%rbp),%edx
	mov    0x725ed(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5f836(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x103a(%rbp)
	movzbl -0x103a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d84f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x6053c(%rip),%rax        # <_IO_stdin_used+0x1034>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x60530(%rip),%rdx        # <_IO_stdin_used+0x1034>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x103a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x186da>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1874a>
	test   %eax,%eax
	je     <context_execute_loop+0x186da>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x18706>
	jmp    <context_execute_loop+0x1874a>
	movzbl -0x103a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18774>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18774>
	movzbl -0x103a(%rbp),%edx
	mov    0x724d3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5f7b4(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x18baa>
	movzbl -0x103a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18baa>
	cmpb   $0x2,-0x103a(%rbp)
	jne    <context_execute_loop+0x187c4>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x838(%rbp)
	jmp    <context_execute_loop+0x187e9>
	movzbl -0x103a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18baa>
	movzbl -0x103a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18baa>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x103a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18baa>
	movzbl -0x103a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1039(%rbp)
	movzbl -0x1039(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x188fe>
	movzbl -0x1039(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1898e>
	movzbl -0x1039(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1038(%rbp)
	movzbl -0x1039(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1038(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe74(%rbp)
	movzwl -0xe74(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x838(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x189d9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x18baa>
	movzbl -0x103a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x103a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18baa>
	movzbl -0x103a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x18a6e>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x18ac5>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x103a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18b21>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x838(%rbp)
	mov    -0x838(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x18baa>
	movzbl -0x103a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x103a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x838(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1037(%rbp)
	movzbl -0x1037(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d855>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x60020(%rip),%rax        # <_IO_stdin_used+0x1068>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x60014(%rip),%rdx        # <_IO_stdin_used+0x1068>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1037(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x18c2a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x18c9a>
	test   %eax,%eax
	je     <context_execute_loop+0x18c2a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x18c56>
	jmp    <context_execute_loop+0x18c9a>
	movzbl -0x1037(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18cc4>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18cc4>
	movzbl -0x1037(%rbp),%edx
	mov    0x71f83(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5f264(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x190fa>
	movzbl -0x1037(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x190fa>
	cmpb   $0x2,-0x1037(%rbp)
	jne    <context_execute_loop+0x18d14>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x830(%rbp)
	jmp    <context_execute_loop+0x18d39>
	movzbl -0x1037(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x190fa>
	movzbl -0x1037(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x190fa>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1037(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x190fa>
	movzbl -0x1037(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1036(%rbp)
	movzbl -0x1036(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x18e4e>
	movzbl -0x1036(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x18ede>
	movzbl -0x1036(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1035(%rbp)
	movzbl -0x1036(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1035(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe72(%rbp)
	movzwl -0xe72(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x830(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x18f29>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x190fa>
	movzbl -0x1037(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1037(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x190fa>
	movzbl -0x1037(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x18fbe>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x19015>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1037(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19071>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x830(%rbp)
	mov    -0x830(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x190fa>
	movzbl -0x1037(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1037(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x830(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1034(%rbp)
	movzbl -0x1034(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x19148>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x191bf>
	test   %eax,%eax
	je     <context_execute_loop+0x19148>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1916d>
	jmp    <context_execute_loop+0x191bf>
	movzbl -0x1034(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x828(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x191e9>
	movzbl -0x1034(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x828(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x191e9>
	movzbl -0x1034(%rbp),%edx
	mov    0x71a5e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5ecdf(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1033(%rbp)
	movzbl -0x1033(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1032(%rbp)
	movzbl -0x1033(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1031(%rbp)
	movzbl -0x1032(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x192b3>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d85b>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x19252>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x19281>
	jmp    <context_execute_loop+0x3d85b>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1031(%rbp),%eax
	mov    %eax,-0xc24(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19330>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1031(%rbp),%eax
	mov    %eax,-0xc24(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19330>
	movzbl -0x1033(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1033(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc24(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x838(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1937b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x830(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x193c6>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x838(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x258(%rbp)
	mov    -0x830(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x250(%rbp)
	mov    -0x258(%rbp),%rdx
	mov    -0x250(%rbp),%rax
	add    %rdx,%rax
	imul   -0x828(%rbp),%rax
	mov    -0xa00(%rbp),%rdx
	mov    (%rdx),%rcx
	mov    -0xc24(%rbp),%edx
	movslq %edx,%rdx
	shl    $0x3,%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,(%rbx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1030(%rbp)
	movzbl -0x1030(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x19496>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x19509>
	test   %eax,%eax
	je     <context_execute_loop+0x19496>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x194ba>
	jmp    <context_execute_loop+0x19509>
	movzbl -0x1030(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa68(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19533>
	movzbl -0x1030(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa68(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19533>
	movzbl -0x1030(%rbp),%edx
	mov    0x71714(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5e95d(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x102f(%rbp)
	movzbl -0x102f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d861>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5f6cb(%rip),%rax        # <_IO_stdin_used+0x109c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5f6bf(%rip),%rdx        # <_IO_stdin_used+0x109c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x102f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x195b3>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x19623>
	test   %eax,%eax
	je     <context_execute_loop+0x195b3>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x195df>
	jmp    <context_execute_loop+0x19623>
	movzbl -0x102f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1964d>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1964d>
	movzbl -0x102f(%rbp),%edx
	mov    0x715fa(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5e8db(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x19a83>
	movzbl -0x102f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19a83>
	cmpb   $0x2,-0x102f(%rbp)
	jne    <context_execute_loop+0x1969d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x820(%rbp)
	jmp    <context_execute_loop+0x196c2>
	movzbl -0x102f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19a83>
	movzbl -0x102f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19a83>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x102f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19a83>
	movzbl -0x102f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x102e(%rbp)
	movzbl -0x102e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x197d7>
	movzbl -0x102e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19867>
	movzbl -0x102e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x102d(%rbp)
	movzbl -0x102e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x102d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe70(%rbp)
	movzwl -0xe70(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x820(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x198b2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x19a83>
	movzbl -0x102f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x102f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19a83>
	movzbl -0x102f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x19947>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1999e>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x102f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x199fa>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x820(%rbp)
	mov    -0x820(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x19a83>
	movzbl -0x102f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x102f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x820(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x102c(%rbp)
	movzbl -0x102c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x19ad1>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x19b48>
	test   %eax,%eax
	je     <context_execute_loop+0x19ad1>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x19af6>
	jmp    <context_execute_loop+0x19b48>
	movzbl -0x102c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x248(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19b72>
	movzbl -0x102c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x248(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19b72>
	movzbl -0x102c(%rbp),%edx
	mov    0x710d5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5e356(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x102b(%rbp)
	movzbl -0x102b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x19bc0>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x19c37>
	test   %eax,%eax
	je     <context_execute_loop+0x19bc0>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x19be5>
	jmp    <context_execute_loop+0x19c37>
	movzbl -0x102b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x240(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19c61>
	movzbl -0x102b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x240(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19c61>
	movzbl -0x102b(%rbp),%edx
	mov    0x70fe6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5e267(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x102a(%rbp)
	movzbl -0x102a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d867>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5efd1(%rip),%rax        # <_IO_stdin_used+0x10d0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5efc5(%rip),%rdx        # <_IO_stdin_used+0x10d0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x102a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x19ce1>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x19d51>
	test   %eax,%eax
	je     <context_execute_loop+0x19ce1>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x19d0d>
	jmp    <context_execute_loop+0x19d51>
	movzbl -0x102a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19d7b>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19d7b>
	movzbl -0x102a(%rbp),%edx
	mov    0x70ecc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5e1ad(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1a1b1>
	movzbl -0x102a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a1b1>
	cmpb   $0x2,-0x102a(%rbp)
	jne    <context_execute_loop+0x19dcb>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x818(%rbp)
	jmp    <context_execute_loop+0x19df0>
	movzbl -0x102a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a1b1>
	movzbl -0x102a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a1b1>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x102a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a1b1>
	movzbl -0x102a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1029(%rbp)
	movzbl -0x1029(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x19f05>
	movzbl -0x1029(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x19f95>
	movzbl -0x1029(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1028(%rbp)
	movzbl -0x1029(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1028(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe6e(%rbp)
	movzwl -0xe6e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x818(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x19fe0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1a1b1>
	movzbl -0x102a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x102a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a1b1>
	movzbl -0x102a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1a075>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1a0cc>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x102a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a128>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x818(%rbp)
	mov    -0x818(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1a1b1>
	movzbl -0x102a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x102a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x818(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1027(%rbp)
	movzbl -0x1027(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1026(%rbp)
	movzbl -0x1027(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1025(%rbp)
	movzbl -0x1026(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x1a27b>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d86d>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x1a21a>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x1a249>
	jmp    <context_execute_loop+0x3d86d>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1025(%rbp),%eax
	mov    %eax,-0xc20(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a2f8>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1025(%rbp),%eax
	mov    %eax,-0xc20(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a2f8>
	movzbl -0x1027(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1027(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc20(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x820(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1a343>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x820(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x238(%rbp)
	mov    -0x238(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1a3b9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x238(%rbp),%rax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_create_empty_binary>
	mov    %rax,-0x230(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    -0x230(%rbp),%rdx
	mov    %rdx,0x1a8(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x1b0(%rax)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc20(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x230(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10e5(%rbp)
	movzbl -0x10e5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1a489>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1a4fc>
	test   %eax,%eax
	je     <context_execute_loop+0x1a489>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1a4ad>
	jmp    <context_execute_loop+0x1a4fc>
	movzbl -0x10e5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa9c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a526>
	movzbl -0x10e5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa9c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a526>
	movzbl -0x10e5(%rbp),%edx
	mov    0x70721(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5d96a(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10e4(%rbp)
	movzbl -0x10e4(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d873>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5e740(%rip),%rax        # <_IO_stdin_used+0x1104>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5e734(%rip),%rdx        # <_IO_stdin_used+0x1104>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10e4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1a5a6>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1a616>
	test   %eax,%eax
	je     <context_execute_loop+0x1a5a6>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1a5d2>
	jmp    <context_execute_loop+0x1a616>
	movzbl -0x10e4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a640>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a640>
	movzbl -0x10e4(%rbp),%edx
	mov    0x70607(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5d8e8(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1aa76>
	movzbl -0x10e4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1aa76>
	cmpb   $0x2,-0x10e4(%rbp)
	jne    <context_execute_loop+0x1a690>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x810(%rbp)
	jmp    <context_execute_loop+0x1a6b5>
	movzbl -0x10e4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1aa76>
	movzbl -0x10e4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1aa76>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10e4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1aa76>
	movzbl -0x10e4(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10e3(%rbp)
	movzbl -0x10e3(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1a7ca>
	movzbl -0x10e3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a85a>
	movzbl -0x10e3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10e2(%rbp)
	movzbl -0x10e3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10e2(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xebe(%rbp)
	movzwl -0xebe(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x810(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1a8a5>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1aa76>
	movzbl -0x10e4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10e4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1aa76>
	movzbl -0x10e4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1a93a>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1a991>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10e4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1a9ed>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x810(%rbp)
	mov    -0x810(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1aa76>
	movzbl -0x10e4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10e4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x810(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10e1(%rbp)
	movzbl -0x10e1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1aac0>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1ab33>
	test   %eax,%eax
	je     <context_execute_loop+0x1aac0>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1aae4>
	jmp    <context_execute_loop+0x1ab33>
	movzbl -0x10e1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa98(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1ab5d>
	movzbl -0x10e1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa98(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1ab5d>
	movzbl -0x10e1(%rbp),%edx
	mov    0x700ea(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5d36b(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10e0(%rbp)
	movzbl -0x10e0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1aba7>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1ac1a>
	test   %eax,%eax
	je     <context_execute_loop+0x1aba7>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1abcb>
	jmp    <context_execute_loop+0x1ac1a>
	movzbl -0x10e0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa94(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1ac44>
	movzbl -0x10e0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa94(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1ac44>
	movzbl -0x10e0(%rbp),%edx
	mov    0x70003(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5d284(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10df(%rbp)
	movzbl -0x10df(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d879>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5e056(%rip),%rax        # <_IO_stdin_used+0x1138>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5e04a(%rip),%rdx        # <_IO_stdin_used+0x1138>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10df(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1acc4>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1ad34>
	test   %eax,%eax
	je     <context_execute_loop+0x1acc4>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1acf0>
	jmp    <context_execute_loop+0x1ad34>
	movzbl -0x10df(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1ad5e>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1ad5e>
	movzbl -0x10df(%rbp),%edx
	mov    0x6fee9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5d1ca(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1b194>
	movzbl -0x10df(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1b194>
	cmpb   $0x2,-0x10df(%rbp)
	jne    <context_execute_loop+0x1adae>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x808(%rbp)
	jmp    <context_execute_loop+0x1add3>
	movzbl -0x10df(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1b194>
	movzbl -0x10df(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1b194>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10df(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1b194>
	movzbl -0x10df(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10de(%rbp)
	movzbl -0x10de(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1aee8>
	movzbl -0x10de(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1af78>
	movzbl -0x10de(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10dd(%rbp)
	movzbl -0x10de(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10dd(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xebc(%rbp)
	movzwl -0xebc(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x808(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1afc3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1b194>
	movzbl -0x10df(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10df(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1b194>
	movzbl -0x10df(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1b058>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1b0af>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10df(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1b10b>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x808(%rbp)
	mov    -0x808(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1b194>
	movzbl -0x10df(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10df(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x808(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10dc(%rbp)
	movzbl -0x10dc(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x10db(%rbp)
	movzbl -0x10dc(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x10da(%rbp)
	movzbl -0x10db(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x1b25e>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d87f>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x1b1fd>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x1b22c>
	jmp    <context_execute_loop+0x3d87f>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10da(%rbp),%eax
	mov    %eax,-0xc1c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1b2db>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10da(%rbp),%eax
	mov    %eax,-0xc1c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1b2db>
	movzbl -0x10dc(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10dc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc1c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x810(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1b326>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x808(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1b371>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x810(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x420(%rbp)
	mov    -0x420(%rbp),%rax
	and    $0x7,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1b3bf>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x808(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x418(%rbp)
	cmpq   $0x0,-0x418(%rbp)
	je     <context_execute_loop+0x1b408>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x420(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1b477>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x420(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_create_empty_binary>
	mov    %rax,-0x410(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    -0x410(%rbp),%rdx
	mov    %rdx,0x1a8(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x1b0(%rax)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc1c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x410(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d7(%rbp)
	movzbl -0x10d7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1b556>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1b5c9>
	test   %eax,%eax
	je     <context_execute_loop+0x1b556>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1b57a>
	jmp    <context_execute_loop+0x1b5c9>
	movzbl -0x10d7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa8c(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1b5f3>
	movzbl -0x10d7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa8c(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1b5f3>
	movzbl -0x10d7(%rbp),%edx
	mov    0x6f654(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5c89d(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d6(%rbp)
	movzbl -0x10d6(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d885>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5d6db(%rip),%rax        # <_IO_stdin_used+0x116c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5d6cf(%rip),%rdx        # <_IO_stdin_used+0x116c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10d6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1b673>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1b6e3>
	test   %eax,%eax
	je     <context_execute_loop+0x1b673>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1b69f>
	jmp    <context_execute_loop+0x1b6e3>
	movzbl -0x10d6(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1b70d>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1b70d>
	movzbl -0x10d6(%rbp),%edx
	mov    0x6f53a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5c81b(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1bb43>
	movzbl -0x10d6(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1bb43>
	cmpb   $0x2,-0x10d6(%rbp)
	jne    <context_execute_loop+0x1b75d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x800(%rbp)
	jmp    <context_execute_loop+0x1b782>
	movzbl -0x10d6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1bb43>
	movzbl -0x10d6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1bb43>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10d6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1bb43>
	movzbl -0x10d6(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d5(%rbp)
	movzbl -0x10d5(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1b897>
	movzbl -0x10d5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1b927>
	movzbl -0x10d5(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d4(%rbp)
	movzbl -0x10d5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10d4(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeba(%rbp)
	movzwl -0xeba(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x800(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1b972>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1bb43>
	movzbl -0x10d6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10d6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1bb43>
	movzbl -0x10d6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1ba07>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1ba5e>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10d6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1baba>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x800(%rbp)
	mov    -0x800(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1bb43>
	movzbl -0x10d6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10d6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x800(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d3(%rbp)
	movzbl -0x10d3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d88b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5d1bf(%rip),%rax        # <_IO_stdin_used+0x11a0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5d1b3(%rip),%rdx        # <_IO_stdin_used+0x11a0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10d3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1bbc3>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1bc33>
	test   %eax,%eax
	je     <context_execute_loop+0x1bbc3>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1bbef>
	jmp    <context_execute_loop+0x1bc33>
	movzbl -0x10d3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1bc5d>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1bc5d>
	movzbl -0x10d3(%rbp),%edx
	mov    0x6efea(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5c2cb(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1c093>
	movzbl -0x10d3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c093>
	cmpb   $0x2,-0x10d3(%rbp)
	jne    <context_execute_loop+0x1bcad>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7f8(%rbp)
	jmp    <context_execute_loop+0x1bcd2>
	movzbl -0x10d3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c093>
	movzbl -0x10d3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c093>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10d3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c093>
	movzbl -0x10d3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d2(%rbp)
	movzbl -0x10d2(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1bde7>
	movzbl -0x10d2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1be77>
	movzbl -0x10d2(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d1(%rbp)
	movzbl -0x10d2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10d1(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeb8(%rbp)
	movzwl -0xeb8(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x7f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1bec2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1c093>
	movzbl -0x10d3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10d3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c093>
	movzbl -0x10d3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1bf57>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1bfae>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10d3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c00a>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7f8(%rbp)
	mov    -0x7f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1c093>
	movzbl -0x10d3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10d3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7f8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d0(%rbp)
	movzbl -0x10d0(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d891>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5cca3(%rip),%rax        # <_IO_stdin_used+0x11d4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5cc97(%rip),%rdx        # <_IO_stdin_used+0x11d4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10d0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1c113>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1c183>
	test   %eax,%eax
	je     <context_execute_loop+0x1c113>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1c13f>
	jmp    <context_execute_loop+0x1c183>
	movzbl -0x10d0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c1ad>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c1ad>
	movzbl -0x10d0(%rbp),%edx
	mov    0x6ea9a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5bd7b(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1c5e3>
	movzbl -0x10d0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c5e3>
	cmpb   $0x2,-0x10d0(%rbp)
	jne    <context_execute_loop+0x1c1fd>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7f0(%rbp)
	jmp    <context_execute_loop+0x1c222>
	movzbl -0x10d0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c5e3>
	movzbl -0x10d0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c5e3>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10d0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c5e3>
	movzbl -0x10d0(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10cf(%rbp)
	movzbl -0x10cf(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1c337>
	movzbl -0x10cf(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c3c7>
	movzbl -0x10cf(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ce(%rbp)
	movzbl -0x10cf(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10ce(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeb6(%rbp)
	movzwl -0xeb6(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x7f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1c412>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1c5e3>
	movzbl -0x10d0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10d0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c5e3>
	movzbl -0x10d0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1c4a7>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1c4fe>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10d0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c55a>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7f0(%rbp)
	mov    -0x7f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1c5e3>
	movzbl -0x10d0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10d0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7f0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10cd(%rbp)
	movzbl -0x10cd(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1c631>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1c6a8>
	test   %eax,%eax
	je     <context_execute_loop+0x1c631>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1c656>
	jmp    <context_execute_loop+0x1c6a8>
	movzbl -0x10cd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x7e8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c6d2>
	movzbl -0x10cd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x7e8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c6d2>
	movzbl -0x10cd(%rbp),%edx
	mov    0x6e575(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5b7f6(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe00(%rbp),%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10cc(%rbp)
	movzbl -0x10cc(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d897>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5c68c(%rip),%rax        # <_IO_stdin_used+0x1208>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5c680(%rip),%rdx        # <_IO_stdin_used+0x1208>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10cc(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1c75e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1c7ce>
	test   %eax,%eax
	je     <context_execute_loop+0x1c75e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1c78a>
	jmp    <context_execute_loop+0x1c7ce>
	movzbl -0x10cc(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c7f8>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1c7f8>
	movzbl -0x10cc(%rbp),%edx
	mov    0x6e44f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5b730(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1cc2e>
	movzbl -0x10cc(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cc2e>
	cmpb   $0x2,-0x10cc(%rbp)
	jne    <context_execute_loop+0x1c848>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7e0(%rbp)
	jmp    <context_execute_loop+0x1c86d>
	movzbl -0x10cc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cc2e>
	movzbl -0x10cc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cc2e>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10cc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cc2e>
	movzbl -0x10cc(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10cb(%rbp)
	movzbl -0x10cb(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1c982>
	movzbl -0x10cb(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1ca12>
	movzbl -0x10cb(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ca(%rbp)
	movzbl -0x10cb(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10ca(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeb4(%rbp)
	movzwl -0xeb4(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x7e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1ca5d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1cc2e>
	movzbl -0x10cc(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10cc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cc2e>
	movzbl -0x10cc(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1caf2>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1cb49>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10cc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cba5>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7e0(%rbp)
	mov    -0x7e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1cc2e>
	movzbl -0x10cc(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10cc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10c9(%rbp)
	movzbl -0x10c9(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d89d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5c170(%rip),%rax        # <_IO_stdin_used+0x123c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5c164(%rip),%rdx        # <_IO_stdin_used+0x123c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10c9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1ccae>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1cd1e>
	test   %eax,%eax
	je     <context_execute_loop+0x1ccae>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1ccda>
	jmp    <context_execute_loop+0x1cd1e>
	movzbl -0x10c9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cd48>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cd48>
	movzbl -0x10c9(%rbp),%edx
	mov    0x6deff(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5b1e0(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1d17e>
	movzbl -0x10c9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1d17e>
	cmpb   $0x2,-0x10c9(%rbp)
	jne    <context_execute_loop+0x1cd98>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7d8(%rbp)
	jmp    <context_execute_loop+0x1cdbd>
	movzbl -0x10c9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1d17e>
	movzbl -0x10c9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1d17e>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10c9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1d17e>
	movzbl -0x10c9(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10c8(%rbp)
	movzbl -0x10c8(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1ced2>
	movzbl -0x10c8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1cf62>
	movzbl -0x10c8(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10c7(%rbp)
	movzbl -0x10c8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10c7(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeb2(%rbp)
	movzwl -0xeb2(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x7d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1cfad>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1d17e>
	movzbl -0x10c9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10c9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1d17e>
	movzbl -0x10c9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1d042>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1d099>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10c9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1d0f5>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7d8(%rbp)
	mov    -0x7d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1d17e>
	movzbl -0x10c9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10c9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7d8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10c6(%rbp)
	movzbl -0x10c6(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x10c5(%rbp)
	movzbl -0x10c6(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x10c4(%rbp)
	movzbl -0x10c5(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x1d248>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d8a3>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x1d1e7>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x1d216>
	jmp    <context_execute_loop+0x3d8a3>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10c4(%rbp),%eax
	mov    %eax,-0xc18(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1d2c5>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10c4(%rbp),%eax
	mov    %eax,-0xc18(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x1d2c5>
	movzbl -0x10c6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10c6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc18(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x7e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1d310>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x800(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1d35b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x7f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1d3a6>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x800(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x408(%rbp)
	mov    -0x7f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x400(%rbp)
	mov    -0x408(%rbp),%rax
	and    $0x7,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1d40a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	cmpq   $0x8,-0x7e8(%rbp)
	je     <context_execute_loop+0x1d43d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x7e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x3f8(%rbp)
	mov    -0x408(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	mov    %eax,%edx
	mov    -0x3f8(%rbp),%rax
	add    %eax,%edx
	mov    -0x400(%rbp),%rax
	add    %edx,%eax
	lea    0x2(%rax),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1d4d4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10c3(%rbp)
	movzbl -0x10c3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8a9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5b8fe(%rip),%rax        # <_IO_stdin_used+0x1270>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5b8f2(%rip),%rdx        # <_IO_stdin_used+0x1270>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10c3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1d554>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1d5c4>
	test   %eax,%eax
	je     <context_execute_loop+0x1d554>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1d580>
	jmp    <context_execute_loop+0x1d5c4>
	movzbl -0x10c3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1d5ee>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1d5ee>
	movzbl -0x10c3(%rbp),%edx
	mov    0x6d659(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5a93a(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1da24>
	movzbl -0x10c3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1da24>
	cmpb   $0x2,-0x10c3(%rbp)
	jne    <context_execute_loop+0x1d63e>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7e0(%rbp)
	jmp    <context_execute_loop+0x1d663>
	movzbl -0x10c3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1da24>
	movzbl -0x10c3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1da24>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10c3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1da24>
	movzbl -0x10c3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10c2(%rbp)
	movzbl -0x10c2(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1d778>
	movzbl -0x10c2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1d808>
	movzbl -0x10c2(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10c1(%rbp)
	movzbl -0x10c2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10c1(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeb0(%rbp)
	movzwl -0xeb0(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x7e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1d853>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1da24>
	movzbl -0x10c3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10c3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1da24>
	movzbl -0x10c3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1d8e8>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1d93f>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10c3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x1d99b>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7e0(%rbp)
	mov    -0x7e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1da24>
	movzbl -0x10c3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10c3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7e0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x408(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %eax,%edx
	mov    -0x3f8(%rbp),%rax
	add    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_create_empty_binary>
	mov    %rax,-0x3f0(%rbp)
	mov    -0x7e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rbx
	mov    -0x3f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x3f8(%rbp),%rax
	mov    %rax,%rdx
	mov    %rbx,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x1198(%rbp),%rax
	mov    -0x3f0(%rbp),%rdx
	mov    %rdx,0x1a8(%rax)
	mov    -0x3f8(%rbp),%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x1b0(%rax)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc18(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x3f0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xe00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1003(%rbp)
	movzbl -0x1003(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1db50>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1dbc3>
	test   %eax,%eax
	je     <context_execute_loop+0x1db50>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1db74>
	jmp    <context_execute_loop+0x1dbc3>
	movzbl -0x1003(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa5c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1dbed>
	movzbl -0x1003(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa5c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1dbed>
	movzbl -0x1003(%rbp),%edx
	mov    0x6d05a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5a2a3(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1002(%rbp)
	movzbl -0x1002(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8af>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5b219(%rip),%rax        # <_IO_stdin_used+0x12a4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5b20d(%rip),%rdx        # <_IO_stdin_used+0x12a4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1002(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1dc6d>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1dcdd>
	test   %eax,%eax
	je     <context_execute_loop+0x1dc6d>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1dc99>
	jmp    <context_execute_loop+0x1dcdd>
	movzbl -0x1002(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1dd07>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1dd07>
	movzbl -0x1002(%rbp),%edx
	mov    0x6cf40(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5a221(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1e13d>
	movzbl -0x1002(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e13d>
	cmpb   $0x2,-0x1002(%rbp)
	jne    <context_execute_loop+0x1dd57>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7d0(%rbp)
	jmp    <context_execute_loop+0x1dd7c>
	movzbl -0x1002(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e13d>
	movzbl -0x1002(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e13d>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1002(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e13d>
	movzbl -0x1002(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1001(%rbp)
	movzbl -0x1001(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1de91>
	movzbl -0x1001(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1df21>
	movzbl -0x1001(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1000(%rbp)
	movzbl -0x1001(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1000(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe60(%rbp)
	movzwl -0xe60(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x7d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1df6c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1e13d>
	movzbl -0x1002(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1002(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e13d>
	movzbl -0x1002(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1e001>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1e058>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1002(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e0b4>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7d0(%rbp)
	mov    -0x7d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1e13d>
	movzbl -0x1002(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1002(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xfff(%rbp)
	movzbl -0xfff(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1e18b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1e202>
	test   %eax,%eax
	je     <context_execute_loop+0x1e18b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1e1b0>
	jmp    <context_execute_loop+0x1e202>
	movzbl -0xfff(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x7c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e22c>
	movzbl -0xfff(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x7c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e22c>
	movzbl -0xfff(%rbp),%edx
	mov    0x6ca1b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x59c9c(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xffe(%rbp)
	movzbl -0xffe(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8b5>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5ac0e(%rip),%rax        # <_IO_stdin_used+0x12d8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5ac02(%rip),%rdx        # <_IO_stdin_used+0x12d8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xffe(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1e2ac>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1e31c>
	test   %eax,%eax
	je     <context_execute_loop+0x1e2ac>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1e2d8>
	jmp    <context_execute_loop+0x1e31c>
	movzbl -0xffe(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e346>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e346>
	movzbl -0xffe(%rbp),%edx
	mov    0x6c901(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x59be2(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1e77c>
	movzbl -0xffe(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e77c>
	cmpb   $0x2,-0xffe(%rbp)
	jne    <context_execute_loop+0x1e396>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7c0(%rbp)
	jmp    <context_execute_loop+0x1e3bb>
	movzbl -0xffe(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e77c>
	movzbl -0xffe(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e77c>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xffe(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e77c>
	movzbl -0xffe(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xffd(%rbp)
	movzbl -0xffd(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1e4d0>
	movzbl -0xffd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e560>
	movzbl -0xffd(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xffc(%rbp)
	movzbl -0xffd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xffc(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe5e(%rbp)
	movzwl -0xe5e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x7c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1e5ab>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1e77c>
	movzbl -0xffe(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xffe(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e77c>
	movzbl -0xffe(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1e640>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1e697>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xffe(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e6f3>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7c0(%rbp)
	mov    -0x7c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1e77c>
	movzbl -0xffe(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xffe(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xffb(%rbp)
	movzbl -0xffb(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8bb>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5a6f2(%rip),%rax        # <_IO_stdin_used+0x130c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5a6e6(%rip),%rdx        # <_IO_stdin_used+0x130c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xffb(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1e7fc>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1e86c>
	test   %eax,%eax
	je     <context_execute_loop+0x1e7fc>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1e828>
	jmp    <context_execute_loop+0x1e86c>
	movzbl -0xffb(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e896>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1e896>
	movzbl -0xffb(%rbp),%edx
	mov    0x6c3b1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x59692(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1eccc>
	movzbl -0xffb(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1eccc>
	cmpb   $0x2,-0xffb(%rbp)
	jne    <context_execute_loop+0x1e8e6>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7b8(%rbp)
	jmp    <context_execute_loop+0x1e90b>
	movzbl -0xffb(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1eccc>
	movzbl -0xffb(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1eccc>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xffb(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1eccc>
	movzbl -0xffb(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xffa(%rbp)
	movzbl -0xffa(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1ea20>
	movzbl -0xffa(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1eab0>
	movzbl -0xffa(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xff9(%rbp)
	movzbl -0xffa(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0xff9(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe5c(%rbp)
	movzwl -0xe5c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x7b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1eafb>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1eccc>
	movzbl -0xffb(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0xffb(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1eccc>
	movzbl -0xffb(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1eb90>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1ebe7>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0xffb(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1ec43>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7b8(%rbp)
	mov    -0x7b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1eccc>
	movzbl -0xffb(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0xffb(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x7b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1ed17>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x7d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1ed62>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x7c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1edad>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x7b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	mov    %rax,-0x1f8(%rbp)
	mov    -0x7d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x1f0(%rbp)
	mov    -0x7c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x1e8(%rbp)
	cmpq   $0x1,-0x7c8(%rbp)
	je     <context_execute_loop+0x1ee22>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1e8(%rbp),%rax
	mov    %eax,%edi
	mov    -0x1f0(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    0x1b0(%rax),%rsi
	mov    -0x1198(%rbp),%rax
	mov    0x1a8(%rax),%rax
	mov    -0x1f8(%rbp),%rdx
	mov    %edi,%r8d
	mov    %rax,%rdi
	call   <bitstring_insert_integer>
	mov    %al,-0xff8(%rbp)
	movzbl -0xff8(%rbp),%eax
	xor    $0x1,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1eea7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    0x1b0(%rax),%rdx
	mov    -0x1f0(%rbp),%rax
	imul   -0x7c8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x1b0(%rax)
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x100e(%rbp)
	movzbl -0x100e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1ef3a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1efad>
	test   %eax,%eax
	je     <context_execute_loop+0x1ef3a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1ef5e>
	jmp    <context_execute_loop+0x1efad>
	movzbl -0x100e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa64(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1efd7>
	movzbl -0x100e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa64(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1efd7>
	movzbl -0x100e(%rbp),%edx
	mov    0x6bc70(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x58eb9(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x100d(%rbp)
	movzbl -0x100d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8c1>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x59ecb(%rip),%rax        # <_IO_stdin_used+0x1340>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x59ebf(%rip),%rdx        # <_IO_stdin_used+0x1340>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x100d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1f057>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1f0c5>
	test   %eax,%eax
	je     <context_execute_loop+0x1f057>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1f082>
	jmp    <context_execute_loop+0x1f0c5>
	movzbl -0x100d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f0ef>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f0ef>
	movzbl -0x100d(%rbp),%edx
	mov    0x6bb58(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x58e39(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1f51c>
	movzbl -0x100d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f51c>
	cmpb   $0x2,-0x100d(%rbp)
	jne    <context_execute_loop+0x1f13d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %eax,-0xc14(%rbp)
	jmp    <context_execute_loop+0x1f161>
	movzbl -0x100d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f51c>
	movzbl -0x100d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f51c>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x100d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f51c>
	movzbl -0x100d(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x100c(%rbp)
	movzbl -0x100c(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1f273>
	movzbl -0x100c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f302>
	movzbl -0x100c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x100b(%rbp)
	movzbl -0x100c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x100b(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe66(%rbp)
	movzwl -0xe66(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xc14(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1f34e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1f51c>
	movzbl -0x100d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x100d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f51c>
	movzbl -0x100d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1f3e2>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1f438>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x100d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f494>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %eax,-0xc14(%rbp)
	mov    -0xc14(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1f51c>
	movzbl -0x100d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x100d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %eax,-0xc14(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x100a(%rbp)
	movzbl -0x100a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1f56a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1f5e1>
	test   %eax,%eax
	je     <context_execute_loop+0x1f56a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1f58f>
	jmp    <context_execute_loop+0x1f5e1>
	movzbl -0x100a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x7b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f60b>
	movzbl -0x100a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x7b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f60b>
	movzbl -0x100a(%rbp),%edx
	mov    0x6b63c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x588bd(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1009(%rbp)
	movzbl -0x1009(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8c7>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x598cb(%rip),%rax        # <_IO_stdin_used+0x1374>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x598bf(%rip),%rdx        # <_IO_stdin_used+0x1374>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1009(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1f68b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1f6fb>
	test   %eax,%eax
	je     <context_execute_loop+0x1f68b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1f6b7>
	jmp    <context_execute_loop+0x1f6fb>
	movzbl -0x1009(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f725>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f725>
	movzbl -0x1009(%rbp),%edx
	mov    0x6b522(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x58803(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x1fb5b>
	movzbl -0x1009(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fb5b>
	cmpb   $0x2,-0x1009(%rbp)
	jne    <context_execute_loop+0x1f775>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7a8(%rbp)
	jmp    <context_execute_loop+0x1f79a>
	movzbl -0x1009(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fb5b>
	movzbl -0x1009(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fb5b>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1009(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fb5b>
	movzbl -0x1009(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1008(%rbp)
	movzbl -0x1008(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1f8af>
	movzbl -0x1008(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1f93f>
	movzbl -0x1008(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1007(%rbp)
	movzbl -0x1008(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1007(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe64(%rbp)
	movzwl -0xe64(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x7a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1f98a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1fb5b>
	movzbl -0x1009(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1009(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fb5b>
	movzbl -0x1009(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1fa1f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1fa76>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1009(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fad2>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7a8(%rbp)
	mov    -0x7a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x1fb5b>
	movzbl -0x1009(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1009(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1006(%rbp)
	movzbl -0x1006(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8cd>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x593af(%rip),%rax        # <_IO_stdin_used+0x13a8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x593a3(%rip),%rdx        # <_IO_stdin_used+0x13a8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1006(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x1fbdb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x1fc4b>
	test   %eax,%eax
	je     <context_execute_loop+0x1fbdb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x1fc07>
	jmp    <context_execute_loop+0x1fc4b>
	movzbl -0x1006(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fc75>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fc75>
	movzbl -0x1006(%rbp),%edx
	mov    0x6afd2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x582b3(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x200ab>
	movzbl -0x1006(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x200ab>
	cmpb   $0x2,-0x1006(%rbp)
	jne    <context_execute_loop+0x1fcc5>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x7a0(%rbp)
	jmp    <context_execute_loop+0x1fcea>
	movzbl -0x1006(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x200ab>
	movzbl -0x1006(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x200ab>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1006(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x200ab>
	movzbl -0x1006(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1005(%rbp)
	movzbl -0x1005(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x1fdff>
	movzbl -0x1005(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x1fe8f>
	movzbl -0x1005(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1004(%rbp)
	movzbl -0x1005(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1004(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe62(%rbp)
	movzwl -0xe62(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x7a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x1feda>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x200ab>
	movzbl -0x1006(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1006(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x200ab>
	movzbl -0x1006(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x1ff6f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x1ffc6>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1006(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x20022>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x7a0(%rbp)
	mov    -0x7a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x200ab>
	movzbl -0x1006(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1006(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x7a0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x7a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x200f6>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x7a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x20141>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	movq   $0x0,-0x798(%rbp)
	mov    -0xc14(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <context_execute_loop+0x201d9>
	mov    -0xc14(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_to_int>
	mov    -0x7b0(%rbp),%rdx
	imul   %rdx,%rax
	mov    %rax,-0x208(%rbp)
	mov    -0x208(%rbp),%rax
	and    $0x7,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x201ba>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x208(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %rax,-0x798(%rbp)
	jmp    <context_execute_loop+0x2022c>
	cmpl   $0x98b,-0xc14(%rbp)
	jne    <context_execute_loop+0x201fd>
	mov    -0x7a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x798(%rbp)
	jmp    <context_execute_loop+0x2022c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x7a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	cmp    %rax,-0x798(%rbp)
	jbe    <context_execute_loop+0x20273>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x7a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x200(%rbp)
	cmpq   $0x0,-0x200(%rbp)
	je     <context_execute_loop+0x202bc>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    0x1b0(%rax),%rax
	and    $0x7,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x202fb>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x798(%rbp),%rax
	mov    %eax,%ecx
	mov    -0x1198(%rbp),%rax
	mov    0x1b0(%rax),%rax
	mov    %eax,%esi
	mov    -0x1198(%rbp),%rax
	mov    0x1a8(%rax),%rax
	mov    -0x7a0(%rbp),%rdx
	mov    %rax,%rdi
	call   <term_bs_insert_binary>
	mov    %eax,-0xa60(%rbp)
	cmpl   $0x0,-0xa60(%rbp)
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x20378>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    0x1b0(%rax),%rdx
	mov    -0x798(%rbp),%rax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x1b0(%rax)
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xc10(%rbp)
	mov    -0xc10(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1010(%rbp)
	movzbl -0x1010(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x20405>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2046a>
	test   %eax,%eax
	je     <context_execute_loop+0x20405>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x20422>
	jmp    <context_execute_loop+0x2046a>
	movzbl -0x1010(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x790(%rbp)
	addl   $0x1,-0xc10(%rbp)
	jmp    <context_execute_loop+0x20494>
	movzbl -0x1010(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc10(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x790(%rbp)
	addl   $0x2,-0xc10(%rbp)
	jmp    <context_execute_loop+0x20494>
	movzbl -0x1010(%rbp),%edx
	mov    0x6a7b3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x57a34(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xc10(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x100f(%rbp)
	movzbl -0x100f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x204dc>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x20541>
	test   %eax,%eax
	je     <context_execute_loop+0x204dc>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x204f9>
	jmp    <context_execute_loop+0x20541>
	movzbl -0x100f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x788(%rbp)
	addl   $0x1,-0xc10(%rbp)
	jmp    <context_execute_loop+0x2056b>
	movzbl -0x100f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xc10(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x788(%rbp)
	addl   $0x2,-0xc10(%rbp)
	jmp    <context_execute_loop+0x2056b>
	movzbl -0x100f(%rbp),%edx
	mov    0x6a6dc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5795d(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0x1a8(%rax),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x205bd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x1198(%rbp),%rax
	mov    0x1b0(%rax),%rax
	and    $0x7,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x205fc>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	movq   $0x0,-0xa00(%rbp)
	mov    -0x788(%rbp),%rcx
	mov    -0x11a0(%rbp),%rax
	lea    -0xa00(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_get_str>
	mov    %rax,-0x210(%rbp)
	cmpq   $0x0,-0x210(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x20670>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x790(%rbp),%rbx
	mov    -0x1198(%rbp),%rax
	mov    0x1a8(%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x1b0(%rax),%rax
	shr    $0x3,%rax
	lea    (%rdx,%rax,1),%rcx
	mov    -0x210(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x1198(%rbp),%rax
	mov    0x1b0(%rax),%rdx
	mov    -0x790(%rbp),%rax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x1b0(%rax)
	mov    -0xc10(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1057(%rbp)
	movzbl -0x1057(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2074a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x207bd>
	test   %eax,%eax
	je     <context_execute_loop+0x2074a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2076e>
	jmp    <context_execute_loop+0x207bd>
	movzbl -0x1057(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc0c(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x207e7>
	movzbl -0x1057(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc0c(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x207e7>
	movzbl -0x1057(%rbp),%edx
	mov    0x6a460(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x576a9(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe00(%rbp),%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1056(%rbp)
	movzbl -0x1056(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8d3>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5874b(%rip),%rax        # <_IO_stdin_used+0x13dc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5873f(%rip),%rdx        # <_IO_stdin_used+0x13dc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1056(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x20873>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x208e3>
	test   %eax,%eax
	je     <context_execute_loop+0x20873>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2089f>
	jmp    <context_execute_loop+0x208e3>
	movzbl -0x1056(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2090d>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2090d>
	movzbl -0x1056(%rbp),%edx
	mov    0x6a33a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5761b(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x20d43>
	movzbl -0x1056(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20d43>
	cmpb   $0x2,-0x1056(%rbp)
	jne    <context_execute_loop+0x2095d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x780(%rbp)
	jmp    <context_execute_loop+0x20982>
	movzbl -0x1056(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20d43>
	movzbl -0x1056(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20d43>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1056(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20d43>
	movzbl -0x1056(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1055(%rbp)
	movzbl -0x1055(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x20a97>
	movzbl -0x1055(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20b27>
	movzbl -0x1055(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1054(%rbp)
	movzbl -0x1055(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1054(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe80(%rbp)
	movzwl -0xe80(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x780(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x20b72>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x20d43>
	movzbl -0x1056(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1056(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20d43>
	movzbl -0x1056(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x20c07>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x20c5e>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1056(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20cba>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x780(%rbp)
	mov    -0x780(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x20d43>
	movzbl -0x1056(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1056(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x780(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1053(%rbp)
	movzbl -0x1053(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8d9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5822f(%rip),%rax        # <_IO_stdin_used+0x1410>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x58223(%rip),%rdx        # <_IO_stdin_used+0x1410>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1053(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x20dc3>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x20e33>
	test   %eax,%eax
	je     <context_execute_loop+0x20dc3>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x20def>
	jmp    <context_execute_loop+0x20e33>
	movzbl -0x1053(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20e5d>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x20e5d>
	movzbl -0x1053(%rbp),%edx
	mov    0x69dea(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x570cb(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x21293>
	movzbl -0x1053(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x21293>
	cmpb   $0x2,-0x1053(%rbp)
	jne    <context_execute_loop+0x20ead>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x778(%rbp)
	jmp    <context_execute_loop+0x20ed2>
	movzbl -0x1053(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x21293>
	movzbl -0x1053(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x21293>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1053(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x21293>
	movzbl -0x1053(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1052(%rbp)
	movzbl -0x1052(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x20fe7>
	movzbl -0x1052(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x21077>
	movzbl -0x1052(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1051(%rbp)
	movzbl -0x1052(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1051(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe7e(%rbp)
	movzwl -0xe7e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x778(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x210c2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x21293>
	movzbl -0x1053(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1053(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x21293>
	movzbl -0x1053(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x21157>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x211ae>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1053(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2120a>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x778(%rbp)
	mov    -0x778(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x21293>
	movzbl -0x1053(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1053(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x778(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1050(%rbp)
	movzbl -0x1050(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8df>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x57d13(%rip),%rax        # <_IO_stdin_used+0x1444>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x57d07(%rip),%rdx        # <_IO_stdin_used+0x1444>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1050(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x21313>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x21383>
	test   %eax,%eax
	je     <context_execute_loop+0x21313>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2133f>
	jmp    <context_execute_loop+0x21383>
	movzbl -0x1050(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x213ad>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x213ad>
	movzbl -0x1050(%rbp),%edx
	mov    0x6989a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x56b7b(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x217e3>
	movzbl -0x1050(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x217e3>
	cmpb   $0x2,-0x1050(%rbp)
	jne    <context_execute_loop+0x213fd>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x770(%rbp)
	jmp    <context_execute_loop+0x21422>
	movzbl -0x1050(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x217e3>
	movzbl -0x1050(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x217e3>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1050(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x217e3>
	movzbl -0x1050(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x104f(%rbp)
	movzbl -0x104f(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x21537>
	movzbl -0x104f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x215c7>
	movzbl -0x104f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x104e(%rbp)
	movzbl -0x104f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x104e(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe7c(%rbp)
	movzwl -0xe7c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x770(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x21612>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x217e3>
	movzbl -0x1050(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1050(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x217e3>
	movzbl -0x1050(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x216a7>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x216fe>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1050(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2175a>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x770(%rbp)
	mov    -0x770(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x217e3>
	movzbl -0x1050(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1050(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x770(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x104d(%rbp)
	movzbl -0x104d(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x104c(%rbp)
	movzbl -0x104d(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x104b(%rbp)
	movzbl -0x104c(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x218ad>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d8e5>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x2184c>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x2187b>
	jmp    <context_execute_loop+0x3d8e5>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x104b(%rbp),%eax
	mov    %eax,-0xc08(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2192a>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x104b(%rbp),%eax
	mov    %eax,-0xc08(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2192a>
	movzbl -0x104d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x104d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc08(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x770(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %eax,-0xa7c(%rbp)
	mov    -0xa7c(%rbp),%eax
	add    $0x4,%eax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <context_execute_loop+0x2198e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x104a(%rbp)
	movzbl -0x104a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8eb>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5764c(%rip),%rax        # <_IO_stdin_used+0x1478>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x57640(%rip),%rdx        # <_IO_stdin_used+0x1478>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x104a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x21a0e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x21a7e>
	test   %eax,%eax
	je     <context_execute_loop+0x21a0e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x21a3a>
	jmp    <context_execute_loop+0x21a7e>
	movzbl -0x104a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21aa8>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21aa8>
	movzbl -0x104a(%rbp),%edx
	mov    0x6919f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x56480(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x21ede>
	movzbl -0x104a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21ede>
	cmpb   $0x2,-0x104a(%rbp)
	jne    <context_execute_loop+0x21af8>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x780(%rbp)
	jmp    <context_execute_loop+0x21b1d>
	movzbl -0x104a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21ede>
	movzbl -0x104a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21ede>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x104a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21ede>
	movzbl -0x104a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1049(%rbp)
	movzbl -0x1049(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x21c32>
	movzbl -0x1049(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21cc2>
	movzbl -0x1049(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1048(%rbp)
	movzbl -0x1049(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1048(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe7a(%rbp)
	movzwl -0xe7a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x780(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x21d0d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x21ede>
	movzbl -0x104a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x104a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21ede>
	movzbl -0x104a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x21da2>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x21df9>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x104a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x21e55>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x780(%rbp)
	mov    -0x780(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x21ede>
	movzbl -0x104a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x104a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x780(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x780(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	jne    <context_execute_loop+0x21f53>
	mov    -0x780(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	jne    <context_execute_loop+0x21f53>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc08(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x780(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xc0c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x21fa8>
	mov    -0x1198(%rbp),%rdx
	mov    -0xa7c(%rbp),%ecx
	mov    -0x780(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_alloc_bin_match_state>
	mov    %rax,-0x2d8(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc08(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x2d8(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xe00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	nop
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x1198(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <context_execute_loop+0x21ff4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x116e(%rbp)
	movzbl -0x116e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x22048>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x220bb>
	test   %eax,%eax
	je     <context_execute_loop+0x22048>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2206c>
	jmp    <context_execute_loop+0x220bb>
	movzbl -0x116e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xc04(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x220e5>
	movzbl -0x116e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc04(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x220e5>
	movzbl -0x116e(%rbp),%edx
	mov    0x68b62(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x55dab(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x116d(%rbp)
	movzbl -0x116d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8f1>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x56f29(%rip),%rax        # <_IO_stdin_used+0x14ac>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x56f1d(%rip),%rdx        # <_IO_stdin_used+0x14ac>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x116d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x22165>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x221d5>
	test   %eax,%eax
	je     <context_execute_loop+0x22165>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x22191>
	jmp    <context_execute_loop+0x221d5>
	movzbl -0x116d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x221ff>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x221ff>
	movzbl -0x116d(%rbp),%edx
	mov    0x68a48(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x55d29(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x22635>
	movzbl -0x116d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22635>
	cmpb   $0x2,-0x116d(%rbp)
	jne    <context_execute_loop+0x2224f>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x768(%rbp)
	jmp    <context_execute_loop+0x22274>
	movzbl -0x116d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22635>
	movzbl -0x116d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22635>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x116d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22635>
	movzbl -0x116d(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x116c(%rbp)
	movzbl -0x116c(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x22389>
	movzbl -0x116c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22419>
	movzbl -0x116c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x116b(%rbp)
	movzbl -0x116c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x116b(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xef8(%rbp)
	movzwl -0xef8(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x768(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x22464>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x22635>
	movzbl -0x116d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x116d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22635>
	movzbl -0x116d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x224f9>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x22550>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x116d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x225ac>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x768(%rbp)
	mov    -0x768(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x22635>
	movzbl -0x116d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x116d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x768(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x116a(%rbp)
	movzbl -0x116a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d8f7>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x56a0d(%rip),%rax        # <_IO_stdin_used+0x14e0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x56a01(%rip),%rdx        # <_IO_stdin_used+0x14e0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x116a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x226b5>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x22725>
	test   %eax,%eax
	je     <context_execute_loop+0x226b5>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x226e1>
	jmp    <context_execute_loop+0x22725>
	movzbl -0x116a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2274f>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2274f>
	movzbl -0x116a(%rbp),%edx
	mov    0x684f8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x557d9(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x22b85>
	movzbl -0x116a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22b85>
	cmpb   $0x2,-0x116a(%rbp)
	jne    <context_execute_loop+0x2279f>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x760(%rbp)
	jmp    <context_execute_loop+0x227c4>
	movzbl -0x116a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22b85>
	movzbl -0x116a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22b85>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x116a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22b85>
	movzbl -0x116a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1169(%rbp)
	movzbl -0x1169(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x228d9>
	movzbl -0x1169(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22969>
	movzbl -0x1169(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1168(%rbp)
	movzbl -0x1169(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1168(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xef6(%rbp)
	movzwl -0xef6(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x760(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x229b4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x22b85>
	movzbl -0x116a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x116a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22b85>
	movzbl -0x116a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x22a49>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x22aa0>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x116a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22afc>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x760(%rbp)
	mov    -0x760(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x22b85>
	movzbl -0x116a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x116a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x760(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1167(%rbp)
	movzbl -0x1167(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1166(%rbp)
	movzbl -0x1167(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1165(%rbp)
	movzbl -0x1166(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x22c4f>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d8fd>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x22bee>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x22c1d>
	jmp    <context_execute_loop+0x3d8fd>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1165(%rbp),%eax
	mov    %eax,-0xc00(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22ccc>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1165(%rbp),%eax
	mov    %eax,-0xc00(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22ccc>
	movzbl -0x1167(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1167(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xc00(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x768(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	jne    <context_execute_loop+0x22d41>
	mov    -0x768(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	jne    <context_execute_loop+0x22d41>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc00(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x768(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xc04(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x22d93>
	mov    -0x1198(%rbp),%rdx
	mov    -0x768(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_alloc_bin_match_state>
	mov    %rax,-0x518(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc00(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x518(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	nop
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1177(%rbp)
	movzbl -0x1177(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d903>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x562d4(%rip),%rax        # <_IO_stdin_used+0x1514>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x562c8(%rip),%rdx        # <_IO_stdin_used+0x1514>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1177(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x22e22>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x22e92>
	test   %eax,%eax
	je     <context_execute_loop+0x22e22>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x22e4e>
	jmp    <context_execute_loop+0x22e92>
	movzbl -0x1177(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22ebc>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x22ebc>
	movzbl -0x1177(%rbp),%edx
	mov    0x67d8b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x5506c(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x232f2>
	movzbl -0x1177(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x232f2>
	cmpb   $0x2,-0x1177(%rbp)
	jne    <context_execute_loop+0x22f0c>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x758(%rbp)
	jmp    <context_execute_loop+0x22f31>
	movzbl -0x1177(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x232f2>
	movzbl -0x1177(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x232f2>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1177(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x232f2>
	movzbl -0x1177(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1176(%rbp)
	movzbl -0x1176(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x23046>
	movzbl -0x1176(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x230d6>
	movzbl -0x1176(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1175(%rbp)
	movzbl -0x1176(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1175(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xefc(%rbp)
	movzwl -0xefc(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x758(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x23121>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x232f2>
	movzbl -0x1177(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1177(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x232f2>
	movzbl -0x1177(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x231b6>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2320d>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1177(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23269>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x758(%rbp)
	mov    -0x758(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x232f2>
	movzbl -0x1177(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1177(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x758(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1174(%rbp)
	movzbl -0x1174(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1173(%rbp)
	movzbl -0x1174(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1172(%rbp)
	movzbl -0x1173(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x233bc>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d909>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x2335b>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x2338a>
	jmp    <context_execute_loop+0x3d909>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1172(%rbp),%eax
	mov    %eax,-0xbfc(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23439>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1172(%rbp),%eax
	mov    %eax,-0xbfc(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23439>
	movzbl -0x1174(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1174(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbfc(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1171(%rbp)
	movzbl -0x1171(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d90f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x55c71(%rip),%rax        # <_IO_stdin_used+0x1548>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x55c65(%rip),%rdx        # <_IO_stdin_used+0x1548>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1171(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x234b9>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x23529>
	test   %eax,%eax
	je     <context_execute_loop+0x234b9>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x234e5>
	jmp    <context_execute_loop+0x23529>
	movzbl -0x1171(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23553>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23553>
	movzbl -0x1171(%rbp),%edx
	mov    0x676f4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x549d5(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x23989>
	movzbl -0x1171(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23989>
	cmpb   $0x2,-0x1171(%rbp)
	jne    <context_execute_loop+0x235a3>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x750(%rbp)
	jmp    <context_execute_loop+0x235c8>
	movzbl -0x1171(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23989>
	movzbl -0x1171(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23989>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1171(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23989>
	movzbl -0x1171(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1170(%rbp)
	movzbl -0x1170(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x236dd>
	movzbl -0x1170(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2376d>
	movzbl -0x1170(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x116f(%rbp)
	movzbl -0x1170(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x116f(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xefa(%rbp)
	movzwl -0xefa(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x750(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x237b8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x23989>
	movzbl -0x1171(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1171(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23989>
	movzbl -0x1171(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2384d>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x238a4>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1171(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x23900>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x750(%rbp)
	mov    -0x750(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x23989>
	movzbl -0x1171(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1171(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x750(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x758(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x239d4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x758(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x528(%rbp)
	mov    -0x528(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,-0x520(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xbfc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x520(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1164(%rbp)
	movzbl -0x1164(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d915>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x55694(%rip),%rax        # <_IO_stdin_used+0x157c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x55688(%rip),%rdx        # <_IO_stdin_used+0x157c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1164(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x23aca>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x23b3a>
	test   %eax,%eax
	je     <context_execute_loop+0x23aca>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x23af6>
	jmp    <context_execute_loop+0x23b3a>
	movzbl -0x1164(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23b64>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23b64>
	movzbl -0x1164(%rbp),%edx
	mov    0x670e3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x543c4(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x23f9a>
	movzbl -0x1164(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23f9a>
	cmpb   $0x2,-0x1164(%rbp)
	jne    <context_execute_loop+0x23bb4>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x748(%rbp)
	jmp    <context_execute_loop+0x23bd9>
	movzbl -0x1164(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23f9a>
	movzbl -0x1164(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23f9a>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1164(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23f9a>
	movzbl -0x1164(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1163(%rbp)
	movzbl -0x1163(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x23cee>
	movzbl -0x1163(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23d7e>
	movzbl -0x1163(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1162(%rbp)
	movzbl -0x1163(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1162(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xef4(%rbp)
	movzwl -0xef4(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x748(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x23dc9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x23f9a>
	movzbl -0x1164(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1164(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23f9a>
	movzbl -0x1164(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x23e5e>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x23eb5>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1164(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x23f11>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x748(%rbp)
	mov    -0x748(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x23f9a>
	movzbl -0x1164(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1164(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x748(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1161(%rbp)
	movzbl -0x1161(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1160(%rbp)
	movzbl -0x1161(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x115f(%rbp)
	movzbl -0x1160(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x24064>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d91b>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x24003>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x24032>
	jmp    <context_execute_loop+0x3d91b>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x115f(%rbp),%eax
	mov    %eax,-0xbf8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x240e1>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x115f(%rbp),%eax
	mov    %eax,-0xbf8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x240e1>
	movzbl -0x1161(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1161(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbf8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x115e(%rbp)
	movzbl -0x115e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d921>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x55031(%rip),%rax        # <_IO_stdin_used+0x15b0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x55025(%rip),%rdx        # <_IO_stdin_used+0x15b0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x115e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x24161>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x241d1>
	test   %eax,%eax
	je     <context_execute_loop+0x24161>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2418d>
	jmp    <context_execute_loop+0x241d1>
	movzbl -0x115e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x241fb>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x241fb>
	movzbl -0x115e(%rbp),%edx
	mov    0x66a4c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x53d2d(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x24631>
	movzbl -0x115e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x24631>
	cmpb   $0x2,-0x115e(%rbp)
	jne    <context_execute_loop+0x2424b>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x740(%rbp)
	jmp    <context_execute_loop+0x24270>
	movzbl -0x115e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x24631>
	movzbl -0x115e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x24631>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x115e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x24631>
	movzbl -0x115e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x115d(%rbp)
	movzbl -0x115d(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x24385>
	movzbl -0x115d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x24415>
	movzbl -0x115d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x115c(%rbp)
	movzbl -0x115d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x115c(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xef2(%rbp)
	movzwl -0xef2(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x740(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x24460>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x24631>
	movzbl -0x115e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x115e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x24631>
	movzbl -0x115e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x244f5>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2454c>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x115e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x245a8>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x740(%rbp)
	mov    -0x740(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x24631>
	movzbl -0x115e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x115e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x740(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x748(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2467c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x748(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x510(%rbp)
	mov    -0x748(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x508(%rbp)
	cmpq   $0x0,-0x510(%rbp)
	jne    <context_execute_loop+0x246da>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xbf8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x508(%rbp),%rax
	mov    %rax,(%rdx)
	jmp    <context_execute_loop+0x24d8e>
	mov    -0x510(%rbp),%rax
	and    $0x7,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x24712>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x510(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %rax,-0x500(%rbp)
	mov    -0x508(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x4f8(%rbp)
	mov    -0x4f8(%rbp),%rax
	sub    -0x500(%rbp),%rax
	mov    %rax,-0x4f0(%rbp)
	mov    -0x4f8(%rbp),%rax
	sub    -0x500(%rbp),%rax
	mov    %rax,%rdx
	mov    -0x508(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_sub_binary_heap_size>
	mov    %rax,-0x4e8(%rbp)
	mov    -0x4e8(%rbp),%rax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x247da>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x115b(%rbp)
	movzbl -0x115b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d927>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5496c(%rip),%rax        # <_IO_stdin_used+0x15e4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x54960(%rip),%rdx        # <_IO_stdin_used+0x15e4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x115b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2485a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x248ca>
	test   %eax,%eax
	je     <context_execute_loop+0x2485a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x24886>
	jmp    <context_execute_loop+0x248ca>
	movzbl -0x115b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x248f4>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x248f4>
	movzbl -0x115b(%rbp),%edx
	mov    0x66353(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x53634(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x24d2a>
	movzbl -0x115b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x24d2a>
	cmpb   $0x2,-0x115b(%rbp)
	jne    <context_execute_loop+0x24944>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x748(%rbp)
	jmp    <context_execute_loop+0x24969>
	movzbl -0x115b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x24d2a>
	movzbl -0x115b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x24d2a>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x115b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x24d2a>
	movzbl -0x115b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x115a(%rbp)
	movzbl -0x115a(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x24a7e>
	movzbl -0x115a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x24b0e>
	movzbl -0x115a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1159(%rbp)
	movzbl -0x115a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1159(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xef0(%rbp)
	movzwl -0xef0(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x748(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x24b59>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x24d2a>
	movzbl -0x115b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x115b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x24d2a>
	movzbl -0x115b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x24bee>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x24c45>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x115b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x24ca1>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x748(%rbp)
	mov    -0x748(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x24d2a>
	movzbl -0x115b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x115b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x748(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x748(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x508(%rbp)
	mov    -0x1198(%rbp),%rcx
	mov    -0x4f0(%rbp),%rdx
	mov    -0x500(%rbp),%rsi
	mov    -0x508(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_create_sub_binary>
	mov    %rax,-0x4e0(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xbf8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x4e0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xe00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x117d(%rbp)
	movzbl -0x117d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d92d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x543d1(%rip),%rax        # <_IO_stdin_used+0x1618>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x543c5(%rip),%rdx        # <_IO_stdin_used+0x1618>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x117d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x24e29>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x24e99>
	test   %eax,%eax
	je     <context_execute_loop+0x24e29>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x24e55>
	jmp    <context_execute_loop+0x24e99>
	movzbl -0x117d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x24ec3>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x24ec3>
	movzbl -0x117d(%rbp),%edx
	mov    0x65d84(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x53065(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x252f9>
	movzbl -0x117d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x252f9>
	cmpb   $0x2,-0x117d(%rbp)
	jne    <context_execute_loop+0x24f13>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x738(%rbp)
	jmp    <context_execute_loop+0x24f38>
	movzbl -0x117d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x252f9>
	movzbl -0x117d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x252f9>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x117d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x252f9>
	movzbl -0x117d(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x117c(%rbp)
	movzbl -0x117c(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2504d>
	movzbl -0x117c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x250dd>
	movzbl -0x117c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x117b(%rbp)
	movzbl -0x117c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x117b(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xf00(%rbp)
	movzwl -0xf00(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x738(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x25128>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x252f9>
	movzbl -0x117d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x117d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x252f9>
	movzbl -0x117d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x251bd>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x25214>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x117d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x25270>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x738(%rbp)
	mov    -0x738(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x252f9>
	movzbl -0x117d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x117d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x738(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x117a(%rbp)
	movzbl -0x117a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d933>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x53eb5(%rip),%rax        # <_IO_stdin_used+0x164c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x53ea9(%rip),%rdx        # <_IO_stdin_used+0x164c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x117a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x25379>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x253e9>
	test   %eax,%eax
	je     <context_execute_loop+0x25379>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x253a5>
	jmp    <context_execute_loop+0x253e9>
	movzbl -0x117a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x25413>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x25413>
	movzbl -0x117a(%rbp),%edx
	mov    0x65834(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x52b15(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x25849>
	movzbl -0x117a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x25849>
	cmpb   $0x2,-0x117a(%rbp)
	jne    <context_execute_loop+0x25463>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x730(%rbp)
	jmp    <context_execute_loop+0x25488>
	movzbl -0x117a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x25849>
	movzbl -0x117a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x25849>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x117a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x25849>
	movzbl -0x117a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1179(%rbp)
	movzbl -0x1179(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2559d>
	movzbl -0x1179(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2562d>
	movzbl -0x1179(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1178(%rbp)
	movzbl -0x1179(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1178(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xefe(%rbp)
	movzwl -0xefe(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x730(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x25678>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x25849>
	movzbl -0x117a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x117a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x25849>
	movzbl -0x117a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2570d>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x25764>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x117a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x257c0>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x730(%rbp)
	mov    -0x730(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x25849>
	movzbl -0x117a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x117a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x730(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x738(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x25894>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x730(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x258df>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x730(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x530(%rbp)
	mov    -0x530(%rbp),%rdx
	mov    -0x738(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_set_match_state_offset>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10c0(%rbp)
	movzbl -0x10c0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x25973>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x259e6>
	test   %eax,%eax
	je     <context_execute_loop+0x25973>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x25997>
	jmp    <context_execute_loop+0x259e6>
	movzbl -0x10c0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbf4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25a10>
	movzbl -0x10c0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbf4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25a10>
	movzbl -0x10c0(%rbp),%edx
	mov    0x65237(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x52480(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10bf(%rbp)
	movzbl -0x10bf(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d939>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x537d2(%rip),%rax        # <_IO_stdin_used+0x1680>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x537c6(%rip),%rdx        # <_IO_stdin_used+0x1680>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10bf(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x25a90>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x25b00>
	test   %eax,%eax
	je     <context_execute_loop+0x25a90>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x25abc>
	jmp    <context_execute_loop+0x25b00>
	movzbl -0x10bf(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25b2a>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25b2a>
	movzbl -0x10bf(%rbp),%edx
	mov    0x6511d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x523fe(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x25f60>
	movzbl -0x10bf(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25f60>
	cmpb   $0x2,-0x10bf(%rbp)
	jne    <context_execute_loop+0x25b7a>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x728(%rbp)
	jmp    <context_execute_loop+0x25b9f>
	movzbl -0x10bf(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25f60>
	movzbl -0x10bf(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25f60>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10bf(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25f60>
	movzbl -0x10bf(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10be(%rbp)
	movzbl -0x10be(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x25cb4>
	movzbl -0x10be(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25d44>
	movzbl -0x10be(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10bd(%rbp)
	movzbl -0x10be(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10bd(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeae(%rbp)
	movzwl -0xeae(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x728(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x25d8f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x25f60>
	movzbl -0x10bf(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10bf(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25f60>
	movzbl -0x10bf(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x25e24>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x25e7b>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10bf(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x25ed7>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x728(%rbp)
	mov    -0x728(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x25f60>
	movzbl -0x10bf(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10bf(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x728(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10bc(%rbp)
	movzbl -0x10bc(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x25fae>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x26025>
	test   %eax,%eax
	je     <context_execute_loop+0x25fae>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x25fd3>
	jmp    <context_execute_loop+0x26025>
	movzbl -0x10bc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x720(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2604f>
	movzbl -0x10bc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x720(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2604f>
	movzbl -0x10bc(%rbp),%edx
	mov    0x64bf8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x51e79(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10bb(%rbp)
	movzbl -0x10bb(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2609d>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x26114>
	test   %eax,%eax
	je     <context_execute_loop+0x2609d>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x260c2>
	jmp    <context_execute_loop+0x26114>
	movzbl -0x10bb(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x718(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2613e>
	movzbl -0x10bb(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x718(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2613e>
	movzbl -0x10bb(%rbp),%edx
	mov    0x64b09(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x51d8a(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x728(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x26189>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x720(%rbp),%rax
	and    $0x7,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x261c1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x720(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %rax,-0x3e8(%rbp)
	mov    -0x728(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x3e0(%rbp)
	mov    -0x728(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x3d8(%rbp)
	mov    -0x3e0(%rbp),%rax
	and    $0x7,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x26242>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x3e0(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %rax,-0x3d0(%rbp)
	movq   $0x0,-0xa00(%rbp)
	mov    -0x718(%rbp),%rcx
	mov    -0x11a0(%rbp),%rax
	lea    -0xa00(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_get_str>
	mov    %rax,-0x3c8(%rbp)
	cmpq   $0x0,-0x3c8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x262d3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x3e8(%rbp),%rax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%rax
	cmp    %rax,%rdx
	cmovbe %rdx,%rax
	mov    %rax,%rbx
	mov    -0x3d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    -0x3d0(%rbp),%rdx
	lea    (%rax,%rdx,1),%rcx
	mov    -0x3c8(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	je     <context_execute_loop+0x2634f>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbf4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x3e0(%rbp),%rdx
	mov    -0x720(%rbp),%rax
	add    %rax,%rdx
	mov    -0x728(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_set_match_state_offset>
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1093(%rbp)
	movzbl -0x1093(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d93f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x52e89(%rip),%rax        # <_IO_stdin_used+0x16b4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x52e7d(%rip),%rdx        # <_IO_stdin_used+0x16b4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1093(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2640d>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2647d>
	test   %eax,%eax
	je     <context_execute_loop+0x2640d>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x26439>
	jmp    <context_execute_loop+0x2647d>
	movzbl -0x1093(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x264a7>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x264a7>
	movzbl -0x1093(%rbp),%edx
	mov    0x647a0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x51a81(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x268dd>
	movzbl -0x1093(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x268dd>
	cmpb   $0x2,-0x1093(%rbp)
	jne    <context_execute_loop+0x264f7>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x710(%rbp)
	jmp    <context_execute_loop+0x2651c>
	movzbl -0x1093(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x268dd>
	movzbl -0x1093(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x268dd>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1093(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x268dd>
	movzbl -0x1093(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1092(%rbp)
	movzbl -0x1092(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x26631>
	movzbl -0x1092(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x266c1>
	movzbl -0x1092(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1091(%rbp)
	movzbl -0x1092(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1091(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe9e(%rbp)
	movzwl -0xe9e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x710(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2670c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x268dd>
	movzbl -0x1093(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1093(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x268dd>
	movzbl -0x1093(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x267a1>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x267f8>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1093(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x26854>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x710(%rbp)
	mov    -0x710(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x268dd>
	movzbl -0x1093(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1093(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x710(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1090(%rbp)
	movzbl -0x1090(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d945>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5296d(%rip),%rax        # <_IO_stdin_used+0x16e8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x52961(%rip),%rdx        # <_IO_stdin_used+0x16e8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1090(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2695d>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x269cd>
	test   %eax,%eax
	je     <context_execute_loop+0x2695d>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x26989>
	jmp    <context_execute_loop+0x269cd>
	movzbl -0x1090(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x269f7>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x269f7>
	movzbl -0x1090(%rbp),%edx
	mov    0x64250(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x51531(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x26e2d>
	movzbl -0x1090(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x26e2d>
	cmpb   $0x2,-0x1090(%rbp)
	jne    <context_execute_loop+0x26a47>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x708(%rbp)
	jmp    <context_execute_loop+0x26a6c>
	movzbl -0x1090(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x26e2d>
	movzbl -0x1090(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x26e2d>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1090(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x26e2d>
	movzbl -0x1090(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x108f(%rbp)
	movzbl -0x108f(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x26b81>
	movzbl -0x108f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x26c11>
	movzbl -0x108f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x108e(%rbp)
	movzbl -0x108f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x108e(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe9c(%rbp)
	movzwl -0xe9c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %ax,-0xe9c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x708(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x26c5c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x26e2d>
	movzbl -0x1090(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1090(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x26e2d>
	movzbl -0x1090(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x26cf1>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x26d48>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1090(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x26da4>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x708(%rbp)
	mov    -0x708(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x26e2d>
	movzbl -0x1090(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1090(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x708(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x710(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x26e78>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	cmpq   $0x9cb,-0x708(%rbp)
	jne    <context_execute_loop+0x26e96>
	mov    -0x710(%rbp),%rax
	mov    %rax,%rdi
	call   <term_match_state_save_start_offset>
	jmp    <context_execute_loop+0x26ee0>
	mov    -0x708(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <context_execute_loop+0x26edb>
	mov    -0x708(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x370(%rbp)
	mov    -0x370(%rbp),%rax
	mov    %eax,%edx
	mov    -0x710(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_match_state_save_offset>
	jmp    <context_execute_loop+0x26ee0>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1099(%rbp)
	movzbl -0x1099(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d94b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x52383(%rip),%rax        # <_IO_stdin_used+0x171c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x52377(%rip),%rdx        # <_IO_stdin_used+0x171c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1099(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x26f7b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x26feb>
	test   %eax,%eax
	je     <context_execute_loop+0x26f7b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x26fa7>
	jmp    <context_execute_loop+0x26feb>
	movzbl -0x1099(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27015>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27015>
	movzbl -0x1099(%rbp),%edx
	mov    0x63c32(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x50f13(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2744b>
	movzbl -0x1099(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2744b>
	cmpb   $0x2,-0x1099(%rbp)
	jne    <context_execute_loop+0x27065>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x700(%rbp)
	jmp    <context_execute_loop+0x2708a>
	movzbl -0x1099(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2744b>
	movzbl -0x1099(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2744b>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1099(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2744b>
	movzbl -0x1099(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1098(%rbp)
	movzbl -0x1098(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2719f>
	movzbl -0x1098(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2722f>
	movzbl -0x1098(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1097(%rbp)
	movzbl -0x1098(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1097(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xea2(%rbp)
	movzwl -0xea2(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x700(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2727a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2744b>
	movzbl -0x1099(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1099(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2744b>
	movzbl -0x1099(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2730f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x27366>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1099(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x273c2>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x700(%rbp)
	mov    -0x700(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2744b>
	movzbl -0x1099(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1099(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x700(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1096(%rbp)
	movzbl -0x1096(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d951>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x51e67(%rip),%rax        # <_IO_stdin_used+0x1750>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x51e5b(%rip),%rdx        # <_IO_stdin_used+0x1750>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1096(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x274cb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2753b>
	test   %eax,%eax
	je     <context_execute_loop+0x274cb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x274f7>
	jmp    <context_execute_loop+0x2753b>
	movzbl -0x1096(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27565>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27565>
	movzbl -0x1096(%rbp),%edx
	mov    0x636e2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x509c3(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2799b>
	movzbl -0x1096(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2799b>
	cmpb   $0x2,-0x1096(%rbp)
	jne    <context_execute_loop+0x275b5>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6f8(%rbp)
	jmp    <context_execute_loop+0x275da>
	movzbl -0x1096(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2799b>
	movzbl -0x1096(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2799b>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1096(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2799b>
	movzbl -0x1096(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1095(%rbp)
	movzbl -0x1095(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x276ef>
	movzbl -0x1095(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2777f>
	movzbl -0x1095(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1094(%rbp)
	movzbl -0x1095(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1094(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xea0(%rbp)
	movzwl -0xea0(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %ax,-0xea0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x6f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x277ca>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2799b>
	movzbl -0x1096(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1096(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2799b>
	movzbl -0x1096(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2785f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x278b6>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1096(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27912>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6f8(%rbp)
	mov    -0x6f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2799b>
	movzbl -0x1096(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1096(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6f8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x700(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x279e6>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	cmpq   $0x9cb,-0x6f8(%rbp)
	jne    <context_execute_loop+0x27a04>
	mov    -0x700(%rbp),%rax
	mov    %rax,%rdi
	call   <term_match_state_restore_start_offset>
	jmp    <context_execute_loop+0x27a4e>
	mov    -0x6f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <context_execute_loop+0x27a49>
	mov    -0x6f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x378(%rbp)
	mov    -0x378(%rbp),%rax
	mov    %eax,%edx
	mov    -0x700(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_match_state_restore_offset>
	jmp    <context_execute_loop+0x27a4e>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1088(%rbp)
	movzbl -0x1088(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x27ab3>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x27b26>
	test   %eax,%eax
	je     <context_execute_loop+0x27ab3>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x27ad7>
	jmp    <context_execute_loop+0x27b26>
	movzbl -0x1088(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbf0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27b50>
	movzbl -0x1088(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbf0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27b50>
	movzbl -0x1088(%rbp),%edx
	mov    0x630f7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x50340(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1087(%rbp)
	movzbl -0x1087(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d957>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x51796(%rip),%rax        # <_IO_stdin_used+0x1784>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5178a(%rip),%rdx        # <_IO_stdin_used+0x1784>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1087(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x27bd0>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x27c40>
	test   %eax,%eax
	je     <context_execute_loop+0x27bd0>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x27bfc>
	jmp    <context_execute_loop+0x27c40>
	movzbl -0x1087(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27c6a>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27c6a>
	movzbl -0x1087(%rbp),%edx
	mov    0x62fdd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x502be(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x280a0>
	movzbl -0x1087(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x280a0>
	cmpb   $0x2,-0x1087(%rbp)
	jne    <context_execute_loop+0x27cba>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6f0(%rbp)
	jmp    <context_execute_loop+0x27cdf>
	movzbl -0x1087(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x280a0>
	movzbl -0x1087(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x280a0>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1087(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x280a0>
	movzbl -0x1087(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1086(%rbp)
	movzbl -0x1086(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x27df4>
	movzbl -0x1086(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x27e84>
	movzbl -0x1086(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1085(%rbp)
	movzbl -0x1086(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1085(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe98(%rbp)
	movzwl -0xe98(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x6f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x27ecf>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x280a0>
	movzbl -0x1087(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1087(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x280a0>
	movzbl -0x1087(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x27f64>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x27fbb>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1087(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28017>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6f0(%rbp)
	mov    -0x6f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x280a0>
	movzbl -0x1087(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1087(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6f0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1084(%rbp)
	movzbl -0x1084(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d95d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x5127a(%rip),%rax        # <_IO_stdin_used+0x17b8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x5126e(%rip),%rdx        # <_IO_stdin_used+0x17b8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1084(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x28120>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x28190>
	test   %eax,%eax
	je     <context_execute_loop+0x28120>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2814c>
	jmp    <context_execute_loop+0x28190>
	movzbl -0x1084(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x281ba>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x281ba>
	movzbl -0x1084(%rbp),%edx
	mov    0x62a8d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4fd6e(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x285f0>
	movzbl -0x1084(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x285f0>
	cmpb   $0x2,-0x1084(%rbp)
	jne    <context_execute_loop+0x2820a>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6e8(%rbp)
	jmp    <context_execute_loop+0x2822f>
	movzbl -0x1084(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x285f0>
	movzbl -0x1084(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x285f0>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1084(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x285f0>
	movzbl -0x1084(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1083(%rbp)
	movzbl -0x1083(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x28344>
	movzbl -0x1083(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x283d4>
	movzbl -0x1083(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1082(%rbp)
	movzbl -0x1083(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1082(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe96(%rbp)
	movzwl -0xe96(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x6e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2841f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x285f0>
	movzbl -0x1084(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1084(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x285f0>
	movzbl -0x1084(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x284b4>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2850b>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1084(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28567>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6e8(%rbp)
	mov    -0x6e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x285f0>
	movzbl -0x1084(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1084(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6e8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1081(%rbp)
	movzbl -0x1081(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2863e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x286b5>
	test   %eax,%eax
	je     <context_execute_loop+0x2863e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x28663>
	jmp    <context_execute_loop+0x286b5>
	movzbl -0x1081(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x6e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x286df>
	movzbl -0x1081(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x6e0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x286df>
	movzbl -0x1081(%rbp),%edx
	mov    0x62568(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4f7e9(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1080(%rbp)
	movzbl -0x1080(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d963>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x50c6f(%rip),%rax        # <_IO_stdin_used+0x17ec>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x50c63(%rip),%rdx        # <_IO_stdin_used+0x17ec>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1080(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2875f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x287cf>
	test   %eax,%eax
	je     <context_execute_loop+0x2875f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2878b>
	jmp    <context_execute_loop+0x287cf>
	movzbl -0x1080(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x287f9>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x287f9>
	movzbl -0x1080(%rbp),%edx
	mov    0x6244e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4f72f(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x28c2f>
	movzbl -0x1080(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28c2f>
	cmpb   $0x2,-0x1080(%rbp)
	jne    <context_execute_loop+0x28849>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6d8(%rbp)
	jmp    <context_execute_loop+0x2886e>
	movzbl -0x1080(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28c2f>
	movzbl -0x1080(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28c2f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1080(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28c2f>
	movzbl -0x1080(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x107f(%rbp)
	movzbl -0x107f(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x28983>
	movzbl -0x107f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28a13>
	movzbl -0x107f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x107e(%rbp)
	movzbl -0x107f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x107e(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe94(%rbp)
	movzwl -0xe94(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x6d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x28a5e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x28c2f>
	movzbl -0x1080(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1080(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28c2f>
	movzbl -0x1080(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x28af3>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x28b4a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1080(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28ba6>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6d8(%rbp)
	mov    -0x6d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x28c2f>
	movzbl -0x1080(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1080(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6d8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x6f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x28c7a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x6e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x28cc5>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x6d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x28d10>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x6d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x358(%rbp)
	cmpq   $0x0,-0x358(%rbp)
	je     <context_execute_loop+0x28d59>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x6e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x350(%rbp)
	mov    -0x350(%rbp),%rax
	imul   -0x6e0(%rbp),%rax
	mov    %rax,-0x348(%rbp)
	mov    -0x6f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x340(%rbp)
	mov    -0x6f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x338(%rbp)
	mov    -0x340(%rbp),%rdx
	mov    -0x348(%rbp),%rax
	lea    (%rdx,%rax,1),%rbx
	mov    -0x338(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	shl    $0x3,%rax
	cmp    %rax,%rbx
	jbe    <context_execute_loop+0x28e0a>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbf0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x340(%rbp),%rdx
	mov    -0x348(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,%rdx
	mov    -0x6f0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_set_match_state_offset>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ba(%rbp)
	movzbl -0x10ba(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x28e95>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x28f08>
	test   %eax,%eax
	je     <context_execute_loop+0x28e95>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x28eb9>
	jmp    <context_execute_loop+0x28f08>
	movzbl -0x10ba(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbec(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28f32>
	movzbl -0x10ba(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbec(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x28f32>
	movzbl -0x10ba(%rbp),%edx
	mov    0x61d15(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4ef5e(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10b9(%rbp)
	movzbl -0x10b9(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d969>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x50450(%rip),%rax        # <_IO_stdin_used+0x1820>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x50444(%rip),%rdx        # <_IO_stdin_used+0x1820>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10b9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x28fb2>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x29022>
	test   %eax,%eax
	je     <context_execute_loop+0x28fb2>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x28fde>
	jmp    <context_execute_loop+0x29022>
	movzbl -0x10b9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2904c>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2904c>
	movzbl -0x10b9(%rbp),%edx
	mov    0x61bfb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4eedc(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x29482>
	movzbl -0x10b9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29482>
	cmpb   $0x2,-0x10b9(%rbp)
	jne    <context_execute_loop+0x2909c>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6d0(%rbp)
	jmp    <context_execute_loop+0x290c1>
	movzbl -0x10b9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29482>
	movzbl -0x10b9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29482>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10b9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29482>
	movzbl -0x10b9(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10b8(%rbp)
	movzbl -0x10b8(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x291d6>
	movzbl -0x10b8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29266>
	movzbl -0x10b8(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10b7(%rbp)
	movzbl -0x10b8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10b7(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeac(%rbp)
	movzwl -0xeac(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x6d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x292b1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x29482>
	movzbl -0x10b9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10b9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29482>
	movzbl -0x10b9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x29346>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2939d>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10b9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x293f9>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6d0(%rbp)
	mov    -0x6d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x29482>
	movzbl -0x10b9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10b9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6d0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10b6(%rbp)
	movzbl -0x10b6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x294d0>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x29547>
	test   %eax,%eax
	je     <context_execute_loop+0x294d0>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x294f5>
	jmp    <context_execute_loop+0x29547>
	movzbl -0x10b6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x6c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29571>
	movzbl -0x10b6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x6c8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29571>
	movzbl -0x10b6(%rbp),%edx
	mov    0x616d6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4e957(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x6d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x295bc>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x6d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x3c0(%rbp)
	mov    -0x6d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	shl    $0x3,%rax
	mov    -0x3c0(%rbp),%rdx
	sub    %rdx,%rax
	mov    -0x6c8(%rbp),%rcx
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	test   %rax,%rax
	je     <context_execute_loop+0x29635>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbec(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x108d(%rbp)
	movzbl -0x108d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2969a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2970d>
	test   %eax,%eax
	je     <context_execute_loop+0x2969a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x296be>
	jmp    <context_execute_loop+0x2970d>
	movzbl -0x108d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbe8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29737>
	movzbl -0x108d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbe8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29737>
	movzbl -0x108d(%rbp),%edx
	mov    0x61510(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4e759(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x108c(%rbp)
	movzbl -0x108c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d96f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4fc7f(%rip),%rax        # <_IO_stdin_used+0x1854>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4fc73(%rip),%rdx        # <_IO_stdin_used+0x1854>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x108c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x297b7>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x29827>
	test   %eax,%eax
	je     <context_execute_loop+0x297b7>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x297e3>
	jmp    <context_execute_loop+0x29827>
	movzbl -0x108c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29851>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29851>
	movzbl -0x108c(%rbp),%edx
	mov    0x613f6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4e6d7(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x29c87>
	movzbl -0x108c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29c87>
	cmpb   $0x2,-0x108c(%rbp)
	jne    <context_execute_loop+0x298a1>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6c0(%rbp)
	jmp    <context_execute_loop+0x298c6>
	movzbl -0x108c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29c87>
	movzbl -0x108c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29c87>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x108c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29c87>
	movzbl -0x108c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x108b(%rbp)
	movzbl -0x108b(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x299db>
	movzbl -0x108b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29a6b>
	movzbl -0x108b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x108a(%rbp)
	movzbl -0x108b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x108a(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe9a(%rbp)
	movzwl -0xe9a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x6c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x29ab6>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x29c87>
	movzbl -0x108c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x108c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29c87>
	movzbl -0x108c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x29b4b>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x29ba2>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x108c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29bfe>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6c0(%rbp)
	mov    -0x6c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x29c87>
	movzbl -0x108c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x108c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6c0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1089(%rbp)
	movzbl -0x1089(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x29cd5>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x29d4c>
	test   %eax,%eax
	je     <context_execute_loop+0x29cd5>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x29cfa>
	jmp    <context_execute_loop+0x29d4c>
	movzbl -0x1089(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x6b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29d76>
	movzbl -0x1089(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x6b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x29d76>
	movzbl -0x1089(%rbp),%edx
	mov    0x60ed1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4e152(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x6c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x29dc1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x6c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x368(%rbp)
	mov    -0x6c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x360(%rbp)
	mov    -0x368(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	shl    $0x3,%rax
	mov    -0x360(%rbp),%rcx
	sub    %rcx,%rax
	mov    %rax,%rdx
	mov    -0x6b8(%rbp),%rax
	mov    %eax,%eax
	cmp    %rax,%rdx
	je     <context_execute_loop+0x29e4a>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbe8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1069(%rbp)
	movzbl -0x1069(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x29eaf>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x29f22>
	test   %eax,%eax
	je     <context_execute_loop+0x29eaf>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x29ed3>
	jmp    <context_execute_loop+0x29f22>
	movzbl -0x1069(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbe4(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x29f4c>
	movzbl -0x1069(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbe4(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x29f4c>
	movzbl -0x1069(%rbp),%edx
	mov    0x60cfb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4df44(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1068(%rbp)
	movzbl -0x1068(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d975>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4f49e(%rip),%rax        # <_IO_stdin_used+0x1888>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4f492(%rip),%rdx        # <_IO_stdin_used+0x1888>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1068(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x29fcc>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2a03c>
	test   %eax,%eax
	je     <context_execute_loop+0x29fcc>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x29ff8>
	jmp    <context_execute_loop+0x2a03c>
	movzbl -0x1068(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a066>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a066>
	movzbl -0x1068(%rbp),%edx
	mov    0x60be1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4dec2(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2a49c>
	movzbl -0x1068(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a49c>
	cmpb   $0x2,-0x1068(%rbp)
	jne    <context_execute_loop+0x2a0b6>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6b0(%rbp)
	jmp    <context_execute_loop+0x2a0db>
	movzbl -0x1068(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a49c>
	movzbl -0x1068(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a49c>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1068(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a49c>
	movzbl -0x1068(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1067(%rbp)
	movzbl -0x1067(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2a1f0>
	movzbl -0x1067(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a280>
	movzbl -0x1067(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1066(%rbp)
	movzbl -0x1067(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1066(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe88(%rbp)
	movzwl -0xe88(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x6b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2a2cb>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2a49c>
	movzbl -0x1068(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1068(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a49c>
	movzbl -0x1068(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2a360>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2a3b7>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1068(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a413>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6b0(%rbp)
	mov    -0x6b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2a49c>
	movzbl -0x1068(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1068(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6b0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1065(%rbp)
	movzbl -0x1065(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d97b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4ef82(%rip),%rax        # <_IO_stdin_used+0x18bc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4ef76(%rip),%rdx        # <_IO_stdin_used+0x18bc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1065(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2a51c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2a58c>
	test   %eax,%eax
	je     <context_execute_loop+0x2a51c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2a548>
	jmp    <context_execute_loop+0x2a58c>
	movzbl -0x1065(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a5b6>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a5b6>
	movzbl -0x1065(%rbp),%edx
	mov    0x60691(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4d972(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2a9ec>
	movzbl -0x1065(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a9ec>
	cmpb   $0x2,-0x1065(%rbp)
	jne    <context_execute_loop+0x2a606>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6a8(%rbp)
	jmp    <context_execute_loop+0x2a62b>
	movzbl -0x1065(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a9ec>
	movzbl -0x1065(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a9ec>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1065(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a9ec>
	movzbl -0x1065(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1064(%rbp)
	movzbl -0x1064(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2a740>
	movzbl -0x1064(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a7d0>
	movzbl -0x1064(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1063(%rbp)
	movzbl -0x1064(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1063(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe86(%rbp)
	movzwl -0xe86(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x6a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2a81b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2a9ec>
	movzbl -0x1065(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1065(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a9ec>
	movzbl -0x1065(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2a8b0>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2a907>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1065(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2a963>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6a8(%rbp)
	mov    -0x6a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2a9ec>
	movzbl -0x1065(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1065(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6a8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1062(%rbp)
	movzbl -0x1062(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d981>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4ea66(%rip),%rax        # <_IO_stdin_used+0x18f0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4ea5a(%rip),%rdx        # <_IO_stdin_used+0x18f0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1062(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2aa6c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2aadc>
	test   %eax,%eax
	je     <context_execute_loop+0x2aa6c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2aa98>
	jmp    <context_execute_loop+0x2aadc>
	movzbl -0x1062(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ab06>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ab06>
	movzbl -0x1062(%rbp),%edx
	mov    0x60141(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4d422(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2af3c>
	movzbl -0x1062(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2af3c>
	cmpb   $0x2,-0x1062(%rbp)
	jne    <context_execute_loop+0x2ab56>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x6a0(%rbp)
	jmp    <context_execute_loop+0x2ab7b>
	movzbl -0x1062(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2af3c>
	movzbl -0x1062(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2af3c>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1062(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2af3c>
	movzbl -0x1062(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1061(%rbp)
	movzbl -0x1061(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2ac90>
	movzbl -0x1061(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ad20>
	movzbl -0x1061(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1060(%rbp)
	movzbl -0x1061(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1060(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe84(%rbp)
	movzwl -0xe84(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x6a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2ad6b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2af3c>
	movzbl -0x1062(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1062(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2af3c>
	movzbl -0x1062(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2ae00>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2ae57>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1062(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2aeb3>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x6a0(%rbp)
	mov    -0x6a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2af3c>
	movzbl -0x1062(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1062(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x6a0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x105f(%rbp)
	movzbl -0x105f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2af8a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2b001>
	test   %eax,%eax
	je     <context_execute_loop+0x2af8a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2afaf>
	jmp    <context_execute_loop+0x2b001>
	movzbl -0x105f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x698(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b02b>
	movzbl -0x105f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x698(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b02b>
	movzbl -0x105f(%rbp),%edx
	mov    0x5fc1c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4ce9d(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x105e(%rbp)
	movzbl -0x105e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d987>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4e45b(%rip),%rax        # <_IO_stdin_used+0x1924>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4e44f(%rip),%rdx        # <_IO_stdin_used+0x1924>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x105e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2b0ab>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2b11b>
	test   %eax,%eax
	je     <context_execute_loop+0x2b0ab>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2b0d7>
	jmp    <context_execute_loop+0x2b11b>
	movzbl -0x105e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b145>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b145>
	movzbl -0x105e(%rbp),%edx
	mov    0x5fb02(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4cde3(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2b57b>
	movzbl -0x105e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b57b>
	cmpb   $0x2,-0x105e(%rbp)
	jne    <context_execute_loop+0x2b195>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x690(%rbp)
	jmp    <context_execute_loop+0x2b1ba>
	movzbl -0x105e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b57b>
	movzbl -0x105e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b57b>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x105e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b57b>
	movzbl -0x105e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x105d(%rbp)
	movzbl -0x105d(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2b2cf>
	movzbl -0x105d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b35f>
	movzbl -0x105d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x105c(%rbp)
	movzbl -0x105d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x105c(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe82(%rbp)
	movzwl -0xe82(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x690(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2b3aa>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2b57b>
	movzbl -0x105e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x105e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b57b>
	movzbl -0x105e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2b43f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2b496>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x105e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b4f2>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x690(%rbp)
	mov    -0x690(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2b57b>
	movzbl -0x105e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x105e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x690(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x105b(%rbp)
	movzbl -0x105b(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x105a(%rbp)
	movzbl -0x105b(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1059(%rbp)
	movzbl -0x105a(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x2b645>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d98d>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x2b5e4>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x2b613>
	jmp    <context_execute_loop+0x3d98d>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0x1059(%rbp),%eax
	mov    %eax,-0xbe0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b6c2>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0x1059(%rbp),%eax
	mov    %eax,-0xbe0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2b6c2>
	movzbl -0x105b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0x105b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbe0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x6b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2b70d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x6a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2b758>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x690(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2b7a3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x6a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x308(%rbp)
	mov    -0x690(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x300(%rbp)
	mov    -0x308(%rbp),%rax
	imul   -0x698(%rbp),%rax
	mov    %rax,-0x2f8(%rbp)
	mov    -0x6b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x2f0(%rbp)
	mov    -0x6b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x2e8(%rbp)
	mov    -0x300(%rbp),%rax
	mov    %eax,%edi
	mov    -0x2e8(%rbp),%rsi
	lea    -0xa00(%rbp),%rcx
	mov    -0x2f8(%rbp),%rdx
	mov    -0x2f0(%rbp),%rax
	mov    %rcx,%r8
	mov    %edi,%ecx
	mov    %rax,%rdi
	call   <bitstring_extract_integer>
	mov    %al,-0x1058(%rbp)
	movzbl -0x1058(%rbp),%eax
	xor    $0x1,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2b88a>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbe4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x2e8(%rbp),%rdx
	mov    -0x2f8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x6b0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_set_match_state_offset>
	mov    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_make_maybe_boxed_int64>
	mov    %rax,-0x2e0(%rbp)
	mov    -0x2e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2b918>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xa08(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xbe0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x2e0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xe00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x107d(%rbp)
	movzbl -0x107d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2b9a0>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2ba13>
	test   %eax,%eax
	je     <context_execute_loop+0x2b9a0>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2b9c4>
	jmp    <context_execute_loop+0x2ba13>
	movzbl -0x107d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbdc(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ba3d>
	movzbl -0x107d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbdc(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ba3d>
	movzbl -0x107d(%rbp),%edx
	mov    0x5f20a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4c453(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe00(%rbp),%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x107c(%rbp)
	movzbl -0x107c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d993>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4da71(%rip),%rax        # <_IO_stdin_used+0x1958>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4da65(%rip),%rdx        # <_IO_stdin_used+0x1958>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x107c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2bac9>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2bb39>
	test   %eax,%eax
	je     <context_execute_loop+0x2bac9>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2baf5>
	jmp    <context_execute_loop+0x2bb39>
	movzbl -0x107c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bb63>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bb63>
	movzbl -0x107c(%rbp),%edx
	mov    0x5f0e4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4c3c5(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2bf99>
	movzbl -0x107c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bf99>
	cmpb   $0x2,-0x107c(%rbp)
	jne    <context_execute_loop+0x2bbb3>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x688(%rbp)
	jmp    <context_execute_loop+0x2bbd8>
	movzbl -0x107c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bf99>
	movzbl -0x107c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bf99>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x107c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bf99>
	movzbl -0x107c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x107b(%rbp)
	movzbl -0x107b(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2bced>
	movzbl -0x107b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bd7d>
	movzbl -0x107b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x107a(%rbp)
	movzbl -0x107b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x107a(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe92(%rbp)
	movzwl -0xe92(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x688(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2bdc8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2bf99>
	movzbl -0x107c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x107c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bf99>
	movzbl -0x107c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2be5d>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2beb4>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x107c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2bf10>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x688(%rbp)
	mov    -0x688(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2bf99>
	movzbl -0x107c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x107c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x688(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1079(%rbp)
	movzbl -0x1079(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d999>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4d555(%rip),%rax        # <_IO_stdin_used+0x198c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4d549(%rip),%rdx        # <_IO_stdin_used+0x198c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1079(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2c019>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2c089>
	test   %eax,%eax
	je     <context_execute_loop+0x2c019>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2c045>
	jmp    <context_execute_loop+0x2c089>
	movzbl -0x1079(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c0b3>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c0b3>
	movzbl -0x1079(%rbp),%edx
	mov    0x5eb94(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4be75(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2c4e9>
	movzbl -0x1079(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c4e9>
	cmpb   $0x2,-0x1079(%rbp)
	jne    <context_execute_loop+0x2c103>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x680(%rbp)
	jmp    <context_execute_loop+0x2c128>
	movzbl -0x1079(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c4e9>
	movzbl -0x1079(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c4e9>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1079(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c4e9>
	movzbl -0x1079(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1078(%rbp)
	movzbl -0x1078(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2c23d>
	movzbl -0x1078(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c2cd>
	movzbl -0x1078(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1077(%rbp)
	movzbl -0x1078(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1077(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe90(%rbp)
	movzwl -0xe90(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x680(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2c318>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2c4e9>
	movzbl -0x1079(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1079(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c4e9>
	movzbl -0x1079(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2c3ad>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2c404>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1079(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c460>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x680(%rbp)
	mov    -0x680(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2c4e9>
	movzbl -0x1079(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1079(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x680(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1076(%rbp)
	movzbl -0x1076(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d99f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4d039(%rip),%rax        # <_IO_stdin_used+0x19c0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4d02d(%rip),%rdx        # <_IO_stdin_used+0x19c0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1076(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2c569>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2c5d9>
	test   %eax,%eax
	je     <context_execute_loop+0x2c569>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2c595>
	jmp    <context_execute_loop+0x2c5d9>
	movzbl -0x1076(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c603>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c603>
	movzbl -0x1076(%rbp),%edx
	mov    0x5e644(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4b925(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2ca39>
	movzbl -0x1076(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ca39>
	cmpb   $0x2,-0x1076(%rbp)
	jne    <context_execute_loop+0x2c653>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x678(%rbp)
	jmp    <context_execute_loop+0x2c678>
	movzbl -0x1076(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ca39>
	movzbl -0x1076(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ca39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1076(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ca39>
	movzbl -0x1076(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1075(%rbp)
	movzbl -0x1075(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2c78d>
	movzbl -0x1075(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c81d>
	movzbl -0x1075(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1074(%rbp)
	movzbl -0x1075(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1074(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe8e(%rbp)
	movzwl -0xe8e(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x678(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2c868>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2ca39>
	movzbl -0x1076(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1076(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ca39>
	movzbl -0x1076(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2c8fd>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2c954>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1076(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2c9b0>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x678(%rbp)
	mov    -0x678(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2ca39>
	movzbl -0x1076(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1076(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x678(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1073(%rbp)
	movzbl -0x1073(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2ca87>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2cafe>
	test   %eax,%eax
	je     <context_execute_loop+0x2ca87>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2caac>
	jmp    <context_execute_loop+0x2cafe>
	movzbl -0x1073(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x670(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2cb28>
	movzbl -0x1073(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cltq   
	mov    %rax,-0x670(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2cb28>
	movzbl -0x1073(%rbp),%edx
	mov    0x5e11f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4b3a0(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1072(%rbp)
	movzbl -0x1072(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9a5>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4ca2e(%rip),%rax        # <_IO_stdin_used+0x19f4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4ca22(%rip),%rdx        # <_IO_stdin_used+0x19f4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1072(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2cba8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2cc18>
	test   %eax,%eax
	je     <context_execute_loop+0x2cba8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2cbd4>
	jmp    <context_execute_loop+0x2cc18>
	movzbl -0x1072(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2cc42>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2cc42>
	movzbl -0x1072(%rbp),%edx
	mov    0x5e005(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4b2e6(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2d078>
	movzbl -0x1072(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2d078>
	cmpb   $0x2,-0x1072(%rbp)
	jne    <context_execute_loop+0x2cc92>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x668(%rbp)
	jmp    <context_execute_loop+0x2ccb7>
	movzbl -0x1072(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2d078>
	movzbl -0x1072(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2d078>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1072(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2d078>
	movzbl -0x1072(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1071(%rbp)
	movzbl -0x1071(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2cdcc>
	movzbl -0x1071(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2ce5c>
	movzbl -0x1071(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1070(%rbp)
	movzbl -0x1071(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1070(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe8c(%rbp)
	movzwl -0xe8c(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x668(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2cea7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2d078>
	movzbl -0x1072(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1072(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2d078>
	movzbl -0x1072(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2cf3c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2cf93>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1072(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2cfef>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x668(%rbp)
	mov    -0x668(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2d078>
	movzbl -0x1072(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1072(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x668(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x106f(%rbp)
	movzbl -0x106f(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x106e(%rbp)
	movzbl -0x106f(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x106d(%rbp)
	movzbl -0x106e(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x2d142>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d9ab>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x2d0e1>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x2d110>
	jmp    <context_execute_loop+0x3d9ab>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x106d(%rbp),%eax
	mov    %eax,-0xbd8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2d1bf>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x106d(%rbp),%eax
	mov    %eax,-0xbd8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x2d1bf>
	movzbl -0x106f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x106f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbd8(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x688(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2d20a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x668(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2d255>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x688(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x330(%rbp)
	mov    -0x688(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x328(%rbp)
	cmpq   $0x8,-0x670(%rbp)
	je     <context_execute_loop+0x2d2b4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	movq   $0x0,-0x660(%rbp)
	mov    -0x678(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <context_execute_loop+0x2d2ea>
	mov    -0x678(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x660(%rbp)
	jmp    <context_execute_loop+0x2d360>
	cmpq   $0x98b,-0x678(%rbp)
	jne    <context_execute_loop+0x2d331>
	mov    -0x330(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,%rdx
	mov    -0x328(%rbp),%rax
	lea    0x7(%rax),%rcx
	test   %rax,%rax
	cmovs  %rcx,%rax
	sar    $0x3,%rax
	mov    %rax,%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	mov    %rax,-0x660(%rbp)
	jmp    <context_execute_loop+0x2d360>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x328(%rbp),%rax
	cqto   
	idivq  -0x670(%rbp)
	mov    %rdx,%rax
	test   %rax,%rax
	je     <context_execute_loop+0x2d3a7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x668(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x320(%rbp)
	cmpq   $0x0,-0x320(%rbp)
	je     <context_execute_loop+0x2d3f0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0x90b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x328(%rbp),%rax
	cqto   
	idivq  -0x670(%rbp)
	mov    %eax,%edx
	mov    -0x660(%rbp),%rax
	add    %edx,%eax
	mov    %eax,%ebx
	mov    -0x330(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	cmp    %rax,%rbx
	jbe    <context_execute_loop+0x2d450>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbdc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x660(%rbp),%rax
	imul   -0x670(%rbp),%rax
	mov    %rax,%rdx
	mov    -0x328(%rbp),%rax
	add    %rax,%rdx
	mov    -0x688(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_set_match_state_offset>
	mov    -0x660(%rbp),%rdx
	mov    -0x330(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_sub_binary_heap_size>
	mov    %rax,-0x318(%rbp)
	mov    -0x318(%rbp),%rax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2d4f4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x106c(%rbp)
	movzbl -0x106c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9b1>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4c096(%rip),%rax        # <_IO_stdin_used+0x1a28>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4c08a(%rip),%rdx        # <_IO_stdin_used+0x1a28>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x106c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2d574>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2d5e4>
	test   %eax,%eax
	je     <context_execute_loop+0x2d574>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2d5a0>
	jmp    <context_execute_loop+0x2d5e4>
	movzbl -0x106c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2d60e>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2d60e>
	movzbl -0x106c(%rbp),%edx
	mov    0x5d639(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4a91a(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2da44>
	movzbl -0x106c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2da44>
	cmpb   $0x2,-0x106c(%rbp)
	jne    <context_execute_loop+0x2d65e>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x688(%rbp)
	jmp    <context_execute_loop+0x2d683>
	movzbl -0x106c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2da44>
	movzbl -0x106c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2da44>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x106c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2da44>
	movzbl -0x106c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x106b(%rbp)
	movzbl -0x106b(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2d798>
	movzbl -0x106b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2d828>
	movzbl -0x106b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x106a(%rbp)
	movzbl -0x106b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x106a(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe8a(%rbp)
	movzwl -0xe8a(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x688(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2d873>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2da44>
	movzbl -0x106c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x106c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2da44>
	movzbl -0x106c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2d908>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2d95f>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x106c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2d9bb>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x688(%rbp)
	mov    -0x688(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2da44>
	movzbl -0x106c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x106c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x688(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x688(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x330(%rbp)
	mov    -0x660(%rbp),%rsi
	mov    -0x328(%rbp),%rax
	cqto   
	idivq  -0x670(%rbp)
	mov    %rax,%rdi
	mov    -0x1198(%rbp),%rdx
	mov    -0x330(%rbp),%rax
	mov    %rdx,%rcx
	mov    %rsi,%rdx
	mov    %rdi,%rsi
	mov    %rax,%rdi
	call   <term_maybe_create_sub_binary>
	mov    %rax,-0x310(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xbd8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x310(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xe00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xbd4(%rbp)
	mov    -0xbd4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10b5(%rbp)
	movzbl -0x10b5(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x10b4(%rbp)
	movzbl -0x10b5(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x10b3(%rbp)
	movzbl -0x10b4(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x2db90>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d9b7>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x2db3f>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x2db66>
	jmp    <context_execute_loop+0x3d9b7>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10b3(%rbp),%eax
	mov    %eax,-0xbd0(%rbp)
	addl   $0x1,-0xbd4(%rbp)
	jmp    <context_execute_loop+0x2dc03>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10b3(%rbp),%eax
	mov    %eax,-0xbd0(%rbp)
	addl   $0x1,-0xbd4(%rbp)
	jmp    <context_execute_loop+0x2dc03>
	movzbl -0x10b5(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10b5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xbd4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xbd0(%rbp)
	addl   $0x2,-0xbd4(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xbd0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x3b8(%rbp)
	mov    -0x3b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	je     <context_execute_loop+0x2ddb3>
	mov    -0x3b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_offset>
	mov    %rax,-0x3b0(%rbp)
	cmpq   $0x0,-0x3b0(%rbp)
	jne    <context_execute_loop+0x2dc78>
	mov    -0x3b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x658(%rbp)
	jmp    <context_execute_loop+0x2ddc1>
	mov    -0x3b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x3a8(%rbp)
	mov    -0x3a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,%ecx
	mov    -0x3b0(%rbp),%rax
	lea    0x7(%rax),%rdx
	test   %rax,%rax
	cmovs  %rdx,%rax
	sar    $0x3,%rax
	mov    %eax,%edx
	mov    %ecx,%eax
	sub    %edx,%eax
	mov    %eax,-0xa88(%rbp)
	mov    -0xa88(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x3a8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_sub_binary_heap_size>
	mov    %rax,-0x3a0(%rbp)
	mov    -0x3a0(%rbp),%rax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2dd39>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xbd0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x3b8(%rbp)
	mov    -0x3b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x3a8(%rbp)
	mov    -0xa88(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x3b0(%rbp),%rax
	lea    0x7(%rax),%rcx
	test   %rax,%rax
	cmovs  %rcx,%rax
	sar    $0x3,%rax
	mov    %rax,%rsi
	mov    -0x1198(%rbp),%rcx
	mov    -0x3a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_create_sub_binary>
	mov    %rax,-0x658(%rbp)
	jmp    <context_execute_loop+0x2ddc1>
	mov    -0x3b8(%rbp),%rax
	mov    %rax,-0x658(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xbd0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x658(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xbd4(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xbcc(%rbp)
	mov    -0xbcc(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x103c(%rbp)
	movzbl -0x103c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2de47>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2dea8>
	test   %eax,%eax
	je     <context_execute_loop+0x2de47>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2de63>
	jmp    <context_execute_loop+0x2dea8>
	movzbl -0x103c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbc8(%rbp)
	addl   $0x1,-0xbcc(%rbp)
	jmp    <context_execute_loop+0x2ded2>
	movzbl -0x103c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xbcc(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xbc8(%rbp)
	addl   $0x2,-0xbcc(%rbp)
	jmp    <context_execute_loop+0x2ded2>
	movzbl -0x103c(%rbp),%edx
	mov    0x5cd75(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x49ff6(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    -0xbc8(%rbp),%edx
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x288(%rbp)
	mov    -0xbc8(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x280(%rbp)
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2e013>
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x260(%rbp)
	mov    -0x260(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x260(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x1b7>
	mov    -0xbcc(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	mov    -0x288(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x2e057>
	mov    -0x280(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2e086>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x288(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x278(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x280(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x270(%rbp)
	lea    -0xa00(%rbp),%rdi
	mov    -0xbc8(%rbp),%ecx
	mov    -0x270(%rbp),%rdx
	mov    -0x278(%rbp),%rsi
	mov    -0x1198(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <maybe_call_native>
	test   %al,%al
	je     <context_execute_loop+0x2e134>
	mov    -0xa00(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da74>
	mov    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x58(%rax)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x278(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_get_module>
	mov    %rax,-0x268(%rbp)
	cmpq   $0x0,-0x268(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da77>
	mov    -0xbc8(%rbp),%edx
	mov    -0x270(%rbp),%rcx
	mov    -0x268(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_search_exported_function>
	mov    %eax,-0xa70(%rbp)
	cmpl   $0x0,-0xa70(%rbp)
	je     <context_execute_loop+0x3da7a>
	mov    -0x11a0(%rbp),%rax
	mov    0x68(%rax),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	mov    %eax,%esi
	mov    %edx,%edi
	call   <module_address>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x110(%rdx)
	mov    -0x268(%rbp),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xa70(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xbc4(%rbp)
	mov    -0xbc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x103e(%rbp)
	movzbl -0x103e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2e272>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2e2d3>
	test   %eax,%eax
	je     <context_execute_loop+0x2e272>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2e28e>
	jmp    <context_execute_loop+0x2e2d3>
	movzbl -0x103e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbc0(%rbp)
	addl   $0x1,-0xbc4(%rbp)
	jmp    <context_execute_loop+0x2e2fd>
	movzbl -0x103e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xbc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xbc0(%rbp)
	addl   $0x2,-0xbc4(%rbp)
	jmp    <context_execute_loop+0x2e2fd>
	movzbl -0x103e(%rbp),%edx
	mov    0x5c94a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x49bcb(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xbc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x103d(%rbp)
	movzbl -0x103d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2e345>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2e3a6>
	test   %eax,%eax
	je     <context_execute_loop+0x2e345>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2e361>
	jmp    <context_execute_loop+0x2e3a6>
	movzbl -0x103d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbbc(%rbp)
	addl   $0x1,-0xbc4(%rbp)
	jmp    <context_execute_loop+0x2e3d0>
	movzbl -0x103d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xbc4(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xbbc(%rbp)
	addl   $0x2,-0xbc4(%rbp)
	jmp    <context_execute_loop+0x2e3d0>
	movzbl -0x103d(%rbp),%edx
	mov    0x5c877(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x49af8(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    -0xbc0(%rbp),%edx
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x2b8(%rbp)
	mov    -0xbc0(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x2b0(%rbp)
	subl   $0x1,-0xdf8(%rbp)
	cmpl   $0x0,-0xdf8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2e511>
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x1198(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x118(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_next>
	mov    %rax,-0x290(%rbp)
	mov    -0x290(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x290(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x1b7>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xbbc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x110(%rax)
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xbbc(%rbp),%eax
	cltq   
	add    $0x1,%rax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	mov    -0x2b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x2e5a6>
	mov    -0x2b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2e5d5>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x2b8(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x2a8(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x2b0(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x2a0(%rbp)
	lea    -0xa00(%rbp),%rdi
	mov    -0xbc0(%rbp),%ecx
	mov    -0x2a0(%rbp),%rdx
	mov    -0x2a8(%rbp),%rsi
	mov    -0x1198(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <maybe_call_native>
	test   %al,%al
	je     <context_execute_loop+0x2e6eb>
	mov    -0xa00(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da7d>
	mov    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0x58(%rax)
	mov    -0x11a0(%rbp),%rax
	mov    (%rax),%rax
	mov    0x68(%rax),%rdx
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	shr    $0x18,%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x110(%rax),%rax
	shr    $0x2,%rax
	and    $0x3fffff,%eax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x2a8(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_get_module>
	mov    %rax,-0x298(%rbp)
	cmpq   $0x0,-0x298(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da80>
	mov    -0xbc0(%rbp),%edx
	mov    -0x2a0(%rbp),%rcx
	mov    -0x298(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_search_exported_function>
	mov    %eax,-0xa74(%rbp)
	cmpl   $0x0,-0xa74(%rbp)
	je     <context_execute_loop+0x3da83>
	mov    -0x298(%rbp),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xa74(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1042(%rbp)
	movzbl -0x1042(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2e802>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2e875>
	test   %eax,%eax
	je     <context_execute_loop+0x2e802>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2e826>
	jmp    <context_execute_loop+0x2e875>
	movzbl -0x1042(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbb8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2e89f>
	movzbl -0x1042(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbb8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2e89f>
	movzbl -0x1042(%rbp),%edx
	mov    0x5c3a8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x495f1(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1041(%rbp)
	movzbl -0x1041(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9ba>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4ad1f(%rip),%rax        # <_IO_stdin_used+0x1a5c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4ad13(%rip),%rdx        # <_IO_stdin_used+0x1a5c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1041(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2e91f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2e98f>
	test   %eax,%eax
	je     <context_execute_loop+0x2e91f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2e94b>
	jmp    <context_execute_loop+0x2e98f>
	movzbl -0x1041(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2e9b9>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2e9b9>
	movzbl -0x1041(%rbp),%edx
	mov    0x5c28e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4956f(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2edef>
	movzbl -0x1041(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2edef>
	cmpb   $0x2,-0x1041(%rbp)
	jne    <context_execute_loop+0x2ea09>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x650(%rbp)
	jmp    <context_execute_loop+0x2ea2e>
	movzbl -0x1041(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2edef>
	movzbl -0x1041(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2edef>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1041(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2edef>
	movzbl -0x1041(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1040(%rbp)
	movzbl -0x1040(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2eb43>
	movzbl -0x1040(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2ebd3>
	movzbl -0x1040(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x103f(%rbp)
	movzbl -0x1040(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x103f(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe76(%rbp)
	movzwl -0xe76(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x650(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2ec1e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2edef>
	movzbl -0x1041(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1041(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2edef>
	movzbl -0x1041(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2ecb3>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2ed0a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1041(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x2ed66>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x650(%rbp)
	mov    -0x650(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2edef>
	movzbl -0x1041(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1041(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x650(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	cmpq   $0x4b,-0x650(%rbp)
	je     <context_execute_loop+0x2ee03>
	cmpq   $0xb,-0x650(%rbp)
	jne    <context_execute_loop+0x2ee11>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x2ee3c>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbb8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	nop
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1047(%rbp)
	movzbl -0x1047(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2ee95>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2ef08>
	test   %eax,%eax
	je     <context_execute_loop+0x2ee95>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2eeb9>
	jmp    <context_execute_loop+0x2ef08>
	movzbl -0x1047(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbb4(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2ef32>
	movzbl -0x1047(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbb4(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2ef32>
	movzbl -0x1047(%rbp),%edx
	mov    0x5bd15(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x48f5e(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1046(%rbp)
	movzbl -0x1046(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9bd>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4a6c0(%rip),%rax        # <_IO_stdin_used+0x1a90>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4a6b4(%rip),%rdx        # <_IO_stdin_used+0x1a90>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1046(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2efb2>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2f022>
	test   %eax,%eax
	je     <context_execute_loop+0x2efb2>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2efde>
	jmp    <context_execute_loop+0x2f022>
	movzbl -0x1046(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f04c>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f04c>
	movzbl -0x1046(%rbp),%edx
	mov    0x5bbfb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x48edc(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2f482>
	movzbl -0x1046(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f482>
	cmpb   $0x2,-0x1046(%rbp)
	jne    <context_execute_loop+0x2f09c>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x648(%rbp)
	jmp    <context_execute_loop+0x2f0c1>
	movzbl -0x1046(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f482>
	movzbl -0x1046(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f482>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1046(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f482>
	movzbl -0x1046(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1045(%rbp)
	movzbl -0x1045(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2f1d6>
	movzbl -0x1045(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f266>
	movzbl -0x1045(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1044(%rbp)
	movzbl -0x1045(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1044(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xe78(%rbp)
	movzwl -0xe78(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x648(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2f2b1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2f482>
	movzbl -0x1046(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1046(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f482>
	movzbl -0x1046(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2f346>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2f39d>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1046(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f3f9>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe04(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe04(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x648(%rbp)
	mov    -0x648(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2f482>
	movzbl -0x1046(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1046(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x648(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1043(%rbp)
	movzbl -0x1043(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2f4cc>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2f53f>
	test   %eax,%eax
	je     <context_execute_loop+0x2f4cc>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2f4f0>
	jmp    <context_execute_loop+0x2f53f>
	movzbl -0x1043(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xbb0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f569>
	movzbl -0x1043(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xbb0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x2f569>
	movzbl -0x1043(%rbp),%edx
	mov    0x5b6de(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4895f(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x648(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_function>
	test   %eax,%eax
	je     <context_execute_loop+0x2f695>
	mov    -0x648(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x2d0(%rbp)
	mov    -0x2d0(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,-0x2c8(%rbp)
	mov    -0x2d0(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	mov    %rax,-0x2c0(%rbp)
	mov    -0x2c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <context_execute_loop+0x2f5f1>
	mov    -0x2d0(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %eax,-0xbac(%rbp)
	jmp    <context_execute_loop+0x2f647>
	mov    -0x2c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int32>
	mov    %eax,-0xa78(%rbp)
	mov    -0xa78(%rbp),%esi
	lea    -0xa00(%rbp),%rdi
	lea    -0xa08(%rbp),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x2c8(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <module_get_fun>
	mov    -0xa08(%rbp),%eax
	mov    -0xa00(%rbp),%edx
	sub    %edx,%eax
	mov    %eax,-0xbac(%rbp)
	mov    -0xbb0(%rbp),%eax
	cmp    -0xbac(%rbp),%eax
	jne    <context_execute_loop+0x2f666>
	mov    -0xe04(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbb4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xbb4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10a2(%rbp)
	movzbl -0x10a2(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2f718>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2f78b>
	test   %eax,%eax
	je     <context_execute_loop+0x2f718>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2f73c>
	jmp    <context_execute_loop+0x2f78b>
	movzbl -0x10a2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa80(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2f7b5>
	movzbl -0x10a2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa80(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2f7b5>
	movzbl -0x10a2(%rbp),%edx
	mov    0x5b492(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x486db(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10a1(%rbp)
	movzbl -0x10a1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2f7ff>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2f872>
	test   %eax,%eax
	je     <context_execute_loop+0x2f7ff>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2f823>
	jmp    <context_execute_loop+0x2f872>
	movzbl -0x10a1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xba8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2f89c>
	movzbl -0x10a1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xba8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2f89c>
	movzbl -0x10a1(%rbp),%edx
	mov    0x5b3ab(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4862c(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10a0(%rbp)
	movzbl -0x10a0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2f8e6>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2f959>
	test   %eax,%eax
	je     <context_execute_loop+0x2f8e6>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2f90a>
	jmp    <context_execute_loop+0x2f959>
	movzbl -0x10a0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xba4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2f983>
	movzbl -0x10a0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xba4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2f983>
	movzbl -0x10a0(%rbp),%edx
	mov    0x5b2c4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x48545(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x109f(%rbp)
	movzbl -0x109f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9c0>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x49ca3(%rip),%rax        # <_IO_stdin_used+0x1ac4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x49c97(%rip),%rdx        # <_IO_stdin_used+0x1ac4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x109f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x2fa03>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x2fa73>
	test   %eax,%eax
	je     <context_execute_loop+0x2fa03>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x2fa2f>
	jmp    <context_execute_loop+0x2fa73>
	movzbl -0x109f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fa9d>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fa9d>
	movzbl -0x109f(%rbp),%edx
	mov    0x5b1aa(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4848b(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x2fed3>
	movzbl -0x109f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fed3>
	cmpb   $0x2,-0x109f(%rbp)
	jne    <context_execute_loop+0x2faed>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x640(%rbp)
	jmp    <context_execute_loop+0x2fb12>
	movzbl -0x109f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fed3>
	movzbl -0x109f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fed3>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x109f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fed3>
	movzbl -0x109f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x109e(%rbp)
	movzbl -0x109e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x2fc27>
	movzbl -0x109e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fcb7>
	movzbl -0x109e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x109d(%rbp)
	movzbl -0x109e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x109d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xea4(%rbp)
	movzwl -0xea4(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x640(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x2fd02>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2fed3>
	movzbl -0x109f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x109f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fed3>
	movzbl -0x109f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x2fd97>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x2fdee>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x109f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x2fe4a>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x640(%rbp)
	mov    -0x640(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x2fed3>
	movzbl -0x109f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x109f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x640(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x109c(%rbp)
	movzbl -0x109c(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x109b(%rbp)
	movzbl -0x109c(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x109a(%rbp)
	movzbl -0x109b(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x2ff9d>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d9c3>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x2ff3c>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x2ff6b>
	jmp    <context_execute_loop+0x3d9c3>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x109a(%rbp),%eax
	mov    %eax,-0xba0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3001a>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x109a(%rbp),%eax
	mov    %eax,-0xba0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3001a>
	movzbl -0x109c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x109c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xba0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xba4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x388(%rbp)
	mov    -0x640(%rbp),%rdx
	mov    -0xba8(%rbp),%ecx
	mov    -0x1198(%rbp),%rax
	mov    -0x388(%rbp),%r8
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   *%r8
	mov    %rax,-0x380(%rbp)
	mov    -0x380(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da86>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xba0(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x380(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ae(%rbp)
	movzbl -0x10ae(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x30110>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x30183>
	test   %eax,%eax
	je     <context_execute_loop+0x30110>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x30134>
	jmp    <context_execute_loop+0x30183>
	movzbl -0x10ae(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa84(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x301ad>
	movzbl -0x10ae(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xa84(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x301ad>
	movzbl -0x10ae(%rbp),%edx
	mov    0x5aa9a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x47ce3(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ad(%rbp)
	movzbl -0x10ad(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x301f7>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3026a>
	test   %eax,%eax
	je     <context_execute_loop+0x301f7>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3021b>
	jmp    <context_execute_loop+0x3026a>
	movzbl -0x10ad(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb9c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30294>
	movzbl -0x10ad(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb9c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30294>
	movzbl -0x10ad(%rbp),%edx
	mov    0x5a9b3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x47c34(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ac(%rbp)
	movzbl -0x10ac(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x302de>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x30351>
	test   %eax,%eax
	je     <context_execute_loop+0x302de>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x30302>
	jmp    <context_execute_loop+0x30351>
	movzbl -0x10ac(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb98(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3037b>
	movzbl -0x10ac(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb98(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3037b>
	movzbl -0x10ac(%rbp),%edx
	mov    0x5a8cc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x47b4d(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ab(%rbp)
	movzbl -0x10ab(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9c6>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x492df(%rip),%rax        # <_IO_stdin_used+0x1af8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x492d3(%rip),%rdx        # <_IO_stdin_used+0x1af8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10ab(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x303fb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3046b>
	test   %eax,%eax
	je     <context_execute_loop+0x303fb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x30427>
	jmp    <context_execute_loop+0x3046b>
	movzbl -0x10ab(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30495>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30495>
	movzbl -0x10ab(%rbp),%edx
	mov    0x5a7b2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x47a93(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x308cb>
	movzbl -0x10ab(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x308cb>
	cmpb   $0x2,-0x10ab(%rbp)
	jne    <context_execute_loop+0x304e5>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x638(%rbp)
	jmp    <context_execute_loop+0x3050a>
	movzbl -0x10ab(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x308cb>
	movzbl -0x10ab(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x308cb>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10ab(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x308cb>
	movzbl -0x10ab(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10aa(%rbp)
	movzbl -0x10aa(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3061f>
	movzbl -0x10aa(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x306af>
	movzbl -0x10aa(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10a9(%rbp)
	movzbl -0x10aa(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10a9(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xea8(%rbp)
	movzwl -0xea8(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x638(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x306fa>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x308cb>
	movzbl -0x10ab(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10ab(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x308cb>
	movzbl -0x10ab(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3078f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x307e6>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10ab(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30842>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x638(%rbp)
	mov    -0x638(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x308cb>
	movzbl -0x10ab(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10ab(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x638(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10a8(%rbp)
	movzbl -0x10a8(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9c9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x48dc3(%rip),%rax        # <_IO_stdin_used+0x1b2c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x48db7(%rip),%rdx        # <_IO_stdin_used+0x1b2c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10a8(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3094b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x309bb>
	test   %eax,%eax
	je     <context_execute_loop+0x3094b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x30977>
	jmp    <context_execute_loop+0x309bb>
	movzbl -0x10a8(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x309e5>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x309e5>
	movzbl -0x10a8(%rbp),%edx
	mov    0x5a262(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x47543(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x30e1b>
	movzbl -0x10a8(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30e1b>
	cmpb   $0x2,-0x10a8(%rbp)
	jne    <context_execute_loop+0x30a35>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x630(%rbp)
	jmp    <context_execute_loop+0x30a5a>
	movzbl -0x10a8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30e1b>
	movzbl -0x10a8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30e1b>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10a8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30e1b>
	movzbl -0x10a8(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10a7(%rbp)
	movzbl -0x10a7(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x30b6f>
	movzbl -0x10a7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30bff>
	movzbl -0x10a7(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10a6(%rbp)
	movzbl -0x10a7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10a6(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xea6(%rbp)
	movzwl -0xea6(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x630(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x30c4a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x30e1b>
	movzbl -0x10a8(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10a8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30e1b>
	movzbl -0x10a8(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x30cdf>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x30d36>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10a8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30d92>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x630(%rbp)
	mov    -0x630(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x30e1b>
	movzbl -0x10a8(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10a8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x630(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10a5(%rbp)
	movzbl -0x10a5(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x10a4(%rbp)
	movzbl -0x10a5(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x10a3(%rbp)
	movzbl -0x10a4(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x30ee5>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d9cc>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x30e84>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x30eb3>
	jmp    <context_execute_loop+0x3d9cc>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10a3(%rbp),%eax
	mov    %eax,-0xb94(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30f62>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10a3(%rbp),%eax
	mov    %eax,-0xb94(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x30f62>
	movzbl -0x10a5(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10a5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb94(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xb98(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x398(%rbp)
	mov    -0x630(%rbp),%rcx
	mov    -0x638(%rbp),%rdx
	mov    -0xb9c(%rbp),%esi
	mov    -0x1198(%rbp),%rax
	mov    -0x398(%rbp),%r8
	mov    %rax,%rdi
	call   *%r8
	mov    %rax,-0x390(%rbp)
	mov    -0x390(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da89>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xb94(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x390(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10b2(%rbp)
	movzbl -0x10b2(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3105d>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x310d0>
	test   %eax,%eax
	je     <context_execute_loop+0x3105d>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x31081>
	jmp    <context_execute_loop+0x310d0>
	movzbl -0x10b2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb90(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x310fa>
	movzbl -0x10b2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb90(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x310fa>
	movzbl -0x10b2(%rbp),%edx
	mov    0x59b4d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x46d96(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10b1(%rbp)
	movzbl -0x10b1(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9cf>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x485c8(%rip),%rax        # <_IO_stdin_used+0x1b60>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x485bc(%rip),%rdx        # <_IO_stdin_used+0x1b60>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10b1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3117a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x311ea>
	test   %eax,%eax
	je     <context_execute_loop+0x3117a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x311a6>
	jmp    <context_execute_loop+0x311ea>
	movzbl -0x10b1(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x31214>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x31214>
	movzbl -0x10b1(%rbp),%edx
	mov    0x59a33(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x46d14(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3164a>
	movzbl -0x10b1(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3164a>
	cmpb   $0x2,-0x10b1(%rbp)
	jne    <context_execute_loop+0x31264>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x628(%rbp)
	jmp    <context_execute_loop+0x31289>
	movzbl -0x10b1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3164a>
	movzbl -0x10b1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3164a>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10b1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3164a>
	movzbl -0x10b1(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10b0(%rbp)
	movzbl -0x10b0(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3139e>
	movzbl -0x10b0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3142e>
	movzbl -0x10b0(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10af(%rbp)
	movzbl -0x10b0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10af(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeaa(%rbp)
	movzwl -0xeaa(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x628(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x31479>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3164a>
	movzbl -0x10b1(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10b1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3164a>
	movzbl -0x10b1(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3150e>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x31565>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10b1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x315c1>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x628(%rbp)
	mov    -0x628(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3164a>
	movzbl -0x10b1(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10b1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x628(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xb90(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f6(%rbp)
	movzbl -0x10f6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x316cd>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x31740>
	test   %eax,%eax
	je     <context_execute_loop+0x316cd>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x316f1>
	jmp    <context_execute_loop+0x31740>
	movzbl -0x10f6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xaa8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3176a>
	movzbl -0x10f6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xaa8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3176a>
	movzbl -0x10f6(%rbp),%edx
	mov    0x594dd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x46726(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f5(%rbp)
	movzbl -0x10f5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x317b4>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x31827>
	test   %eax,%eax
	je     <context_execute_loop+0x317b4>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x317d8>
	jmp    <context_execute_loop+0x31827>
	movzbl -0x10f5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb8c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31851>
	movzbl -0x10f5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb8c(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31851>
	movzbl -0x10f5(%rbp),%edx
	mov    0x593f6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x46677(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f4(%rbp)
	movzbl -0x10f4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3189b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3190e>
	test   %eax,%eax
	je     <context_execute_loop+0x3189b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x318bf>
	jmp    <context_execute_loop+0x3190e>
	movzbl -0x10f4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb88(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31938>
	movzbl -0x10f4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb88(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31938>
	movzbl -0x10f4(%rbp),%edx
	mov    0x5930f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x46590(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f3(%rbp)
	movzbl -0x10f3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9d2>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x47dbe(%rip),%rax        # <_IO_stdin_used+0x1b94>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x47db2(%rip),%rdx        # <_IO_stdin_used+0x1b94>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10f3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x319b8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x31a28>
	test   %eax,%eax
	je     <context_execute_loop+0x319b8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x319e4>
	jmp    <context_execute_loop+0x31a28>
	movzbl -0x10f3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31a52>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31a52>
	movzbl -0x10f3(%rbp),%edx
	mov    0x591f5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x464d6(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x31e88>
	movzbl -0x10f3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31e88>
	cmpb   $0x2,-0x10f3(%rbp)
	jne    <context_execute_loop+0x31aa2>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x620(%rbp)
	jmp    <context_execute_loop+0x31ac7>
	movzbl -0x10f3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31e88>
	movzbl -0x10f3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31e88>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10f3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31e88>
	movzbl -0x10f3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f2(%rbp)
	movzbl -0x10f2(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x31bdc>
	movzbl -0x10f2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31c6c>
	movzbl -0x10f2(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f1(%rbp)
	movzbl -0x10f2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10f1(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xec4(%rbp)
	movzwl -0xec4(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x620(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x31cb7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x31e88>
	movzbl -0x10f3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10f3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31e88>
	movzbl -0x10f3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x31d4c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x31da3>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10f3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31dff>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x620(%rbp)
	mov    -0x620(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x31e88>
	movzbl -0x10f3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10f3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x620(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f0(%rbp)
	movzbl -0x10f0(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9d5>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x478a2(%rip),%rax        # <_IO_stdin_used+0x1bc8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x47896(%rip),%rdx        # <_IO_stdin_used+0x1bc8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10f0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x31f08>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x31f78>
	test   %eax,%eax
	je     <context_execute_loop+0x31f08>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x31f34>
	jmp    <context_execute_loop+0x31f78>
	movzbl -0x10f0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31fa2>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x31fa2>
	movzbl -0x10f0(%rbp),%edx
	mov    0x58ca5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x45f86(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x323d8>
	movzbl -0x10f0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x323d8>
	cmpb   $0x2,-0x10f0(%rbp)
	jne    <context_execute_loop+0x31ff2>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x618(%rbp)
	jmp    <context_execute_loop+0x32017>
	movzbl -0x10f0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x323d8>
	movzbl -0x10f0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x323d8>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10f0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x323d8>
	movzbl -0x10f0(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ef(%rbp)
	movzbl -0x10ef(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3212c>
	movzbl -0x10ef(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x321bc>
	movzbl -0x10ef(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ee(%rbp)
	movzbl -0x10ef(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10ee(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xec2(%rbp)
	movzwl -0xec2(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x618(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x32207>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x323d8>
	movzbl -0x10f0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10f0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x323d8>
	movzbl -0x10f0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3229c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x322f3>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10f0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3234f>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x618(%rbp)
	mov    -0x618(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x323d8>
	movzbl -0x10f0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10f0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x618(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ed(%rbp)
	movzbl -0x10ed(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9d8>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x47386(%rip),%rax        # <_IO_stdin_used+0x1bfc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4737a(%rip),%rdx        # <_IO_stdin_used+0x1bfc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10ed(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x32458>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x324c8>
	test   %eax,%eax
	je     <context_execute_loop+0x32458>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x32484>
	jmp    <context_execute_loop+0x324c8>
	movzbl -0x10ed(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x324f2>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x324f2>
	movzbl -0x10ed(%rbp),%edx
	mov    0x58755(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x45a36(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x32928>
	movzbl -0x10ed(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x32928>
	cmpb   $0x2,-0x10ed(%rbp)
	jne    <context_execute_loop+0x32542>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x610(%rbp)
	jmp    <context_execute_loop+0x32567>
	movzbl -0x10ed(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x32928>
	movzbl -0x10ed(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x32928>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10ed(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x32928>
	movzbl -0x10ed(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ec(%rbp)
	movzbl -0x10ec(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3267c>
	movzbl -0x10ec(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3270c>
	movzbl -0x10ec(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10eb(%rbp)
	movzbl -0x10ec(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10eb(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xec0(%rbp)
	movzwl -0xec0(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x610(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x32757>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x32928>
	movzbl -0x10ed(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10ed(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x32928>
	movzbl -0x10ed(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x327ec>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x32843>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10ed(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3289f>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x610(%rbp)
	mov    -0x610(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x32928>
	movzbl -0x10ed(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10ed(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x610(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ea(%rbp)
	movzbl -0x10ea(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x10e9(%rbp)
	movzbl -0x10ea(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x10e8(%rbp)
	movzbl -0x10e9(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x329f2>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d9db>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x32991>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x329c0>
	jmp    <context_execute_loop+0x3d9db>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10e8(%rbp),%eax
	mov    %eax,-0xb84(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x32a6f>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10e8(%rbp),%eax
	mov    %eax,-0xb84(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x32a6f>
	movzbl -0x10ea(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x10ea(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb84(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0xb88(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x430(%rbp)
	mov    -0x610(%rbp),%rdi
	mov    -0x618(%rbp),%rcx
	mov    -0x620(%rbp),%rdx
	mov    -0xb8c(%rbp),%esi
	mov    -0x1198(%rbp),%rax
	mov    -0x430(%rbp),%r9
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   *%r9
	mov    %rax,-0x428(%rbp)
	mov    -0x428(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8c>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xb84(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x428(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xb80(%rbp)
	mov    -0xb80(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d9(%rbp)
	movzbl -0x10d9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x32b72>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x32bd3>
	test   %eax,%eax
	je     <context_execute_loop+0x32b72>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x32b8e>
	jmp    <context_execute_loop+0x32bd3>
	movzbl -0x10d9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb7c(%rbp)
	addl   $0x1,-0xb80(%rbp)
	jmp    <context_execute_loop+0x32bfd>
	movzbl -0x10d9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xb80(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xb7c(%rbp)
	addl   $0x2,-0xb80(%rbp)
	jmp    <context_execute_loop+0x32bfd>
	movzbl -0x10d9(%rbp),%edx
	mov    0x5804a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x452cb(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xb80(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10d8(%rbp)
	movzbl -0x10d8(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x32c45>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x32ca6>
	test   %eax,%eax
	je     <context_execute_loop+0x32c45>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x32c61>
	jmp    <context_execute_loop+0x32ca6>
	movzbl -0x10d8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xa90(%rbp)
	addl   $0x1,-0xb80(%rbp)
	jmp    <context_execute_loop+0x32cd0>
	movzbl -0x10d8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xb80(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xa90(%rbp)
	addl   $0x2,-0xb80(%rbp)
	jmp    <context_execute_loop+0x32cd0>
	movzbl -0x10d8(%rbp),%edx
	mov    0x57f77(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x451f8(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0xb7c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	mov    -0xb80(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xb78(%rbp)
	mov    -0xb78(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10e6(%rbp)
	movzbl -0x10e6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x32d5e>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x32dbf>
	test   %eax,%eax
	je     <context_execute_loop+0x32d5e>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x32d7a>
	jmp    <context_execute_loop+0x32dbf>
	movzbl -0x10e6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xaa0(%rbp)
	addl   $0x1,-0xb78(%rbp)
	jmp    <context_execute_loop+0x32de9>
	movzbl -0x10e6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xb78(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xaa0(%rbp)
	addl   $0x2,-0xb78(%rbp)
	jmp    <context_execute_loop+0x32de9>
	movzbl -0x10e6(%rbp),%edx
	mov    0x57e5e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x450a7(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xb78(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xb74(%rbp)
	mov    -0xb74(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10e7(%rbp)
	movzbl -0x10e7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x32e4c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x32ead>
	test   %eax,%eax
	je     <context_execute_loop+0x32e4c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x32e68>
	jmp    <context_execute_loop+0x32ead>
	movzbl -0x10e7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xaa4(%rbp)
	addl   $0x1,-0xb74(%rbp)
	jmp    <context_execute_loop+0x32ed7>
	movzbl -0x10e7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xb74(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xaa4(%rbp)
	addl   $0x2,-0xb74(%rbp)
	jmp    <context_execute_loop+0x32ed7>
	movzbl -0x10e7(%rbp),%edx
	mov    0x57d70(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x44fb9(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xb74(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xb70(%rbp)
	mov    -0xb70(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f7(%rbp)
	movzbl -0x10f7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x32f3a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x32f9b>
	test   %eax,%eax
	je     <context_execute_loop+0x32f3a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x32f56>
	jmp    <context_execute_loop+0x32f9b>
	movzbl -0x10f7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xaac(%rbp)
	addl   $0x1,-0xb70(%rbp)
	jmp    <context_execute_loop+0x32fc5>
	movzbl -0x10f7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xb70(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xaac(%rbp)
	addl   $0x2,-0xb70(%rbp)
	jmp    <context_execute_loop+0x32fc5>
	movzbl -0x10f7(%rbp),%edx
	mov    0x57c82(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x44f03(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xb70(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	movl   $0x1,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1110(%rbp)
	movzbl -0x1110(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3302a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3309d>
	test   %eax,%eax
	je     <context_execute_loop+0x3302a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3304e>
	jmp    <context_execute_loop+0x3309d>
	movzbl -0x1110(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xabc(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x330c7>
	movzbl -0x1110(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xabc(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x330c7>
	movzbl -0x1110(%rbp),%edx
	mov    0x57b80(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x44dc9(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe04(%rbp),%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x110f(%rbp)
	movzbl -0x110f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9de>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x466bf(%rip),%rax        # <_IO_stdin_used+0x1c30>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x466b3(%rip),%rdx        # <_IO_stdin_used+0x1c30>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x110f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x33153>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x331c3>
	test   %eax,%eax
	je     <context_execute_loop+0x33153>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3317f>
	jmp    <context_execute_loop+0x331c3>
	movzbl -0x110f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x331ed>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x331ed>
	movzbl -0x110f(%rbp),%edx
	mov    0x57a5a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x44d3b(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x33623>
	movzbl -0x110f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33623>
	cmpb   $0x2,-0x110f(%rbp)
	jne    <context_execute_loop+0x3323d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x608(%rbp)
	jmp    <context_execute_loop+0x33262>
	movzbl -0x110f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33623>
	movzbl -0x110f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33623>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x110f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33623>
	movzbl -0x110f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x110e(%rbp)
	movzbl -0x110e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x33377>
	movzbl -0x110e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33407>
	movzbl -0x110e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x110d(%rbp)
	movzbl -0x110e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x110d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xed0(%rbp)
	movzwl -0xed0(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x608(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x33452>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x33623>
	movzbl -0x110f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x110f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33623>
	movzbl -0x110f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x334e7>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3353e>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x110f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x3359a>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe04(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe04(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x608(%rbp)
	mov    -0x608(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x33623>
	movzbl -0x110f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x110f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x608(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x110c(%rbp)
	movzbl -0x110c(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x110b(%rbp)
	movzbl -0x110c(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x110a(%rbp)
	movzbl -0x110b(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x336ed>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d9e1>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3368c>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x336bb>
	jmp    <context_execute_loop+0x3d9e1>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x110a(%rbp),%eax
	mov    %eax,-0xb6c(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x3376a>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x110a(%rbp),%eax
	mov    %eax,-0xb6c(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x3376a>
	movzbl -0x110c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x110c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb6c(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1109(%rbp)
	movzbl -0x1109(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x337b4>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x33827>
	test   %eax,%eax
	je     <context_execute_loop+0x337b4>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x337d8>
	jmp    <context_execute_loop+0x33827>
	movzbl -0x1109(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xab8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33851>
	movzbl -0x1109(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xab8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33851>
	movzbl -0x1109(%rbp),%edx
	mov    0x573f6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x44677(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1108(%rbp)
	movzbl -0x1108(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x338aa>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3391d>
	test   %eax,%eax
	je     <context_execute_loop+0x338aa>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x338ce>
	jmp    <context_execute_loop+0x3391d>
	movzbl -0x1108(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb68(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33947>
	movzbl -0x1108(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb68(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33947>
	movzbl -0x1108(%rbp),%edx
	mov    0x57300(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x44581(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe04(%rbp),%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xb68(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	mov    %eax,-0xab4(%rbp)
	movl   $0x0,-0xb64(%rbp)
	movl   $0x0,-0xb60(%rbp)
	jmp    <context_execute_loop+0x34454>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10fd(%rbp)
	movzbl -0x10fd(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9e4>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x45e45(%rip),%rax        # <_IO_stdin_used+0x1c64>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x45e39(%rip),%rdx        # <_IO_stdin_used+0x1c64>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10fd(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x33a01>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x33a71>
	test   %eax,%eax
	je     <context_execute_loop+0x33a01>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x33a2d>
	jmp    <context_execute_loop+0x33a71>
	movzbl -0x10fd(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33a9b>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33a9b>
	movzbl -0x10fd(%rbp),%edx
	mov    0x571ac(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4448d(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x33ed1>
	movzbl -0x10fd(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33ed1>
	cmpb   $0x2,-0x10fd(%rbp)
	jne    <context_execute_loop+0x33aeb>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x600(%rbp)
	jmp    <context_execute_loop+0x33b10>
	movzbl -0x10fd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33ed1>
	movzbl -0x10fd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33ed1>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10fd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33ed1>
	movzbl -0x10fd(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10fc(%rbp)
	movzbl -0x10fc(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x33c25>
	movzbl -0x10fc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33cb5>
	movzbl -0x10fc(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10fb(%rbp)
	movzbl -0x10fc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10fb(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xec8(%rbp)
	movzwl -0xec8(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x600(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x33d00>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x33ed1>
	movzbl -0x10fd(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10fd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33ed1>
	movzbl -0x10fd(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x33d95>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x33dec>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10fd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33e48>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe04(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe04(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x600(%rbp)
	mov    -0x600(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x33ed1>
	movzbl -0x10fd(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10fd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x600(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10fa(%rbp)
	movzbl -0x10fa(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9e7>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x45929(%rip),%rax        # <_IO_stdin_used+0x1c98>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4591d(%rip),%rdx        # <_IO_stdin_used+0x1c98>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x10fa(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x33f51>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x33fc1>
	test   %eax,%eax
	je     <context_execute_loop+0x33f51>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x33f7d>
	jmp    <context_execute_loop+0x33fc1>
	movzbl -0x10fa(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33feb>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x33feb>
	movzbl -0x10fa(%rbp),%edx
	mov    0x56c5c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x43f3d(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x34421>
	movzbl -0x10fa(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x34421>
	cmpb   $0x2,-0x10fa(%rbp)
	jne    <context_execute_loop+0x3403b>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5f8(%rbp)
	jmp    <context_execute_loop+0x34060>
	movzbl -0x10fa(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x34421>
	movzbl -0x10fa(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x34421>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10fa(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x34421>
	movzbl -0x10fa(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f9(%rbp)
	movzbl -0x10f9(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x34175>
	movzbl -0x10f9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x34205>
	movzbl -0x10f9(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10f8(%rbp)
	movzbl -0x10f9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10f8(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xec6(%rbp)
	movzwl -0xec6(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x5f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x34250>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x34421>
	movzbl -0x10fa(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x10fa(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x34421>
	movzbl -0x10fa(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x342e5>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3433c>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x10fa(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x34398>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe04(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe04(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5f8(%rbp)
	mov    -0x5f8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x34421>
	movzbl -0x10fa(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x10fa(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5f8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x600(%rbp),%rdx
	mov    -0x608(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_find_map_pos>
	cmp    $0xffffffff,%eax
	jne    <context_execute_loop+0x3444d>
	addl   $0x1,-0xb64(%rbp)
	addl   $0x1,-0xb60(%rbp)
	mov    -0xb60(%rbp),%eax
	cmp    -0xab4(%rbp),%eax
	jl     <context_execute_loop+0x33981>
	mov    -0x608(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	cltq   
	mov    %rax,-0x4a0(%rbp)
	mov    -0xb64(%rbp),%edx
	mov    -0x4a0(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x498(%rbp)
	cmpl   $0x0,-0xb64(%rbp)
	sete   %al
	mov    %al,-0x1107(%rbp)
	movzbl -0x1107(%rbp),%edx
	mov    -0x498(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_map_size_in_terms_maybe_shared>
	cltq   
	mov    %rax,-0x490(%rbp)
	mov    -0x490(%rbp),%rax
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <context_execute_loop+0x34513>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1106(%rbp)
	movzbl -0x1106(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9ea>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4531b(%rip),%rax        # <_IO_stdin_used+0x1ccc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4530f(%rip),%rdx        # <_IO_stdin_used+0x1ccc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1106(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x34593>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x34603>
	test   %eax,%eax
	je     <context_execute_loop+0x34593>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x345bf>
	jmp    <context_execute_loop+0x34603>
	movzbl -0x1106(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x3462d>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x3462d>
	movzbl -0x1106(%rbp),%edx
	mov    0x5661a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x438fb(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x34a63>
	movzbl -0x1106(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x34a63>
	cmpb   $0x2,-0x1106(%rbp)
	jne    <context_execute_loop+0x3467d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x608(%rbp)
	jmp    <context_execute_loop+0x346a2>
	movzbl -0x1106(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x34a63>
	movzbl -0x1106(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x34a63>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1106(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x34a63>
	movzbl -0x1106(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1105(%rbp)
	movzbl -0x1105(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x347b7>
	movzbl -0x1105(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x34847>
	movzbl -0x1105(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1104(%rbp)
	movzbl -0x1105(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1104(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xece(%rbp)
	movzwl -0xece(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x608(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x34892>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x34a63>
	movzbl -0x1106(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1106(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x34a63>
	movzbl -0x1106(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x34927>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3497e>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1106(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x349da>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x608(%rbp)
	mov    -0x608(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x34a63>
	movzbl -0x1106(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1106(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x608(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xab4(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x488(%rbp)
	cmpq   $0x0,-0x488(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x34ac0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x0,-0xb5c(%rbp)
	jmp    <context_execute_loop+0x355bd>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1103(%rbp)
	movzbl -0x1103(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9ed>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x44d93(%rip),%rax        # <_IO_stdin_used+0x1d00>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x44d87(%rip),%rdx        # <_IO_stdin_used+0x1d00>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1103(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x34b4f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x34bbf>
	test   %eax,%eax
	je     <context_execute_loop+0x34b4f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x34b7b>
	jmp    <context_execute_loop+0x34bbf>
	movzbl -0x1103(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x34be9>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x34be9>
	movzbl -0x1103(%rbp),%edx
	mov    0x5605e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x4333f(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3501f>
	movzbl -0x1103(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3501f>
	cmpb   $0x2,-0x1103(%rbp)
	jne    <context_execute_loop+0x34c39>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5f0(%rbp)
	jmp    <context_execute_loop+0x34c5e>
	movzbl -0x1103(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3501f>
	movzbl -0x1103(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3501f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1103(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3501f>
	movzbl -0x1103(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1102(%rbp)
	movzbl -0x1102(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x34d73>
	movzbl -0x1102(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x34e03>
	movzbl -0x1102(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1101(%rbp)
	movzbl -0x1102(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1101(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xecc(%rbp)
	movzwl -0xecc(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x5f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x34e4e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3501f>
	movzbl -0x1103(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1103(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3501f>
	movzbl -0x1103(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x34ee3>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x34f3a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1103(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x34f96>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5f0(%rbp)
	mov    -0x5f0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3501f>
	movzbl -0x1103(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1103(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5f0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1100(%rbp)
	movzbl -0x1100(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9f0>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x44877(%rip),%rax        # <_IO_stdin_used+0x1d34>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x4486b(%rip),%rdx        # <_IO_stdin_used+0x1d34>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1100(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3509f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3510f>
	test   %eax,%eax
	je     <context_execute_loop+0x3509f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x350cb>
	jmp    <context_execute_loop+0x3510f>
	movzbl -0x1100(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x35139>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x35139>
	movzbl -0x1100(%rbp),%edx
	mov    0x55b0e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x42def(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3556f>
	movzbl -0x1100(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3556f>
	cmpb   $0x2,-0x1100(%rbp)
	jne    <context_execute_loop+0x35189>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5e8(%rbp)
	jmp    <context_execute_loop+0x351ae>
	movzbl -0x1100(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3556f>
	movzbl -0x1100(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3556f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1100(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3556f>
	movzbl -0x1100(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10ff(%rbp)
	movzbl -0x10ff(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x352c3>
	movzbl -0x10ff(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x35353>
	movzbl -0x10ff(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x10fe(%rbp)
	movzbl -0x10ff(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x10fe(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeca(%rbp)
	movzwl -0xeca(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x5e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3539e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3556f>
	movzbl -0x1100(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1100(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3556f>
	movzbl -0x1100(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x35433>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3548a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1100(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x354e6>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5e8(%rbp)
	mov    -0x5e8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3556f>
	movzbl -0x1100(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1100(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5e8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xb5c(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x488(%rbp),%rax
	add    %rax,%rdx
	mov    -0x5f0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xb5c(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x488(%rbp),%rax
	add    %rax,%rdx
	mov    -0x5e8(%rbp),%rax
	mov    %rax,0x8(%rdx)
	addl   $0x1,-0xb5c(%rbp)
	mov    -0xb5c(%rbp),%eax
	cmp    -0xab4(%rbp),%eax
	jl     <context_execute_loop+0x34acf>
	mov    -0xab4(%rbp),%edx
	mov    -0x488(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <sort_kv_pairs>
	cmpb   $0x0,-0x1107(%rbp)
	je     <context_execute_loop+0x35608>
	mov    -0x608(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	jmp    <context_execute_loop+0x35612>
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x498(%rbp),%rsi
	mov    -0x1198(%rbp),%rcx
	mov    %rax,%rdx
	mov    %rcx,%rdi
	call   <term_alloc_map_maybe_shared>
	mov    %rax,-0x480(%rbp)
	movl   $0x0,-0xb58(%rbp)
	movl   $0x0,-0xb54(%rbp)
	movl   $0x0,-0xb50(%rbp)
	jmp    <context_execute_loop+0x358e6>
	mov    -0xb58(%rbp),%eax
	cltq   
	cmp    %rax,-0x4a0(%rbp)
	ja     <context_execute_loop+0x356df>
	mov    -0xb54(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x488(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x440(%rbp)
	mov    -0xb54(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x488(%rbp),%rax
	add    %rdx,%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x438(%rbp)
	mov    -0xb50(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x438(%rbp),%rcx
	mov    -0x440(%rbp),%rdx
	mov    -0x480(%rbp),%rax
	mov    %rax,%rdi
	call   <term_set_map_assoc>
	addl   $0x1,-0xb54(%rbp)
	jmp    <context_execute_loop+0x358df>
	mov    -0xb54(%rbp),%eax
	cmp    -0xab4(%rbp),%eax
	jl     <context_execute_loop+0x35763>
	mov    -0xb58(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x608(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,-0x450(%rbp)
	mov    -0xb58(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x608(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,-0x448(%rbp)
	mov    -0xb50(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x448(%rbp),%rcx
	mov    -0x450(%rbp),%rdx
	mov    -0x480(%rbp),%rax
	mov    %rax,%rdi
	call   <term_set_map_assoc>
	addl   $0x1,-0xb58(%rbp)
	jmp    <context_execute_loop+0x358df>
	mov    -0xb58(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x608(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,-0x478(%rbp)
	mov    -0xb54(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x488(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x470(%rbp)
	mov    -0x1198(%rbp),%rdx
	mov    -0x470(%rbp),%rcx
	mov    -0x478(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	mov    %eax,-0xab0(%rbp)
	cmpl   $0x0,-0xab0(%rbp)
	jns    <context_execute_loop+0x3582b>
	mov    -0xb58(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x608(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,-0x458(%rbp)
	mov    -0xb50(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x458(%rbp),%rcx
	mov    -0x478(%rbp),%rdx
	mov    -0x480(%rbp),%rax
	mov    %rax,%rdi
	call   <term_set_map_assoc>
	addl   $0x1,-0xb58(%rbp)
	jmp    <context_execute_loop+0x358df>
	cmpl   $0x0,-0xab0(%rbp)
	jle    <context_execute_loop+0x35887>
	mov    -0xb54(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x488(%rbp),%rax
	add    %rdx,%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x460(%rbp)
	mov    -0xb50(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x460(%rbp),%rcx
	mov    -0x470(%rbp),%rdx
	mov    -0x480(%rbp),%rax
	mov    %rax,%rdi
	call   <term_set_map_assoc>
	addl   $0x1,-0xb54(%rbp)
	jmp    <context_execute_loop+0x358df>
	mov    -0xb54(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x488(%rbp),%rax
	add    %rdx,%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x468(%rbp)
	mov    -0xb50(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x468(%rbp),%rcx
	mov    -0x478(%rbp),%rdx
	mov    -0x480(%rbp),%rax
	mov    %rax,%rdi
	call   <term_set_map_assoc>
	addl   $0x1,-0xb58(%rbp)
	addl   $0x1,-0xb54(%rbp)
	addl   $0x1,-0xb50(%rbp)
	mov    -0xb50(%rbp),%eax
	cltq   
	cmp    %rax,-0x498(%rbp)
	ja     <context_execute_loop+0x35655>
	mov    -0x488(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xb6c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x480(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xe04(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1128(%rbp)
	movzbl -0x1128(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x35992>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x35a05>
	test   %eax,%eax
	je     <context_execute_loop+0x35992>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x359b6>
	jmp    <context_execute_loop+0x35a05>
	movzbl -0x1128(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xacc(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35a2f>
	movzbl -0x1128(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xacc(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35a2f>
	movzbl -0x1128(%rbp),%edx
	mov    0x55218(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x42461(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe04(%rbp),%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1127(%rbp)
	movzbl -0x1127(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9f3>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x43e8f(%rip),%rax        # <_IO_stdin_used+0x1d68>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x43e83(%rip),%rdx        # <_IO_stdin_used+0x1d68>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1127(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x35abb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x35b2b>
	test   %eax,%eax
	je     <context_execute_loop+0x35abb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x35ae7>
	jmp    <context_execute_loop+0x35b2b>
	movzbl -0x1127(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35b55>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35b55>
	movzbl -0x1127(%rbp),%edx
	mov    0x550f2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x423d3(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x35f8b>
	movzbl -0x1127(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35f8b>
	cmpb   $0x2,-0x1127(%rbp)
	jne    <context_execute_loop+0x35ba5>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5e0(%rbp)
	jmp    <context_execute_loop+0x35bca>
	movzbl -0x1127(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35f8b>
	movzbl -0x1127(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35f8b>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1127(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35f8b>
	movzbl -0x1127(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1126(%rbp)
	movzbl -0x1126(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x35cdf>
	movzbl -0x1126(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35d6f>
	movzbl -0x1126(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1125(%rbp)
	movzbl -0x1126(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1125(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xedc(%rbp)
	movzwl -0xedc(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x5e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x35dba>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x35f8b>
	movzbl -0x1127(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1127(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35f8b>
	movzbl -0x1127(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x35e4f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x35ea6>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1127(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x35f02>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe04(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe04(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5e0(%rbp)
	mov    -0x5e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x35f8b>
	movzbl -0x1127(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1127(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1124(%rbp)
	movzbl -0x1124(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1123(%rbp)
	movzbl -0x1124(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1122(%rbp)
	movzbl -0x1123(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x36055>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3d9f6>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x35ff4>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x36023>
	jmp    <context_execute_loop+0x3d9f6>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1122(%rbp),%eax
	mov    %eax,-0xb4c(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x360d2>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1122(%rbp),%eax
	mov    %eax,-0xb4c(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x360d2>
	movzbl -0x1124(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1124(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb4c(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1121(%rbp)
	movzbl -0x1121(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3611c>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3618f>
	test   %eax,%eax
	je     <context_execute_loop+0x3611c>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x36140>
	jmp    <context_execute_loop+0x3618f>
	movzbl -0x1121(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xac8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x361b9>
	movzbl -0x1121(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xac8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x361b9>
	movzbl -0x1121(%rbp),%edx
	mov    0x54a8e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x41d0f(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1120(%rbp)
	movzbl -0x1120(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x36212>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x36285>
	test   %eax,%eax
	je     <context_execute_loop+0x36212>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x36236>
	jmp    <context_execute_loop+0x36285>
	movzbl -0x1120(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb48(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x362af>
	movzbl -0x1120(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb48(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x362af>
	movzbl -0x1120(%rbp),%edx
	mov    0x54998(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x41c19(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xe04(%rbp),%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xb48(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	mov    %eax,-0xac4(%rbp)
	movl   $0x0,-0xb44(%rbp)
	jmp    <context_execute_loop+0x36dda>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1116(%rbp)
	movzbl -0x1116(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9f9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4361f(%rip),%rax        # <_IO_stdin_used+0x1d9c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x43613(%rip),%rdx        # <_IO_stdin_used+0x1d9c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1116(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3635f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x363cf>
	test   %eax,%eax
	je     <context_execute_loop+0x3635f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3638b>
	jmp    <context_execute_loop+0x363cf>
	movzbl -0x1116(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x363f9>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x363f9>
	movzbl -0x1116(%rbp),%edx
	mov    0x5484e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x41b2f(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3682f>
	movzbl -0x1116(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x3682f>
	cmpb   $0x2,-0x1116(%rbp)
	jne    <context_execute_loop+0x36449>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5d8(%rbp)
	jmp    <context_execute_loop+0x3646e>
	movzbl -0x1116(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x3682f>
	movzbl -0x1116(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x3682f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1116(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x3682f>
	movzbl -0x1116(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1115(%rbp)
	movzbl -0x1115(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x36583>
	movzbl -0x1115(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36613>
	movzbl -0x1115(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1114(%rbp)
	movzbl -0x1115(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1114(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xed4(%rbp)
	movzwl -0xed4(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x5d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3665e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3682f>
	movzbl -0x1116(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1116(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x3682f>
	movzbl -0x1116(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x366f3>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3674a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1116(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x367a6>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe04(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe04(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5d8(%rbp)
	mov    -0x5d8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3682f>
	movzbl -0x1116(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1116(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5d8(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1113(%rbp)
	movzbl -0x1113(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9fc>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x43103(%rip),%rax        # <_IO_stdin_used+0x1dd0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x430f7(%rip),%rdx        # <_IO_stdin_used+0x1dd0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1113(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x368af>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3691f>
	test   %eax,%eax
	je     <context_execute_loop+0x368af>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x368db>
	jmp    <context_execute_loop+0x3691f>
	movzbl -0x1113(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36949>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36949>
	movzbl -0x1113(%rbp),%edx
	mov    0x542fe(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x415df(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x36d7f>
	movzbl -0x1113(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36d7f>
	cmpb   $0x2,-0x1113(%rbp)
	jne    <context_execute_loop+0x36999>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5d0(%rbp)
	jmp    <context_execute_loop+0x369be>
	movzbl -0x1113(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36d7f>
	movzbl -0x1113(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36d7f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1113(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36d7f>
	movzbl -0x1113(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1112(%rbp)
	movzbl -0x1112(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x36ad3>
	movzbl -0x1112(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36b63>
	movzbl -0x1112(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe04(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1111(%rbp)
	movzbl -0x1112(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1111(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xed2(%rbp)
	movzwl -0xed2(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x5d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x36bae>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x36d7f>
	movzbl -0x1113(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1113(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36d7f>
	movzbl -0x1113(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x36c43>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x36c9a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1113(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	jmp    <context_execute_loop+0x36cf6>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe04(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe04(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5d0(%rbp)
	mov    -0x5d0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x36d7f>
	movzbl -0x1113(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1113(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe04(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5d0(%rbp)
	mov    -0xe04(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe04(%rbp)
	mov    -0x5d8(%rbp),%rdx
	mov    -0x5e0(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_find_map_pos>
	cmp    $0xffffffff,%eax
	jne    <context_execute_loop+0x36dd3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	addl   $0x1,-0xb44(%rbp)
	mov    -0xb44(%rbp),%eax
	cmp    -0xac4(%rbp),%eax
	jl     <context_execute_loop+0x362df>
	mov    -0x5e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	cltq   
	mov    %rax,-0x4b0(%rbp)
	mov    -0x4b0(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_map_size_in_terms_maybe_shared>
	mov    %eax,%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <context_execute_loop+0x36e5e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x111f(%rbp)
	movzbl -0x111f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3d9ff>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x42b08(%rip),%rax        # <_IO_stdin_used+0x1e04>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x42afc(%rip),%rdx        # <_IO_stdin_used+0x1e04>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x111f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x36ede>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x36f4e>
	test   %eax,%eax
	je     <context_execute_loop+0x36ede>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x36f0a>
	jmp    <context_execute_loop+0x36f4e>
	movzbl -0x111f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x36f78>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x36f78>
	movzbl -0x111f(%rbp),%edx
	mov    0x53ccf(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x40fb0(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x373ae>
	movzbl -0x111f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x373ae>
	cmpb   $0x2,-0x111f(%rbp)
	jne    <context_execute_loop+0x36fc8>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5e0(%rbp)
	jmp    <context_execute_loop+0x36fed>
	movzbl -0x111f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x373ae>
	movzbl -0x111f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x373ae>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x111f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x373ae>
	movzbl -0x111f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x111e(%rbp)
	movzbl -0x111e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x37102>
	movzbl -0x111e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x37192>
	movzbl -0x111e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xe00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x111d(%rbp)
	movzbl -0x111e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x111d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeda(%rbp)
	movzwl -0xeda(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x5e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x371dd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x373ae>
	movzbl -0x111f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x111f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x373ae>
	movzbl -0x111f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x37272>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x372c9>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x111f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	jmp    <context_execute_loop+0x37325>
	mov    -0xdfc(%rbp),%edx
	mov    -0xe00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xe00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5e0(%rbp)
	mov    -0x5e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x373ae>
	movzbl -0x111f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x111f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xe00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5e0(%rbp)
	mov    -0xe00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xe00(%rbp)
	mov    -0x5e0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rdx
	mov    -0x4b0(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_map_maybe_shared>
	mov    %rax,-0x4a8(%rbp)
	movl   $0x0,-0xb40(%rbp)
	jmp    <context_execute_loop+0x3744a>
	mov    -0xb40(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x5e0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,%rbx
	mov    -0xb40(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x5e0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,%rdx
	mov    -0xb40(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x4a8(%rbp),%rax
	mov    %rbx,%rcx
	mov    %rax,%rdi
	call   <term_set_map_assoc>
	addl   $0x1,-0xb40(%rbp)
	mov    -0xb40(%rbp),%eax
	cltq   
	cmp    %rax,-0x4b0(%rbp)
	ja     <context_execute_loop+0x373ec>
	movl   $0x0,-0xb3c(%rbp)
	jmp    <context_execute_loop+0x37f5d>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x111c(%rbp)
	movzbl -0x111c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da02>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x42530(%rip),%rax        # <_IO_stdin_used+0x1e38>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x42524(%rip),%rdx        # <_IO_stdin_used+0x1e38>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x111c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x374ea>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3755a>
	test   %eax,%eax
	je     <context_execute_loop+0x374ea>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x37516>
	jmp    <context_execute_loop+0x3755a>
	movzbl -0x111c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37584>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37584>
	movzbl -0x111c(%rbp),%edx
	mov    0x536c3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x409a4(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x379ba>
	movzbl -0x111c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x379ba>
	cmpb   $0x2,-0x111c(%rbp)
	jne    <context_execute_loop+0x375d4>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5c8(%rbp)
	jmp    <context_execute_loop+0x375f9>
	movzbl -0x111c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x379ba>
	movzbl -0x111c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x379ba>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x111c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x379ba>
	movzbl -0x111c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x111b(%rbp)
	movzbl -0x111b(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3770e>
	movzbl -0x111b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3779e>
	movzbl -0x111b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x111a(%rbp)
	movzbl -0x111b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x111a(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xed8(%rbp)
	movzwl -0xed8(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x5c8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x377e9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x379ba>
	movzbl -0x111c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x111c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x379ba>
	movzbl -0x111c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3787e>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x378d5>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x111c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37931>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5c8(%rbp)
	mov    -0x5c8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x379ba>
	movzbl -0x111c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x111c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5c8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1119(%rbp)
	movzbl -0x1119(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da05>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x42014(%rip),%rax        # <_IO_stdin_used+0x1e6c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x42008(%rip),%rdx        # <_IO_stdin_used+0x1e6c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1119(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x37a3a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x37aaa>
	test   %eax,%eax
	je     <context_execute_loop+0x37a3a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x37a66>
	jmp    <context_execute_loop+0x37aaa>
	movzbl -0x1119(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37ad4>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37ad4>
	movzbl -0x1119(%rbp),%edx
	mov    0x53173(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x40454(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x37f0a>
	movzbl -0x1119(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37f0a>
	cmpb   $0x2,-0x1119(%rbp)
	jne    <context_execute_loop+0x37b24>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5c0(%rbp)
	jmp    <context_execute_loop+0x37b49>
	movzbl -0x1119(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37f0a>
	movzbl -0x1119(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37f0a>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1119(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37f0a>
	movzbl -0x1119(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1118(%rbp)
	movzbl -0x1118(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x37c5e>
	movzbl -0x1118(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37cee>
	movzbl -0x1118(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1117(%rbp)
	movzbl -0x1118(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1117(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xed6(%rbp)
	movzwl -0xed6(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x5c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x37d39>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x37f0a>
	movzbl -0x1119(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1119(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37f0a>
	movzbl -0x1119(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x37dce>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x37e25>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1119(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x37e81>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5c0(%rbp)
	mov    -0x5c0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x37f0a>
	movzbl -0x1119(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1119(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5c0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x5c8(%rbp),%rdx
	mov    -0x5e0(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_find_map_pos>
	mov    %eax,-0xac0(%rbp)
	mov    -0xac0(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x5c0(%rbp),%rcx
	mov    -0x5c8(%rbp),%rdx
	mov    -0x4a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_set_map_assoc>
	addl   $0x1,-0xb3c(%rbp)
	mov    -0xb3c(%rbp),%eax
	cmp    -0xac4(%rbp),%eax
	jl     <context_execute_loop+0x3746a>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xb4c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x4a8(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xe04(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x112c(%rbp)
	movzbl -0x112c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x37ff7>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3806a>
	test   %eax,%eax
	je     <context_execute_loop+0x37ff7>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3801b>
	jmp    <context_execute_loop+0x3806a>
	movzbl -0x112c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb38(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38094>
	movzbl -0x112c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb38(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38094>
	movzbl -0x112c(%rbp),%edx
	mov    0x52bb3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3fdfc(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x112b(%rbp)
	movzbl -0x112b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da08>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4196e(%rip),%rax        # <_IO_stdin_used+0x1ea0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x41962(%rip),%rdx        # <_IO_stdin_used+0x1ea0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x112b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x38114>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x38184>
	test   %eax,%eax
	je     <context_execute_loop+0x38114>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x38140>
	jmp    <context_execute_loop+0x38184>
	movzbl -0x112b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x381ae>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x381ae>
	movzbl -0x112b(%rbp),%edx
	mov    0x52a99(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3fd7a(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x385e4>
	movzbl -0x112b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x385e4>
	cmpb   $0x2,-0x112b(%rbp)
	jne    <context_execute_loop+0x381fe>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5b8(%rbp)
	jmp    <context_execute_loop+0x38223>
	movzbl -0x112b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x385e4>
	movzbl -0x112b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x385e4>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x112b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x385e4>
	movzbl -0x112b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x112a(%rbp)
	movzbl -0x112a(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x38338>
	movzbl -0x112a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x383c8>
	movzbl -0x112a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1129(%rbp)
	movzbl -0x112a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1129(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xede(%rbp)
	movzwl -0xede(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x5b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x38413>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x385e4>
	movzbl -0x112b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x112b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x385e4>
	movzbl -0x112b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x384a8>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x384ff>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x112b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3855b>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5b8(%rbp)
	mov    -0x5b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x385e4>
	movzbl -0x112b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x112b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5b8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x5b8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <context_execute_loop+0x38608>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d6dc>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xb38(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1134(%rbp)
	movzbl -0x1134(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3868b>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x386fe>
	test   %eax,%eax
	je     <context_execute_loop+0x3868b>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x386af>
	jmp    <context_execute_loop+0x386fe>
	movzbl -0x1134(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb34(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38728>
	movzbl -0x1134(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb34(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38728>
	movzbl -0x1134(%rbp),%edx
	mov    0x5251f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3f768(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1133(%rbp)
	movzbl -0x1133(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da0b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x4130e(%rip),%rax        # <_IO_stdin_used+0x1ed4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x41302(%rip),%rdx        # <_IO_stdin_used+0x1ed4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1133(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x387a8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x38818>
	test   %eax,%eax
	je     <context_execute_loop+0x387a8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x387d4>
	jmp    <context_execute_loop+0x38818>
	movzbl -0x1133(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38842>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38842>
	movzbl -0x1133(%rbp),%edx
	mov    0x52405(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3f6e6(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x38c78>
	movzbl -0x1133(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38c78>
	cmpb   $0x2,-0x1133(%rbp)
	jne    <context_execute_loop+0x38892>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5b0(%rbp)
	jmp    <context_execute_loop+0x388b7>
	movzbl -0x1133(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38c78>
	movzbl -0x1133(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38c78>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1133(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38c78>
	movzbl -0x1133(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1132(%rbp)
	movzbl -0x1132(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x389cc>
	movzbl -0x1132(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38a5c>
	movzbl -0x1132(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1131(%rbp)
	movzbl -0x1132(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1131(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xee2(%rbp)
	movzwl -0xee2(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x5b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x38aa7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x38c78>
	movzbl -0x1133(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1133(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38c78>
	movzbl -0x1133(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x38b3c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x38b93>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1133(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38bef>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5b0(%rbp)
	mov    -0x5b0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x38c78>
	movzbl -0x1133(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1133(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5b0(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1130(%rbp)
	movzbl -0x1130(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x38cd1>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x38d44>
	test   %eax,%eax
	je     <context_execute_loop+0x38cd1>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x38cf5>
	jmp    <context_execute_loop+0x38d44>
	movzbl -0x1130(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb30(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38d6e>
	movzbl -0x1130(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb30(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38d6e>
	movzbl -0x1130(%rbp),%edx
	mov    0x51ed9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3f15a(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movl   $0x0,-0xb2c(%rbp)
	movl   $0x0,-0xb28(%rbp)
	jmp    <context_execute_loop+0x39341>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x112f(%rbp)
	movzbl -0x112f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da0e>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x40ce3(%rip),%rax        # <_IO_stdin_used+0x1f08>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x40cd7(%rip),%rdx        # <_IO_stdin_used+0x1f08>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x112f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x38e07>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x38e77>
	test   %eax,%eax
	je     <context_execute_loop+0x38e07>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x38e33>
	jmp    <context_execute_loop+0x38e77>
	movzbl -0x112f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38ea1>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x38ea1>
	movzbl -0x112f(%rbp),%edx
	mov    0x51da6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3f087(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x392d7>
	movzbl -0x112f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x392d7>
	cmpb   $0x2,-0x112f(%rbp)
	jne    <context_execute_loop+0x38ef1>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5a8(%rbp)
	jmp    <context_execute_loop+0x38f16>
	movzbl -0x112f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x392d7>
	movzbl -0x112f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x392d7>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x112f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x392d7>
	movzbl -0x112f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x112e(%rbp)
	movzbl -0x112e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3902b>
	movzbl -0x112e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x390bb>
	movzbl -0x112e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x112d(%rbp)
	movzbl -0x112e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x112d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xee0(%rbp)
	movzwl -0xee0(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x5a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x39106>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x392d7>
	movzbl -0x112f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x112f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x392d7>
	movzbl -0x112f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3919b>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x391f2>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x112f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3924e>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5a8(%rbp)
	mov    -0x5a8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x392d7>
	movzbl -0x112f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x112f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5a8(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x5a8(%rbp),%rdx
	mov    -0x5b0(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_find_map_pos>
	mov    %eax,-0xad0(%rbp)
	cmpl   $0xffffffff,-0xad0(%rbp)
	jne    <context_execute_loop+0x3933a>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xb34(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	movl   $0x1,-0xb2c(%rbp)
	addl   $0x1,-0xb28(%rbp)
	mov    -0xb28(%rbp),%eax
	cmp    -0xb30(%rbp),%eax
	jge    <context_execute_loop+0x3935c>
	cmpl   $0x0,-0xb2c(%rbp)
	je     <context_execute_loop+0x38d87>
	cmpl   $0x0,-0xb2c(%rbp)
	jne    <context_execute_loop+0x3d6d5>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x113f(%rbp)
	movzbl -0x113f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x393ce>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x39441>
	test   %eax,%eax
	je     <context_execute_loop+0x393ce>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x393f2>
	jmp    <context_execute_loop+0x39441>
	movzbl -0x113f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb24(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3946b>
	movzbl -0x113f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb24(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3946b>
	movzbl -0x113f(%rbp),%edx
	mov    0x517dc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3ea25(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x113e(%rbp)
	movzbl -0x113e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da11>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x40633(%rip),%rax        # <_IO_stdin_used+0x1f3c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x40627(%rip),%rdx        # <_IO_stdin_used+0x1f3c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x113e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x394eb>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3955b>
	test   %eax,%eax
	je     <context_execute_loop+0x394eb>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x39517>
	jmp    <context_execute_loop+0x3955b>
	movzbl -0x113e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39585>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39585>
	movzbl -0x113e(%rbp),%edx
	mov    0x516c2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3e9a3(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x399bb>
	movzbl -0x113e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x399bb>
	cmpb   $0x2,-0x113e(%rbp)
	jne    <context_execute_loop+0x395d5>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x5a0(%rbp)
	jmp    <context_execute_loop+0x395fa>
	movzbl -0x113e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x399bb>
	movzbl -0x113e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x399bb>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x113e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x399bb>
	movzbl -0x113e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x113d(%rbp)
	movzbl -0x113d(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3970f>
	movzbl -0x113d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3979f>
	movzbl -0x113d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x113c(%rbp)
	movzbl -0x113d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x113c(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xee6(%rbp)
	movzwl -0xee6(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x5a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x397ea>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x399bb>
	movzbl -0x113e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x113e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x399bb>
	movzbl -0x113e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3987f>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x398d6>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x113e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39932>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x5a0(%rbp)
	mov    -0x5a0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x399bb>
	movzbl -0x113e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x113e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x5a0(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x113b(%rbp)
	movzbl -0x113b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x39a14>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x39a87>
	test   %eax,%eax
	je     <context_execute_loop+0x39a14>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x39a38>
	jmp    <context_execute_loop+0x39a87>
	movzbl -0x113b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb20(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39ab1>
	movzbl -0x113b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb20(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39ab1>
	movzbl -0x113b(%rbp),%edx
	mov    0x51196(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3e417(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xb20(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	mov    %eax,-0xad8(%rbp)
	movl   $0x0,-0xb1c(%rbp)
	movl   $0x0,-0xb18(%rbp)
	jmp    <context_execute_loop+0x3a23a>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x113a(%rbp)
	movzbl -0x113a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3a229>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3fff3(%rip),%rax        # <_IO_stdin_used+0x1f70>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3ffe7(%rip),%rdx        # <_IO_stdin_used+0x1f70>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x113a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x39b5f>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x39bcf>
	test   %eax,%eax
	je     <context_execute_loop+0x39b5f>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x39b8b>
	jmp    <context_execute_loop+0x39bcf>
	movzbl -0x113a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39bf9>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39bf9>
	movzbl -0x113a(%rbp),%edx
	mov    0x5104e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3e32f(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3a02f>
	movzbl -0x113a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3a02f>
	cmpb   $0x2,-0x113a(%rbp)
	jne    <context_execute_loop+0x39c49>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x598(%rbp)
	jmp    <context_execute_loop+0x39c6e>
	movzbl -0x113a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3a02f>
	movzbl -0x113a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3a02f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x113a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3a02f>
	movzbl -0x113a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3a230>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1139(%rbp)
	movzbl -0x1139(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x39d83>
	movzbl -0x1139(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39e13>
	movzbl -0x1139(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3a230>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1138(%rbp)
	movzbl -0x1139(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1138(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xee4(%rbp)
	movzwl -0xee4(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x598(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x39e5e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3a235>
	jmp    <context_execute_loop+0x3a02f>
	movzbl -0x113a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3a230>
	movzbl -0x113a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3a02f>
	movzbl -0x113a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x39ef3>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x39f4a>
	jmp    <context_execute_loop+0x3a230>
	movzbl -0x113a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x39fa6>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x598(%rbp)
	mov    -0x598(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3a235>
	jmp    <context_execute_loop+0x3a02f>
	movzbl -0x113a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3a230>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x113a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x598(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1137(%rbp)
	movzbl -0x1137(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1136(%rbp)
	movzbl -0x1137(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1135(%rbp)
	movzbl -0x1136(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x3a0f9>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3a22f>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3a098>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x3a0c7>
	jmp    <context_execute_loop+0x3a22f>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1135(%rbp),%eax
	mov    %eax,-0xb14(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3a176>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1135(%rbp),%eax
	mov    %eax,-0xb14(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3a176>
	movzbl -0x1137(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3a230>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1137(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb14(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x598(%rbp),%rdx
	mov    -0x5a0(%rbp),%rcx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_find_map_pos>
	mov    %eax,-0xad4(%rbp)
	cmpl   $0xffffffff,-0xad4(%rbp)
	jne    <context_execute_loop+0x3a1db>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xb24(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	movl   $0x1,-0xb1c(%rbp)
	jmp    <context_execute_loop+0x3a220>
	mov    -0xad4(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x5a0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,-0x4b8(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xb14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x4b8(%rbp),%rax
	mov    %rax,(%rdx)
	addl   $0x1,-0xb18(%rbp)
	jmp    <context_execute_loop+0x3a23a>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	jmp    <context_execute_loop+0x3da8d>
	mov    -0xb18(%rbp),%eax
	cmp    -0xad8(%rbp),%eax
	jge    <context_execute_loop+0x3a255>
	cmpl   $0x0,-0xb1c(%rbp)
	je     <context_execute_loop+0x39adf>
	cmpl   $0x0,-0xb1c(%rbp)
	jne    <context_execute_loop+0x3d6db>
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1145(%rbp)
	movzbl -0x1145(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3a2c7>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3a33a>
	test   %eax,%eax
	je     <context_execute_loop+0x3a2c7>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3a2eb>
	jmp    <context_execute_loop+0x3a33a>
	movzbl -0x1145(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb10(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a364>
	movzbl -0x1145(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb10(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a364>
	movzbl -0x1145(%rbp),%edx
	mov    0x508e3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3db2c(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1144(%rbp)
	movzbl -0x1144(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da14>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3f7a2(%rip),%rax        # <_IO_stdin_used+0x1fa4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3f796(%rip),%rdx        # <_IO_stdin_used+0x1fa4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1144(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3a3e4>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3a454>
	test   %eax,%eax
	je     <context_execute_loop+0x3a3e4>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3a410>
	jmp    <context_execute_loop+0x3a454>
	movzbl -0x1144(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a47e>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a47e>
	movzbl -0x1144(%rbp),%edx
	mov    0x507c9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3daaa(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3a8b4>
	movzbl -0x1144(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a8b4>
	cmpb   $0x2,-0x1144(%rbp)
	jne    <context_execute_loop+0x3a4ce>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x590(%rbp)
	jmp    <context_execute_loop+0x3a4f3>
	movzbl -0x1144(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a8b4>
	movzbl -0x1144(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a8b4>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1144(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a8b4>
	movzbl -0x1144(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1143(%rbp)
	movzbl -0x1143(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3a608>
	movzbl -0x1143(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a698>
	movzbl -0x1143(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1142(%rbp)
	movzbl -0x1143(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1142(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xee8(%rbp)
	movzwl -0xee8(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0x590(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3a6e3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3a8b4>
	movzbl -0x1144(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1144(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a8b4>
	movzbl -0x1144(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3a778>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3a7cf>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1144(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a82b>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa00(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa00(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x590(%rbp)
	mov    -0x590(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3a8b4>
	movzbl -0x1144(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1144(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x590(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1141(%rbp)
	movzbl -0x1141(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3a8fe>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3a971>
	test   %eax,%eax
	je     <context_execute_loop+0x3a8fe>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3a922>
	jmp    <context_execute_loop+0x3a971>
	movzbl -0x1141(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb0c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a99b>
	movzbl -0x1141(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb0c(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3a99b>
	movzbl -0x1141(%rbp),%edx
	mov    0x502ac(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3d52d(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xa00(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1140(%rbp)
	movzbl -0x1140(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3a9e5>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3aa58>
	test   %eax,%eax
	je     <context_execute_loop+0x3a9e5>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3aa09>
	jmp    <context_execute_loop+0x3aa58>
	movzbl -0x1140(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xb08(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3aa82>
	movzbl -0x1140(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa00(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb08(%rbp)
	mov    -0xa00(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa00(%rbp)
	jmp    <context_execute_loop+0x3aa82>
	movzbl -0x1140(%rbp),%edx
	mov    0x501c5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3d40e(%rip),%rcx        # <_IO_stdin_used+0x2d0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x11a0(%rbp),%rax
	mov    -0xb08(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x4c0(%rbp)
	mov    -0x590(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <context_execute_loop+0x3aaf5>
	mov    -0x590(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    %eax,-0xb0c(%rbp)
	jne    <context_execute_loop+0x3aaf5>
	mov    -0x590(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	cmp    %rax,-0x4c0(%rbp)
	jne    <context_execute_loop+0x3aaf5>
	mov    -0xa00(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3ab20>
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xb10(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	nop
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x114b(%rbp)
	movzbl -0x114b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da17>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3f00b(%rip),%rax        # <_IO_stdin_used+0x1fd8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3efff(%rip),%rdx        # <_IO_stdin_used+0x1fd8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x114b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3abaf>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3ac1f>
	test   %eax,%eax
	je     <context_execute_loop+0x3abaf>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3abdb>
	jmp    <context_execute_loop+0x3ac1f>
	movzbl -0x114b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3ac49>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3ac49>
	movzbl -0x114b(%rbp),%edx
	mov    0x4fffe(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3d2df(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3b07f>
	movzbl -0x114b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b07f>
	cmpb   $0x2,-0x114b(%rbp)
	jne    <context_execute_loop+0x3ac99>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x588(%rbp)
	jmp    <context_execute_loop+0x3acbe>
	movzbl -0x114b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b07f>
	movzbl -0x114b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b07f>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x114b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b07f>
	movzbl -0x114b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x114a(%rbp)
	movzbl -0x114a(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3add3>
	movzbl -0x114a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3ae63>
	movzbl -0x114a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1149(%rbp)
	movzbl -0x114a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1149(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeea(%rbp)
	movzwl -0xeea(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x588(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3aeae>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3b07f>
	movzbl -0x114b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x114b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b07f>
	movzbl -0x114b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3af43>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3af9a>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x114b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3aff6>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x588(%rbp)
	mov    -0x588(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3b07f>
	movzbl -0x114b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x114b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x588(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1148(%rbp)
	movzbl -0x1148(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1147(%rbp)
	movzbl -0x1148(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1146(%rbp)
	movzbl -0x1147(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x3b149>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3da1a>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3b0e8>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x3b117>
	jmp    <context_execute_loop+0x3da1a>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1146(%rbp),%eax
	mov    %eax,-0xb04(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b1c6>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1146(%rbp),%eax
	mov    %eax,-0xb04(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b1c6>
	movzbl -0x1148(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1148(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb04(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x588(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x4c8(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xb04(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x4c8(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1151(%rbp)
	movzbl -0x1151(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da1d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3e954(%rip),%rax        # <_IO_stdin_used+0x200c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3e948(%rip),%rdx        # <_IO_stdin_used+0x200c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1151(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3b29a>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3b30a>
	test   %eax,%eax
	je     <context_execute_loop+0x3b29a>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3b2c6>
	jmp    <context_execute_loop+0x3b30a>
	movzbl -0x1151(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b334>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b334>
	movzbl -0x1151(%rbp),%edx
	mov    0x4f913(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3cbf4(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3b76a>
	movzbl -0x1151(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b76a>
	cmpb   $0x2,-0x1151(%rbp)
	jne    <context_execute_loop+0x3b384>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x580(%rbp)
	jmp    <context_execute_loop+0x3b3a9>
	movzbl -0x1151(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b76a>
	movzbl -0x1151(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b76a>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1151(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b76a>
	movzbl -0x1151(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1150(%rbp)
	movzbl -0x1150(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3b4be>
	movzbl -0x1150(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b54e>
	movzbl -0x1150(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x114f(%rbp)
	movzbl -0x1150(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x114f(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeec(%rbp)
	movzwl -0xeec(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x580(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3b599>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3b76a>
	movzbl -0x1151(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1151(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b76a>
	movzbl -0x1151(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3b62e>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3b685>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1151(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b6e1>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x580(%rbp)
	mov    -0x580(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3b76a>
	movzbl -0x1151(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1151(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x580(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x114e(%rbp)
	movzbl -0x114e(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x114d(%rbp)
	movzbl -0x114e(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x114c(%rbp)
	movzbl -0x114d(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x3b834>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3da20>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3b7d3>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x3b802>
	jmp    <context_execute_loop+0x3da20>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x114c(%rbp),%eax
	mov    %eax,-0xb00(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b8b1>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x114c(%rbp),%eax
	mov    %eax,-0xb00(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3b8b1>
	movzbl -0x114e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x114e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xb00(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x580(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x4d0(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xb00(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x4d0(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1158(%rbp)
	movzbl -0x1158(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1157(%rbp)
	movzbl -0x1158(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1156(%rbp)
	movzbl -0x1157(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x3b9cf>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3da23>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3b96e>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x3b99d>
	jmp    <context_execute_loop+0x3da23>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1156(%rbp),%eax
	mov    %eax,-0xafc(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3ba4c>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1156(%rbp),%eax
	mov    %eax,-0xafc(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3ba4c>
	movzbl -0x1158(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1158(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xafc(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1155(%rbp)
	movzbl -0x1155(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3baa5>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3bb18>
	test   %eax,%eax
	je     <context_execute_loop+0x3baa5>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3bac9>
	jmp    <context_execute_loop+0x3bb18>
	movzbl -0x1155(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0xaf8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3bb42>
	movzbl -0x1155(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xaf8(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3bb42>
	movzbl -0x1155(%rbp),%edx
	mov    0x4f105(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3c386(%rip),%rcx        # <_IO_stdin_used+0x308>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xaf8(%rbp),%eax
	mov    -0x1198(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x4d8(%rbp)
	movl   $0x0,-0xaf4(%rbp)
	jmp    <context_execute_loop+0x3c0e4>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1154(%rbp)
	movzbl -0x1154(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da26>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3e033(%rip),%rax        # <_IO_stdin_used+0x2040>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3e027(%rip),%rdx        # <_IO_stdin_used+0x2040>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1154(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3bbef>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3bc5f>
	test   %eax,%eax
	je     <context_execute_loop+0x3bbef>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3bc1b>
	jmp    <context_execute_loop+0x3bc5f>
	movzbl -0x1154(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3bc89>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3bc89>
	movzbl -0x1154(%rbp),%edx
	mov    0x4efbe(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3c29f(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3c0bf>
	movzbl -0x1154(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c0bf>
	cmpb   $0x2,-0x1154(%rbp)
	jne    <context_execute_loop+0x3bcd9>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x578(%rbp)
	jmp    <context_execute_loop+0x3bcfe>
	movzbl -0x1154(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c0bf>
	movzbl -0x1154(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c0bf>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1154(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c0bf>
	movzbl -0x1154(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1153(%rbp)
	movzbl -0x1153(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3be13>
	movzbl -0x1153(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3bea3>
	movzbl -0x1153(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1152(%rbp)
	movzbl -0x1153(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1152(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xeee(%rbp)
	movzwl -0xeee(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x578(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3beee>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3c0bf>
	movzbl -0x1154(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1154(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c0bf>
	movzbl -0x1154(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3bf83>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3bfda>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1154(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c036>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x578(%rbp)
	mov    -0x578(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3c0bf>
	movzbl -0x1154(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1154(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x578(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xaf4(%rbp),%ecx
	mov    -0x578(%rbp),%rdx
	mov    -0x4d8(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	addl   $0x1,-0xaf4(%rbp)
	mov    -0xaf4(%rbp),%eax
	cmp    -0xaf8(%rbp),%eax
	jl     <context_execute_loop+0x3bb6f>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xafc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x4d8(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	movl   $0x1,-0xaf0(%rbp)
	mov    -0xaf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1183(%rbp)
	movzbl -0x1183(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1182(%rbp)
	movzbl -0x1183(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1181(%rbp)
	movzbl -0x1182(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x3c1ec>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3da29>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3c19b>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x3c1c2>
	jmp    <context_execute_loop+0x3da29>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0x1181(%rbp),%eax
	mov    %eax,-0xaec(%rbp)
	addl   $0x1,-0xaf0(%rbp)
	jmp    <context_execute_loop+0x3c25f>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0x1181(%rbp),%eax
	mov    %eax,-0xaec(%rbp)
	addl   $0x1,-0xaf0(%rbp)
	jmp    <context_execute_loop+0x3c25f>
	movzbl -0x1183(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa08(%rbp)
	movzbl -0x1183(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xaf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xaec(%rbp)
	addl   $0x2,-0xaf0(%rbp)
	mov    -0xaf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1180(%rbp)
	movzbl -0x1180(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x117f(%rbp)
	movzbl -0x1180(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x117e(%rbp)
	movzbl -0x117f(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x3c317>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3da2c>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3c2c6>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x3c2ed>
	jmp    <context_execute_loop+0x3da2c>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x117e(%rbp),%eax
	mov    %eax,-0xae8(%rbp)
	addl   $0x1,-0xaf0(%rbp)
	jmp    <context_execute_loop+0x3c38a>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x117e(%rbp),%eax
	mov    %eax,-0xae8(%rbp)
	addl   $0x1,-0xaf0(%rbp)
	jmp    <context_execute_loop+0x3c38a>
	movzbl -0x1180(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1180(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xaf0(%rbp),%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0xae8(%rbp)
	addl   $0x2,-0xaf0(%rbp)
	mov    -0xa08(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xaec(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x540(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xae8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x538(%rbp)
	mov    -0xa08(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xaec(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x538(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xae8(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x540(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xaf0(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x1198(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <context_execute_loop+0x3c46e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	movl   $0x1,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x118f(%rbp)
	movzbl -0x118f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da2f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3d75e(%rip),%rax        # <_IO_stdin_used+0x2074>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3d752(%rip),%rdx        # <_IO_stdin_used+0x2074>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x118f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3c4f8>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3c568>
	test   %eax,%eax
	je     <context_execute_loop+0x3c4f8>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3c524>
	jmp    <context_execute_loop+0x3c568>
	movzbl -0x118f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c592>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c592>
	movzbl -0x118f(%rbp),%edx
	mov    0x4e6b5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3b996(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3c9c8>
	movzbl -0x118f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c9c8>
	cmpb   $0x2,-0x118f(%rbp)
	jne    <context_execute_loop+0x3c5e2>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x570(%rbp)
	jmp    <context_execute_loop+0x3c607>
	movzbl -0x118f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c9c8>
	movzbl -0x118f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c9c8>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x118f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c9c8>
	movzbl -0x118f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x118e(%rbp)
	movzbl -0x118e(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3c71c>
	movzbl -0x118e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c7ac>
	movzbl -0x118e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x118d(%rbp)
	movzbl -0x118e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x118d(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xf06(%rbp)
	movzwl -0xf06(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x570(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3c7f7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3c9c8>
	movzbl -0x118f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x118f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c9c8>
	movzbl -0x118f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3c88c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3c8e3>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x118f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3c93f>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x570(%rbp)
	mov    -0x570(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3c9c8>
	movzbl -0x118f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x118f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x570(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x118c(%rbp)
	movzbl -0x118c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da32>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3d242(%rip),%rax        # <_IO_stdin_used+0x20a8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3d236(%rip),%rdx        # <_IO_stdin_used+0x20a8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x118c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3ca48>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3cab8>
	test   %eax,%eax
	je     <context_execute_loop+0x3ca48>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3ca74>
	jmp    <context_execute_loop+0x3cab8>
	movzbl -0x118c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3cae2>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3cae2>
	movzbl -0x118c(%rbp),%edx
	mov    0x4e165(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3b446(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3cf18>
	movzbl -0x118c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3cf18>
	cmpb   $0x2,-0x118c(%rbp)
	jne    <context_execute_loop+0x3cb32>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x568(%rbp)
	jmp    <context_execute_loop+0x3cb57>
	movzbl -0x118c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3cf18>
	movzbl -0x118c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3cf18>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x118c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3cf18>
	movzbl -0x118c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x118b(%rbp)
	movzbl -0x118b(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3cc6c>
	movzbl -0x118b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3ccfc>
	movzbl -0x118b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x118a(%rbp)
	movzbl -0x118b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x118a(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xf04(%rbp)
	movzwl -0xf04(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x568(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3cd47>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3cf18>
	movzbl -0x118c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x118c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3cf18>
	movzbl -0x118c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3cddc>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3ce33>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x118c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3ce8f>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x568(%rbp)
	mov    -0x568(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3cf18>
	movzbl -0x118c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x118c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x568(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1189(%rbp)
	movzbl -0x1189(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <context_execute_loop+0x3da35>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3cd26(%rip),%rax        # <_IO_stdin_used+0x20dc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3cd1a(%rip),%rdx        # <_IO_stdin_used+0x20dc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x1189(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <context_execute_loop+0x3cf98>
	cmp    $0x2,%eax
	jg     <context_execute_loop+0x3d008>
	test   %eax,%eax
	je     <context_execute_loop+0x3cf98>
	cmp    $0x1,%eax
	je     <context_execute_loop+0x3cfc4>
	jmp    <context_execute_loop+0x3d008>
	movzbl -0x1189(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d032>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d032>
	movzbl -0x1189(%rbp),%edx
	mov    0x4dc15(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3aef6(%rip),%rcx        # <_IO_stdin_used+0x368>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <context_execute_loop+0x3d468>
	movzbl -0x1189(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d468>
	cmpb   $0x2,-0x1189(%rbp)
	jne    <context_execute_loop+0x3d082>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x560(%rbp)
	jmp    <context_execute_loop+0x3d0a7>
	movzbl -0x1189(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d468>
	movzbl -0x1189(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%edx
	mov    -0x1198(%rbp),%rax
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d468>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1189(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d468>
	movzbl -0x1189(%rbp),%eax
	cmp    $0x47,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1188(%rbp)
	movzbl -0x1188(%rbp),%eax
	and    $0xf,%eax
	test   %eax,%eax
	jne    <context_execute_loop+0x3d1bc>
	movzbl -0x1188(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d24c>
	movzbl -0x1188(%rbp),%eax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1187(%rbp)
	movzbl -0x1188(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	movzbl -0x1187(%rbp),%eax
	or     %edx,%eax
	mov    %ax,-0xf02(%rbp)
	movzwl -0xf02(%rbp),%ecx
	mov    -0x11a0(%rbp),%rax
	mov    -0x1198(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_load_literal>
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x560(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3d297>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	jmp    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3d468>
	movzbl -0x1189(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	jne    <context_execute_loop+0x3da39>
	movzbl -0x1189(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %eax,%edx
	mov    -0x11a0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_term_by_id>
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d468>
	movzbl -0x1189(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <context_execute_loop+0x3d32c>
	cmp    $0x18,%eax
	je     <context_execute_loop+0x3d383>
	jmp    <context_execute_loop+0x3da39>
	movzbl -0x1189(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%ax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	cwtl   
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d3df>
	mov    -0xdfc(%rbp),%edx
	mov    -0xa08(%rbp),%eax
	cltq   
	add    %rax,%rdx
	mov    -0x9f8(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	lea    -0xa08(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <large_integer_to_term>
	mov    %rax,-0x560(%rbp)
	mov    -0x560(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <context_execute_loop+0x3da8d>
	jmp    <context_execute_loop+0x3d468>
	movzbl -0x1189(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	mov    0xf8(%rax),%rdx
	movzbl -0x1189(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%esi
	mov    -0xdfc(%rbp),%eax
	add    %esi,%eax
	add    $0x1,%eax
	mov    %eax,%esi
	mov    -0x9f8(%rbp),%rax
	add    %rsi,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x560(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0xa08(%rbp),%eax
	mov    %eax,%edx
	mov    -0xdfc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x1186(%rbp)
	movzbl -0x1186(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x1185(%rbp)
	movzbl -0x1186(%rbp),%eax
	shr    $0x4,%al
	mov    %al,-0x1184(%rbp)
	movzbl -0x1185(%rbp),%eax
	cmp    $0xc,%eax
	je     <context_execute_loop+0x3d532>
	cmp    $0xc,%eax
	jg     <context_execute_loop+0x3da38>
	cmp    $0x3,%eax
	je     <context_execute_loop+0x3d4d1>
	cmp    $0x4,%eax
	je     <context_execute_loop+0x3d500>
	jmp    <context_execute_loop+0x3da38>
	lea    -0xa10(%rbp),%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1184(%rbp),%eax
	mov    %eax,-0xae4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d5af>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1184(%rbp),%eax
	mov    %eax,-0xae4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0xa08(%rbp)
	jmp    <context_execute_loop+0x3d5af>
	movzbl -0x1186(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3da39>
	mov    -0x1198(%rbp),%rax
	add    $0xf8,%rax
	mov    %rax,-0xa00(%rbp)
	movzbl -0x1186(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%edx
	mov    -0xa08(%rbp),%eax
	mov    %eax,%ecx
	mov    -0xdfc(%rbp),%eax
	add    %ecx,%eax
	add    $0x1,%eax
	mov    %eax,%ecx
	mov    -0x9f8(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %edx,%eax
	mov    %eax,-0xae4(%rbp)
	mov    -0xa08(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0xa08(%rbp)
	mov    -0x560(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	jne    <context_execute_loop+0x3d623>
	mov    -0x560(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	jne    <context_execute_loop+0x3d623>
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xae4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x560(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0x570(%rbp),%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3d675>
	mov    -0x1198(%rbp),%rdx
	mov    -0x560(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_alloc_bin_match_state>
	mov    %rax,-0x548(%rbp)
	mov    -0xa00(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xae4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x548(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0xa08(%rbp),%eax
	add    %eax,-0xdfc(%rbp)
	nop
	jmp    <context_execute_loop+0x3dd40>
	mov    -0xdfc(%rbp),%edx
	mov    -0x9f8(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    %eax,%esi
	lea    0x3a8f3(%rip),%rax        # <_IO_stdin_used+0x3e1>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	mov    0x4d57e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0xdfc(%rbp),%edx
	lea    0x3a8e8(%rip),%rcx        # <_IO_stdin_used+0x3f7>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	nop
	jmp    <context_execute_loop+0x3dd40>
	nop
	jmp    <context_execute_loop+0x3dd40>
	nop
	jmp    <context_execute_loop+0x3dd40>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	jmp    <context_execute_loop+0x3da39>
	nop
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x1198(%rbp),%rax
	movq   $0xa4b,0x60(%rax)
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	jmp    <context_execute_loop+0x3da8d>
	nop
	lea    -0x11a0(%rbp),%rdx
	mov    -0x1198(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <get_catch_label_and_change_module>
	mov    %eax,-0xa1c(%rbp)
	cmpl   $0x0,-0xa1c(%rbp)
	je     <context_execute_loop+0x3dafa>
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xa1c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x3dd40>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rdi
	call   <dump>
	mov    -0x1198(%rbp),%rax
	mov    0x58(%rax),%rax
	cmp    $0x88b,%rax
	sete   %al
	mov    %al,-0xf08(%rbp)
	cmpb   $0x0,-0xf08(%rbp)
	je     <context_execute_loop+0x3db33>
	mov    $0x6,%eax
	jmp    <context_execute_loop+0x3db38>
	mov    $0x3,%eax
	mov    %eax,-0xa18(%rbp)
	mov    -0xa18(%rbp),%edx
	mov    -0x1198(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <context_execute_loop+0x3db76>
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x1198(%rbp),%rdx
	mov    %rax,0x1b8(%rdx)
	jmp    <context_execute_loop+0x3dc46>
	cmpb   $0x0,-0xf08(%rbp)
	je     <context_execute_loop+0x3dbd4>
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x558(%rbp)
	mov    -0x558(%rbp),%rax
	mov    $0xbcb,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x1198(%rbp),%rax
	mov    0x60(%rax),%rdx
	mov    -0x558(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	jmp    <context_execute_loop+0x3dbe6>
	mov    -0x1198(%rbp),%rax
	mov    0x60(%rax),%rax
	mov    %rax,-0x558(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x30(%rbp)
	mov    -0x558(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x1198(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	mov    %rdx,0x1b8(%rax)
	mov    -0x1198(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x1,%eax
	test   %al,%al
	je     <context_execute_loop+0x3dc65>
	mov    $0x0,%eax
	jmp    <context_execute_loop+0x3dd45>
	mov    -0x1198(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    %rax,%rdi
	call   <scheduler_terminate>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <scheduler_do_wait>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	cmp    -0x1198(%rbp),%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_execute_loop+0x3dcd6>
	mov    0x4cf78(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x25,%edx
	mov    $0x1,%esi
	lea    0x3a2ec(%rip),%rax        # <_IO_stdin_used+0x408>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    $0x0,%eax
	jmp    <context_execute_loop+0x3dd45>
	mov    -0x20(%rbp),%rax
	mov    %rax,-0x1198(%rbp)
	mov    -0x1198(%rbp),%rax
	add    $0x58,%rax
	mov    %rax,-0xa10(%rbp)
	mov    -0x1198(%rbp),%rax
	mov    0x118(%rax),%rax
	mov    %rax,-0x11a0(%rbp)
	mov    -0x11a0(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x9f8(%rbp)
	movl   $0x400,-0xdf8(%rbp)
	mov    -0x20(%rbp),%rax
	mov    0x120(%rax),%rax
	sub    -0x9f8(%rbp),%rax
	mov    %eax,-0xdfc(%rbp)
	jmp    <context_execute_loop+0x1b7>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <context_execute_loop+0x3dd59>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<context_new>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    $0x1c8,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_new+0x5f>
	mov    0x4ce97(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x29,%ecx
	lea    0x3bf1b(%rip),%rdx        # <_IO_stdin_used+0x2110>
	lea    0x3bf4c(%rip),%rsi        # <_IO_stdin_used+0x2148>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	jmp    <context_new+0x32f>
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x110(%rax)
	mov    $0x8,%esi
	mov    $0x8,%edi
	call   <calloc@plt>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0xe0(%rax)
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_new+0xe1>
	mov    0x4ce21(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x30,%ecx
	lea    0x3bea5(%rip),%rdx        # <_IO_stdin_used+0x2110>
	lea    0x3bed6(%rip),%rsi        # <_IO_stdin_used+0x2148>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <context_new+0x32f>
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rax
	lea    0x40(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0xe8(%rax)
	mov    -0x8(%rbp),%rax
	mov    0xe8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0xf0(%rax)
	mov    -0x8(%rbp),%rax
	movl   $0x10,0xd8(%rax)
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <context_clean_registers>
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x100(%rax)
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x108(%rax)
	mov    -0x8(%rbp),%rax
	movzbl 0x178(%rax),%edx
	and    $0xfffffffd,%edx
	mov    %dl,0x178(%rax)
	mov    -0x8(%rbp),%rax
	movzbl 0x178(%rax),%edx
	and    $0xfffffffb,%edx
	mov    %dl,0x178(%rax)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <list_append>
	mov    -0x8(%rbp),%rax
	add    $0x130,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	add    $0x140,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	add    $0x150,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,0x160(%rax)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <globalcontext_get_new_process_id>
	mov    -0x8(%rbp),%rdx
	mov    %eax,0x20(%rdx)
	mov    -0x8(%rbp),%rax
	lea    0x10(%rax),%rdx
	mov    -0x18(%rbp),%rax
	add    $0x30,%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <list_append>
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x168(%rax)
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x120(%rax)
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x8(%rbp),%rax
	movzbl 0x178(%rax),%edx
	and    $0xfffffffe,%edx
	mov    %dl,0x178(%rax)
	mov    -0x8(%rbp),%rax
	add    $0x28,%rax
	mov    $0x0,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <timer_wheel_item_init>
	mov    -0x8(%rbp),%rax
	add    $0x48,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	movzbl 0x178(%rax),%edx
	and    $0xfffffff7,%edx
	mov    %dl,0x178(%rax)
	mov    -0x8(%rbp),%rax
	add    $0x180,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	movl   $0x0,0x190(%rax)
	mov    -0x8(%rbp),%rax
	movl   $0x0,0x194(%rax)
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x198(%rax)
	mov    $0x0,%edi
	call   <term_from_local_process_id>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x1a0(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x1a8(%rdx)
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x1b0(%rax)
	mov    -0x8(%rbp),%rax
	movq   $0xb0b,0x1b8(%rax)
	mov    $0x0,%eax
	call   <term_nil>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x1c0(%rdx)
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<context_destroy>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x8(%rbp),%rax
	mov    0x1c0(%rax),%rax
	mov    %rax,%rdi
	call   <memory_sweep_mso_list>
	mov    -0x8(%rbp),%rax
	add    $0x150,%rax
	mov    %rax,%rdi
	call   <dictionary_destroy>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <context_monitors_handle_terminate>
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<context_message_queue_len>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	movq   $0x0,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x130(%rax),%rax
	mov    %rax,-0x8(%rbp)
	jmp    <context_message_queue_len+0x35>
	addq   $0x1,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x130,%rax
	cmp    %rax,-0x8(%rbp)
	jne    <context_message_queue_len+0x25>
	mov    -0x10(%rbp),%rax
	pop    %rbp
	ret    

<context_size>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x28(%rbp)
	movq   $0x0,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x130(%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <context_size+0x55>
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	add    $0x28,%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	add    $0x130,%rax
	cmp    %rax,-0x10(%rbp)
	jne    <context_size+0x29>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <context_memory_size>
	lea    0x0(,%rax,8),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	add    $0x1c8,%rax
	leave  
	ret    

<context_monitors_handle_terminate>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x48(%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	jmp    <context_monitors_handle_terminate+0x329>
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x40(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x40(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x20(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_monitors_handle_terminate+0x84>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	jmp    <context_monitors_handle_terminate+0x316>
	mov    -0x28(%rbp),%rax
	movzbl 0x20(%rax),%eax
	and    $0x1,%eax
	test   %al,%al
	je     <context_monitors_handle_terminate+0x1e5>
	mov    -0x48(%rbp),%rax
	mov    0x1b8(%rax),%rax
	cmp    $0xb0b,%rax
	jne    <context_monitors_handle_terminate+0xc0>
	mov    -0x20(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x8,%eax
	test   %al,%al
	je     <context_monitors_handle_terminate+0x1e5>
	mov    -0x20(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x8,%eax
	test   %al,%al
	je     <context_monitors_handle_terminate+0x19d>
	mov    -0x48(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_monitors_handle_terminate+0x11c>
	mov    0x4c95a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x1d,%edx
	mov    $0x1,%esi
	lea    0x3ba31(%rip),%rax        # <_IO_stdin_used+0x216b>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x3,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    $0xccb,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x48(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x48(%rbp),%rax
	mov    0x1b8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x18(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <mailbox_send>
	jmp    <context_monitors_handle_terminate+0x30a>
	mov    -0x48(%rbp),%rax
	lea    0x1c0(%rax),%rdx
	mov    -0x48(%rbp),%rax
	mov    0x1b8(%rax),%rax
	mov    -0x48(%rbp),%rcx
	add    $0xf0,%rcx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memory_copy_term_tree>
	mov    -0x20(%rbp),%rdx
	mov    %rax,0x1b8(%rdx)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <scheduler_terminate>
	jmp    <context_monitors_handle_terminate+0x30a>
	mov    -0x28(%rbp),%rax
	movzbl 0x20(%rax),%eax
	and    $0x1,%eax
	xor    $0x1,%eax
	test   %al,%al
	je     <context_monitors_handle_terminate+0x30a>
	movl   $0x8,-0x3c(%rbp)
	mov    -0x3c(%rbp),%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_monitors_handle_terminate+0x248>
	mov    0x4c82e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x1d,%edx
	mov    $0x1,%esi
	lea    0x3b905(%rip),%rax        # <_IO_stdin_used+0x216b>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0x28(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    -0x48(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x10(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x5,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0xb4b,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x8(%rbp),%rax
	mov    $0xb8b,%edx
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x48(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x48(%rbp),%rax
	mov    0x1b8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x8(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <mailbox_send>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x30(%rbp),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x48(%rbp),%rax
	add    $0x48,%rax
	cmp    %rax,-0x38(%rbp)
	jne    <context_monitors_handle_terminate+0x2c>
	nop
	nop
	leave  
	ret    

<context_monitor>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %edx,%eax
	mov    %al,-0x24(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <globalcontext_get_ref_ticks>
	mov    %rax,-0x10(%rbp)
	mov    $0x28,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <context_monitor+0x55>
	mov    $0x0,%eax
	jmp    <context_monitor+0xa1>
	mov    -0x8(%rbp),%rax
	mov    -0x20(%rbp),%rdx
	mov    %rdx,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x8(%rbp),%rax
	movzbl -0x24(%rbp),%edx
	mov    %edx,%ecx
	and    $0x1,%ecx
	movzbl 0x20(%rax),%edx
	and    $0xfffffffe,%edx
	or     %ecx,%edx
	mov    %dl,0x20(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	add    $0x48,%rdx
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_append>
	mov    -0x10(%rbp),%rax
	leave  
	ret    

<context_demonitor>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %edx,%eax
	mov    %al,-0x24(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x48(%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <context_demonitor+0x72>
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rax
	cmp    %rax,-0x20(%rbp)
	jne    <context_demonitor+0x67>
	mov    -0x8(%rbp),%rax
	movzbl 0x20(%rax),%eax
	and    $0x1,%eax
	cmp    %al,-0x24(%rbp)
	jne    <context_demonitor+0x67>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	jmp    <context_demonitor+0x80>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x48,%rax
	cmp    %rax,-0x10(%rbp)
	jne    <context_demonitor+0x27>
	leave  
	ret    

<list_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<list_remove>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x8(%rax)
	nop
	pop    %rbp
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<dictionary_find>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <dictionary_find+0x5d>
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    -0x20(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	jne    <dictionary_find+0x52>
	mov    -0x8(%rbp),%rax
	jmp    <dictionary_find+0x6c>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	cmp    -0x18(%rbp),%rax
	jne    <dictionary_find+0x25>
	mov    $0x0,%eax
	leave  
	ret    

<dictionary_put>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <dictionary_find>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	je     <dictionary_put+0x5c>
	mov    -0x10(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x8(%rbp),%rax
	jmp    <dictionary_put+0x9f>
	mov    $0x20,%edi
	call   <malloc@plt>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    -0x28(%rbp),%rdx
	mov    %rdx,0x10(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x10(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <list_prepend>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	leave  
	ret    

<dictionary_get>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <dictionary_find>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	je     <dictionary_get+0x44>
	mov    -0x8(%rbp),%rax
	mov    0x18(%rax),%rax
	jmp    <dictionary_get+0x4e>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	leave  
	ret    

<dictionary_erase>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <dictionary_find>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	jne    <dictionary_erase+0x46>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	jmp    <dictionary_erase+0x6e>
	mov    -0x10(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<dictionary_destroy>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	jmp    <dictionary_destroy+0x47>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	cmp    -0x18(%rbp),%rax
	jne    <dictionary_destroy+0x28>
	nop
	nop
	leave  
	ret    

<linkedlist_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<linkedlist_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	test   %rax,%rax
	jne    <linkedlist_append+0x40>
	mov    -0x10(%rbp),%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_insert>
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	jmp    <linkedlist_append+0x61>
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    0x8(%rax),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_insert>
	nop
	leave  
	ret    

<list_remove>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x8(%rax)
	nop
	pop    %rbp
	ret    

<list_init>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<term_is_atom>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0xb,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_to_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<globalcontext_new>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xb0,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_new+0x34>
	mov    $0x0,%eax
	jmp    <globalcontext_new+0x242>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	add    $0x78,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	add    $0x20,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	add    $0x30,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x40(%rax)
	mov    -0x8(%rbp),%rax
	movl   $0x0,0x48(%rax)
	mov    $0x0,%eax
	call   <atomshashtable_new>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x50(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x50(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_new+0xd5>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <globalcontext_new+0x242>
	mov    $0x0,%eax
	call   <valueshashtable_new>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x58(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_new+0x123>
	mov    -0x8(%rbp),%rax
	mov    0x50(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <globalcontext_new+0x242>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <defaultatoms_init>
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x68(%rax)
	mov    -0x8(%rbp),%rax
	movl   $0x0,0x70(%rax)
	mov    $0x0,%eax
	call   <atomshashtable_new>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x60(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_new+0x1a4>
	mov    -0x8(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    0x50(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <globalcontext_new+0x242>
	mov    $0x10,%edi
	call   <timer_wheel_new>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x90(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x90(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_new+0x215>
	mov    -0x8(%rbp),%rax
	mov    0x60(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    0x50(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <globalcontext_new+0x242>
	mov    -0x8(%rbp),%rax
	movl   $0x0,0x98(%rax)
	mov    -0x8(%rbp),%rax
	movq   $0x0,0xa0(%rax)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <sys_init_platform>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<globalcontext_destroy>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    $0x0,%eax
	call   <sys_stop_millis_timer>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<globalcontext_get_process>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x30(%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <globalcontext_get_process+0x46>
	mov    -0x10(%rbp),%rax
	sub    $0x10,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x20(%rax),%eax
	cmp    %eax,-0x1c(%rbp)
	jne    <globalcontext_get_process+0x3b>
	mov    -0x8(%rbp),%rax
	jmp    <globalcontext_get_process+0x59>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x30,%rax
	cmp    %rax,-0x10(%rbp)
	jne    <globalcontext_get_process+0x1d>
	mov    $0x0,%eax
	pop    %rbp
	ret    

<globalcontext_get_new_process_id>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x48(%rax),%eax
	lea    0x1(%rax),%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0x48(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x48(%rax),%eax
	pop    %rbp
	ret    

<globalcontext_register_process>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %edx,-0x20(%rbp)
	mov    $0x18,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_register_process+0x60>
	mov    0x4beaf(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x81,%ecx
	lea    0x3afb3(%rip),%rdx        # <_IO_stdin_used+0x2190>
	lea    0x3afec(%rip),%rsi        # <_IO_stdin_used+0x21d0>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8(%rbp),%rax
	mov    -0x1c(%rbp),%edx
	mov    %edx,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x20(%rbp),%edx
	mov    %edx,0x14(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	add    $0x40,%rdx
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <linkedlist_append>
	nop
	leave  
	ret    

<globalcontext_get_registered_process>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x40(%rax),%rax
	test   %rax,%rax
	jne    <globalcontext_get_registered_process+0x23>
	mov    $0x0,%eax
	jmp    <globalcontext_get_registered_process+0x66>
	mov    -0x18(%rbp),%rax
	mov    0x40(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    0x10(%rax),%eax
	cmp    %eax,-0x1c(%rbp)
	jne    <globalcontext_get_registered_process+0x4c>
	mov    -0x10(%rbp),%rax
	mov    0x14(%rax),%eax
	jmp    <globalcontext_get_registered_process+0x66>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	cmp    -0x8(%rbp),%rax
	jne    <globalcontext_get_registered_process+0x37>
	mov    $0x0,%eax
	pop    %rbp
	ret    

<globalcontext_insert_atom>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom_maybe_copy>
	leave  
	ret    

<globalcontext_insert_atom_maybe_copy>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %edx,-0x34(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x50(%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x30(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    $0xffffffffffffffff,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atomshashtable_get_value>
	mov    %rax,-0x18(%rbp)
	cmpq   $0xffffffffffffffff,-0x18(%rbp)
	jne    <globalcontext_insert_atom_maybe_copy+0x123>
	cmpl   $0x0,-0x34(%rbp)
	je     <globalcontext_insert_atom_maybe_copy+0xce>
	mov    -0x30(%rbp),%rax
	movzbl (%rax),%eax
	mov    %al,-0x19(%rbp)
	movzbl -0x19(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_insert_atom_maybe_copy+0xa9>
	mov    0x4bd3e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x2a,%edx
	mov    $0x1,%esi
	lea    0x3aea2(%rip),%rax        # <_IO_stdin_used+0x21f8>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	movzbl -0x19(%rbp),%eax
	add    $0x1,%eax
	movslq %eax,%rdx
	mov    -0x30(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x10(%rbp),%rax
	mov    0x4(%rax),%eax
	cltq   
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x30(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atomshashtable_insert>
	test   %eax,%eax
	jne    <globalcontext_insert_atom_maybe_copy+0xfd>
	mov    $0xffffffff,%eax
	jmp    <globalcontext_insert_atom_maybe_copy+0x127>
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    -0x18(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_insert>
	test   %eax,%eax
	jne    <globalcontext_insert_atom_maybe_copy+0x123>
	mov    $0xffffffff,%eax
	jmp    <globalcontext_insert_atom_maybe_copy+0x127>
	mov    -0x18(%rbp),%rax
	leave  
	ret    

<globalcontext_is_atom_index_equal_to_atom_string>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x1c(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x18(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <atom_are_equals>
	test   %eax,%eax
	setne  %al
	leave  
	ret    

<globalcontext_atomstring_from_term>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	jne    <globalcontext_atomstring_from_term+0x29>
	call   <abort@plt>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	cltq   
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    -0x10(%rbp),%rcx
	mov    $0xffffffffffffffff,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x8(%rbp)
	cmpq   $0xffffffffffffffff,-0x8(%rbp)
	jne    <globalcontext_atomstring_from_term+0x6b>
	mov    $0x0,%eax
	jmp    <globalcontext_atomstring_from_term+0x6f>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<globalcontext_existing_term_from_atom_string>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x50(%rax),%rax
	mov    -0x20(%rbp),%rcx
	mov    $0xffffffffffffffff,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atomshashtable_get_value>
	mov    %rax,-0x8(%rbp)
	cmpq   $0xffffffffffffffff,-0x8(%rbp)
	jne    <globalcontext_existing_term_from_atom_string+0x49>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <globalcontext_existing_term_from_atom_string+0x54>
	mov    -0x8(%rbp),%rax
	mov    %eax,%edi
	call   <term_from_atom_index>
	leave  
	ret    

<globalcontext_insert_module>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x20(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    0x60(%rax),%rax
	mov    -0x28(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atomshashtable_insert>
	test   %eax,%eax
	jne    <globalcontext_insert_module+0x41>
	mov    $0xffffffff,%eax
	jmp    <globalcontext_insert_module+0x146>
	mov    -0x18(%rbp),%rax
	mov    0x70(%rax),%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    $0x8,%esi
	mov    %rax,%rdi
	call   <calloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_insert_module+0xa0>
	mov    0x4bb08(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0xe5,%ecx
	lea    0x3ac0c(%rip),%rdx        # <_IO_stdin_used+0x2190>
	lea    0x3ac45(%rip),%rsi        # <_IO_stdin_used+0x21d0>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x18(%rbp),%rax
	mov    0x68(%rax),%rax
	test   %rax,%rax
	je     <globalcontext_insert_module+0x101>
	movl   $0x0,-0x10(%rbp)
	jmp    <globalcontext_insert_module+0xe9>
	mov    -0x18(%rbp),%rax
	mov    0x68(%rax),%rdx
	mov    -0x10(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    -0x10(%rbp),%edx
	movslq %edx,%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x8(%rbp),%rdx
	add    %rcx,%rdx
	mov    (%rax),%rax
	mov    %rax,(%rdx)
	addl   $0x1,-0x10(%rbp)
	mov    -0x10(%rbp),%eax
	cmp    -0xc(%rbp),%eax
	jl     <globalcontext_insert_module+0xb6>
	mov    -0x18(%rbp),%rax
	mov    0x68(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x20(%rbp),%rax
	mov    -0xc(%rbp),%edx
	mov    %edx,0x68(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x68(%rax)
	mov    -0x18(%rbp),%rax
	mov    0x68(%rax),%rdx
	mov    -0xc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x20(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x18(%rbp),%rax
	mov    0x70(%rax),%eax
	lea    0x1(%rax),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,0x70(%rax)
	mov    -0xc(%rbp),%eax
	leave  
	ret    

<globalcontext_insert_module_with_filename>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    $0x104,%esi
	mov    %rax,%rdi
	call   <strnlen@plt>
	mov    %eax,-0x10(%rbp)
	mov    -0x10(%rbp),%eax
	sub    $0x5,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	lea    0x3ab95(%rip),%rdx        # <_IO_stdin_used+0x2223>
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	je     <globalcontext_insert_module_with_filename+0x6c>
	lea    0x3ab85(%rip),%rax        # <_IO_stdin_used+0x2229>
	mov    %rax,%rdi
	call   <puts@plt>
	call   <abort@plt>
	mov    -0xc(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_insert_module_with_filename+0xbc>
	mov    0x4b9a4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x104,%ecx
	lea    0x3aaa8(%rip),%rdx        # <_IO_stdin_used+0x2190>
	lea    0x3aae1(%rip),%rsi        # <_IO_stdin_used+0x21d0>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0xc(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x8(%rbp),%rax
	lea    0x1(%rax),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0xc(%rbp),%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %dl,(%rax)
	mov    -0x8(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_module>
	shr    $0x1f,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_insert_module_with_filename+0x10b>
	call   <abort@plt>
	nop
	leave  
	ret    

<globalcontext_get_module>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x60(%rax),%rax
	mov    -0x30(%rbp),%rcx
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atomshashtable_get_value>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	jne    <globalcontext_get_module+0x103>
	mov    $0x105,%edi
	call   <malloc@plt>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_get_module+0x67>
	mov    $0x0,%eax
	jmp    <globalcontext_get_module+0x107>
	mov    -0x10(%rbp),%rcx
	mov    -0x30(%rbp),%rax
	mov    $0x100,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atom_string_to_c>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	movl   $0x6165622e,(%rax)
	movw   $0x6d,0x4(%rax)
	mov    -0x10(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <sys_load_module>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <globalcontext_get_module+0xf6>
	mov    -0x30(%rbp),%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_module>
	shr    $0x1f,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <globalcontext_get_module+0xfd>
	mov    $0x0,%eax
	jmp    <globalcontext_get_module+0x107>
	mov    -0x8(%rbp),%rax
	jmp    <globalcontext_get_module+0x107>
	mov    -0x18(%rbp),%rax
	leave  
	ret    

<globalcontext_demonitor>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x30(%rax),%rax
	mov    %rax,-0x20(%rbp)
	jmp    <globalcontext_demonitor+0x90>
	mov    -0x20(%rbp),%rax
	sub    $0x10,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    0x48(%rax),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <globalcontext_demonitor+0x77>
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x18(%rax),%rax
	cmp    %rax,-0x30(%rbp)
	jne    <globalcontext_demonitor+0x6c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	jmp    <globalcontext_demonitor+0x9e>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x10(%rbp),%rax
	add    $0x48,%rax
	cmp    %rax,-0x18(%rbp)
	jne    <globalcontext_demonitor+0x3c>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	add    $0x30,%rax
	cmp    %rax,-0x20(%rbp)
	jne    <globalcontext_demonitor+0x22>
	leave  
	ret    

<iff_align>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	add    $0x3,%eax
	and    $0xfffffffc,%eax
	pop    %rbp
	ret    

<iff_is_valid_beam>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a916(%rip),%rcx        # <_IO_stdin_used+0x2248>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	leave  
	ret    

<scan_iff>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    $0x48,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <memset@plt>
	mov    -0x40(%rbp),%rax
	mov    $0x48,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <memset@plt>
	movl   $0xc,-0x1c(%rbp)
	mov    -0x10(%rbp),%rax
	add    $0x4,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x18(%rbp)
	mov    -0x18(%rbp),%eax
	mov    %eax,-0x14(%rbp)
	mov    -0x2c(%rbp),%eax
	cmp    -0x14(%rbp),%eax
	setl   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <scan_iff+0x9d>
	mov    0x4b6b6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x2c(%rbp),%edx
	lea    0x3a87c(%rip),%rcx        # <_IO_stdin_used+0x2250>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0x1c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a884(%rip),%rcx        # <_IO_stdin_used+0x2289>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0xf1>
	mov    -0x1c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <scan_iff+0x349>
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a846(%rip),%rcx        # <_IO_stdin_used+0x228e>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0x13d>
	mov    -0x38(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	add    $0x8,%rax
	mov    %edx,%edx
	mov    %rdx,(%rax)
	jmp    <scan_iff+0x349>
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a7ff(%rip),%rcx        # <_IO_stdin_used+0x2293>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0x189>
	mov    -0x38(%rbp),%rax
	lea    0x10(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	add    $0x10,%rax
	mov    %edx,%edx
	mov    %rdx,(%rax)
	jmp    <scan_iff+0x349>
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a7b8(%rip),%rcx        # <_IO_stdin_used+0x2298>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0x1d5>
	mov    -0x38(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	add    $0x18,%rax
	mov    %edx,%edx
	mov    %rdx,(%rax)
	jmp    <scan_iff+0x349>
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a771(%rip),%rcx        # <_IO_stdin_used+0x229d>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0x221>
	mov    -0x38(%rbp),%rax
	lea    0x28(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	add    $0x28,%rax
	mov    %edx,%edx
	mov    %rdx,(%rax)
	jmp    <scan_iff+0x349>
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a72a(%rip),%rcx        # <_IO_stdin_used+0x22a2>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0x26d>
	mov    -0x38(%rbp),%rax
	lea    0x30(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	add    $0x30,%rax
	mov    %edx,%edx
	mov    %rdx,(%rax)
	jmp    <scan_iff+0x349>
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a6e3(%rip),%rcx        # <_IO_stdin_used+0x22a7>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0x2b9>
	mov    -0x38(%rbp),%rax
	lea    0x20(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	add    $0x20,%rax
	mov    %edx,%edx
	mov    %rdx,(%rax)
	jmp    <scan_iff+0x349>
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a69c(%rip),%rcx        # <_IO_stdin_used+0x22ac>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0x302>
	mov    -0x38(%rbp),%rax
	lea    0x38(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	add    $0x38,%rax
	mov    %edx,%edx
	mov    %rdx,(%rax)
	jmp    <scan_iff+0x349>
	mov    -0x8(%rbp),%rax
	mov    $0x4,%edx
	lea    0x3a658(%rip),%rcx        # <_IO_stdin_used+0x22b1>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <scan_iff+0x349>
	mov    -0x38(%rbp),%rax
	lea    0x40(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	add    $0x40,%rax
	mov    %edx,%edx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x4(%rax),%eax
	bswap  %eax
	add    $0x8,%eax
	mov    %eax,%edi
	call   <iff_align>
	mov    -0x1c(%rbp),%edx
	add    %edx,%eax
	mov    %eax,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	cmp    -0x14(%rbp),%eax
	jl     <scan_iff+0x9d>
	nop
	nop
	leave  
	ret    

<list_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<list_remove>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x8(%rax)
	nop
	pop    %rbp
	ret    

<list_is_empty>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jne    <list_is_empty+0x2a>
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jne    <list_is_empty+0x2a>
	mov    $0x1,%eax
	jmp    <list_is_empty+0x2f>
	mov    $0x0,%eax
	pop    %rbp
	ret    

<list_first>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	pop    %rbp
	ret    

<term_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x3b,%eax
	pop    %rbp
	ret    

<context_memory_size>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xe8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<mailbox_message_memory>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x20,%rax
	add    $0x8,%rax
	pop    %rbp
	ret    

<mailbox_send>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <memory_estimate_usage>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x5,%rax
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <mailbox_send+0x87>
	mov    0x4b237(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x29,%ecx
	lea    0x3a463(%rip),%rdx        # <_IO_stdin_used+0x22b8>
	lea    0x3a494(%rip),%rsi        # <_IO_stdin_used+0x22f0>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <mailbox_send+0x142>
	mov    $0x0,%eax
	call   <term_nil>
	mov    -0x10(%rbp),%rdx
	mov    %rax,0x18(%rdx)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_message_memory>
	mov    %rax,-0x20(%rbp)
	mov    -0x10(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x30(%rbp),%rcx
	lea    -0x20(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_copy_term_tree>
	mov    -0x10(%rbp),%rdx
	mov    %rax,0x20(%rdx)
	mov    -0x18(%rbp),%rax
	mov    %eax,%edx
	mov    -0x10(%rbp),%rax
	mov    %edx,0x10(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x28(%rbp),%rdx
	add    $0x130,%rdx
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_append>
	mov    -0x28(%rbp),%rax
	mov    0x128(%rax),%rax
	test   %rax,%rax
	je     <mailbox_send+0x128>
	mov    -0x28(%rbp),%rax
	mov    0x128(%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x28(%rbp),%rax
	movq   $0x0,0x128(%rax)
	mov    -0x28(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x28(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_make_ready>
	mov    -0x8(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <mailbox_send+0x156>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<mailbox_dequeue>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x130,%rax
	mov    %rax,%rdi
	call   <list_first>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<mailbox_peek>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x130,%rax
	mov    %rax,%rdi
	call   <list_first>
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    0xf0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	cmp    %rax,%rdx
	jge    <mailbox_peek+0xb5>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <context_memory_size>
	mov    %eax,%edx
	mov    -0x10(%rbp),%rax
	mov    0x10(%rax),%eax
	add    %edx,%eax
	add    $0x4,%eax
	mov    %eax,%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_gc>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <mailbox_peek+0xb5>
	mov    0x4b074(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x4f,%ecx
	lea    0x3a2a0(%rip),%rdx        # <_IO_stdin_used+0x22b8>
	lea    0x3a2d1(%rip),%rsi        # <_IO_stdin_used+0x22f0>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0x18(%rbp),%rax
	lea    0x1c0(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    -0x18(%rbp),%rcx
	add    $0xf0,%rcx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memory_copy_term_tree>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<mailbox_remove>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x130,%rax
	mov    %rax,%rdi
	call   <list_is_empty>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <mailbox_remove+0x5f>
	mov    -0x18(%rbp),%rax
	add    $0x130,%rax
	mov    %rax,%rdi
	call   <list_first>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_destroy_message>
	jmp    <mailbox_remove+0x60>
	nop
	leave  
	ret    

<mailbox_destroy_message>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,%rdi
	call   <memory_sweep_mso_list>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<list_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<list_init>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_atom>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0xb,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nonempty_list>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x1,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_get_size_from_boxed_header>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_boxed_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_is_refc_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_refc_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x20,-0xc(%rbp)
	sete   %al
	jmp    <term_is_refc_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_refc_binary_is_const>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	leave  
	ret    

<term_is_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_sub_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x28,-0xc(%rbp)
	sete   %al
	jmp    <term_is_sub_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_catch_label>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x1b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_pid>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0x3,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_cp>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x3b,%eax
	pop    %rbp
	ret    

<term_refc_binary_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_arity>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_get_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffe,%rax
	pop    %rbp
	ret    

<term_get_list_head>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	leave  
	ret    

<term_get_list_tail>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_list_init_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x1,%rax
	pop    %rbp
	ret    

<term_is_map>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_map+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x3c,%rax
	jne    <term_is_map+0x43>
	mov    $0x1,%eax
	jmp    <term_is_map+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_map_keys_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	pop    %rbp
	ret    

<term_get_map_value_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	pop    %rbp
	ret    

<term_map_size_in_terms_maybe_shared>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,%eax
	mov    %al,-0xc(%rbp)
	cmpb   $0x0,-0xc(%rbp)
	je     <term_map_size_in_terms_maybe_shared+0x1a>
	mov    $0x2,%edx
	jmp    <term_map_size_in_terms_maybe_shared+0x21>
	mov    -0x8(%rbp),%rax
	lea    0x3(%rax),%edx
	mov    -0x8(%rbp),%rax
	add    %edx,%eax
	pop    %rbp
	ret    

<term_map_size_in_terms>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_map_size_in_terms_maybe_shared>
	leave  
	ret    

<term_get_map_keys>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_map_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	leave  
	ret    

<term_get_map_key>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x10,%rsp
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %eax,%ebx
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %ebx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_map_value>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x20(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_sub_binary_ref>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	leave  
	ret    

<context_avail_free_memory>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xf0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<context_memory_size>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xe8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<temp_stack_init>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movl   $0x8,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	nop
	leave  
	ret    

<temp_stack_destory>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	add    %rdx,%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<temp_stack_grow>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %eax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%eax
	add    %eax,%eax
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	add    %rdx,%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x28(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x14(%rbp),%edx
	mov    %edx,0x10(%rax)
	nop
	leave  
	ret    

<temp_stack_is_empty>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,%rdx
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<temp_stack_push>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	sub    $0x1,%eax
	cltq   
	cmp    %rax,%rdx
	jne    <temp_stack_push+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_grow>
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	lea    -0x8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	leave  
	ret    

<temp_stack_pop>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	pop    %rbp
	ret    

<memory_heap_alloc>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0xf0(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0xf0(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,0xf0(%rax)
	mov    -0x8(%rbp),%rax
	pop    %rbp
	ret    

<memory_alloc_heap_fragment>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x2,%rax
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <memory_alloc_heap_fragment+0x41>
	mov    $0x0,%eax
	jmp    <memory_alloc_heap_fragment+0x80>
	mov    -0x18(%rbp),%rax
	lea    0x180(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_append>
	mov    -0x18(%rbp),%rax
	mov    0x190(%rax),%eax
	mov    %eax,%edx
	mov    -0x1c(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,0x190(%rax)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	leave  
	ret    

<memory_ensure_free>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <context_avail_free_memory>
	mov    %rax,-0x30(%rbp)
	mov    -0x3c(%rbp),%eax
	add    $0x10,%eax
	mov    %eax,%eax
	cmp    %rax,-0x30(%rbp)
	jae    <memory_ensure_free+0x113>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <context_memory_size>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %eax,%edx
	mov    -0x3c(%rbp),%eax
	add    %edx,%eax
	add    $0x10,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_gc>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <memory_ensure_free+0x7a>
	mov    $0x1,%eax
	jmp    <memory_ensure_free+0x118>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <context_avail_free_memory>
	mov    %rax,-0x20(%rbp)
	mov    -0x3c(%rbp),%eax
	add    $0x10,%eax
	add    %eax,%eax
	mov    %eax,%eax
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	cmp    -0x18(%rbp),%rax
	jbe    <memory_ensure_free+0x113>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <context_memory_size>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	sub    -0x20(%rbp),%rax
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x38(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x2,%eax
	test   %al,%al
	je     <memory_ensure_free+0xeb>
	mov    -0x38(%rbp),%rax
	mov    0x100(%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jbe    <memory_ensure_free+0x113>
	mov    -0x8(%rbp),%rax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_gc>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <memory_ensure_free+0x113>
	mov    $0x1,%eax
	jmp    <memory_ensure_free+0x118>
	mov    $0x0,%eax
	leave  
	ret    

<memory_gc_and_shrink>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <context_avail_free_memory>
	cmp    $0x1f,%rax
	jbe    <memory_gc_and_shrink+0x8a>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <context_memory_size>
	mov    %eax,%ebx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <context_avail_free_memory>
	shr    %rax
	mov    %eax,%edx
	mov    %ebx,%eax
	sub    %edx,%eax
	mov    %eax,%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_gc>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <memory_gc_and_shrink+0x8a>
	mov    0x4a51c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x5b,%ecx
	lea    0x397a8(%rip),%rdx        # <_IO_stdin_used+0x2318>
	lea    0x397d9(%rip),%rsi        # <_IO_stdin_used+0x2350>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<push_to_stack>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	lea    -0x8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<memory_gc>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xb0,%rsp
	mov    %rdi,-0xa8(%rbp)
	mov    %esi,-0xac(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0xa8(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x2,%eax
	test   %al,%al
	je     <memory_gc+0x50>
	mov    -0xa8(%rbp),%rax
	mov    0x100(%rax),%rax
	jmp    <memory_gc+0x55>
	mov    $0x0,%eax
	mov    %rax,-0x40(%rbp)
	mov    -0xac(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x40(%rbp),%rax
	cmp    %rax,%rdx
	cmovge %rdx,%rax
	mov    %eax,-0xac(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    0x190(%rax),%eax
	add    %eax,-0xac(%rbp)
	mov    -0xa8(%rbp),%rax
	movl   $0x0,0x190(%rax)
	mov    -0xa8(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x4,%eax
	test   %al,%al
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <memory_gc+0xe4>
	mov    -0xac(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    0x108(%rax),%rax
	cmp    %rax,%rdx
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <memory_gc+0xe4>
	mov    $0x2,%eax
	jmp    <memory_gc+0x499>
	mov    -0xac(%rbp),%eax
	cltq   
	mov    $0x8,%esi
	mov    %rax,%rdi
	call   <calloc@plt>
	mov    %rax,-0x38(%rbp)
	cmpq   $0x0,-0x38(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <memory_gc+0x117>
	mov    $0x1,%eax
	jmp    <memory_gc+0x499>
	mov    -0xac(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x38(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x88(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,-0x80(%rbp)
	movl   $0x0,-0x94(%rbp)
	jmp    <memory_gc+0x1a9>
	mov    -0xa8(%rbp),%rax
	mov    -0x94(%rbp),%edx
	movslq %edx,%rdx
	add    $0xa,%rdx
	mov    0x8(%rax,%rdx,8),%rax
	lea    -0x88(%rbp),%rcx
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,-0x10(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    -0x94(%rbp),%edx
	movslq %edx,%rdx
	lea    0xa(%rdx),%rcx
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax,%rcx,8)
	addl   $0x1,-0x94(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    0xd8(%rax),%eax
	cmp    %eax,-0x94(%rbp)
	jl     <memory_gc+0x151>
	mov    -0xa8(%rbp),%rax
	mov    0xf8(%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    0xe8(%rax),%rdx
	mov    -0xa8(%rbp),%rax
	mov    0xf8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %eax,-0x8c(%rbp)
	mov    -0x8c(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x90(%rbp)
	jmp    <memory_gc+0x25c>
	mov    -0x90(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	lea    -0x88(%rbp),%rcx
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	lea    -0x80(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <push_to_stack>
	subl   $0x1,-0x90(%rbp)
	cmpl   $0x0,-0x90(%rbp)
	jns    <memory_gc+0x20d>
	mov    -0xa8(%rbp),%rax
	mov    0x150(%rax),%rax
	mov    %rax,-0x68(%rbp)
	jmp    <memory_gc+0x2da>
	mov    -0x68(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    0x10(%rax),%rax
	lea    -0x88(%rbp),%rcx
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    -0x20(%rbp),%rdx
	mov    %rax,0x10(%rdx)
	mov    -0x20(%rbp),%rax
	mov    0x18(%rax),%rax
	lea    -0x88(%rbp),%rcx
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    -0x20(%rbp),%rdx
	mov    %rax,0x18(%rdx)
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x68(%rbp)
	mov    -0xa8(%rbp),%rax
	add    $0x150,%rax
	cmp    %rax,-0x68(%rbp)
	jne    <memory_gc+0x279>
	mov    -0xa8(%rbp),%rax
	mov    0x1b8(%rax),%rax
	lea    -0x88(%rbp),%rcx
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    -0xa8(%rbp),%rdx
	mov    %rax,0x1b8(%rdx)
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x88(%rbp),%rax
	mov    %rax,-0x58(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x78(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,-0x70(%rbp)
	lea    -0x78(%rbp),%rcx
	lea    -0x70(%rbp),%rdx
	mov    -0x58(%rbp),%rsi
	mov    -0x60(%rbp),%rax
	mov    $0x1,%r8d
	mov    %rax,%rdi
	call   <memory_scan_and_copy>
	mov    -0x58(%rbp),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,-0x58(%rbp)
	mov    -0x60(%rbp),%rax
	cmp    -0x58(%rbp),%rax
	jne    <memory_gc+0x341>
	mov    -0x58(%rbp),%rax
	mov    %rax,-0x88(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    0x1c0(%rax),%rax
	mov    %rax,%rdi
	call   <memory_sweep_mso_list>
	mov    -0x78(%rbp),%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x1c0(%rax)
	mov    -0xa8(%rbp),%rax
	mov    0xe0(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0xa8(%rbp),%rax
	mov    0x180(%rax),%rax
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x48(%rbp)
	jmp    <memory_gc+0x408>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x48(%rbp),%rax
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0xa8(%rbp),%rax
	add    $0x180,%rax
	cmp    %rax,-0x50(%rbp)
	jne    <memory_gc+0x3e9>
	mov    -0xa8(%rbp),%rax
	add    $0x180,%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0xa8(%rbp),%rax
	mov    -0x38(%rbp),%rdx
	mov    %rdx,0xe0(%rax)
	mov    -0xa8(%rbp),%rax
	mov    0xe0(%rax),%rdx
	mov    -0xac(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0xe8(%rax)
	mov    -0x88(%rbp),%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0xf0(%rax)
	mov    -0x80(%rbp),%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0xf8(%rax)
	mov    $0x0,%eax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <memory_gc+0x4ad>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<memory_is_moved_marker>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	cmp    $0x2b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<memory_replace_with_moved_marker>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x2b,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	pop    %rbp
	ret    

<memory_dereference_moved_marker>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	pop    %rbp
	ret    

<memory_copy_term_tree>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x38(%rbp),%rcx
	mov    -0x40(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x48(%rbp),%rcx
	lea    -0x28(%rbp),%rdx
	mov    -0x18(%rbp),%rsi
	mov    -0x20(%rbp),%rax
	mov    $0x0,%r8d
	mov    %rax,%rdi
	call   <memory_scan_and_copy>
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	cmp    -0x18(%rbp),%rax
	jne    <memory_copy_term_tree+0x59>
	mov    -0x38(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <memory_copy_term_tree+0xbc>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<memory_estimate_usage>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movq   $0x0,-0x30(%rbp)
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_init>
	mov    -0x58(%rbp),%rdx
	lea    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	jmp    <memory_estimate_usage+0x38e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <memory_estimate_usage+0x70>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <memory_estimate_usage+0x95>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <memory_estimate_usage+0xba>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <memory_estimate_usage+0xdf>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <memory_estimate_usage+0x127>
	addq   $0x2,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,%rdx
	lea    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <memory_estimate_usage+0x1c1>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x34(%rbp)
	mov    -0x34(%rbp),%eax
	add    $0x1,%eax
	cltq   
	add    %rax,-0x30(%rbp)
	cmpl   $0x0,-0x34(%rbp)
	jle    <memory_estimate_usage+0x1ae>
	movl   $0x1,-0x44(%rbp)
	jmp    <memory_estimate_usage+0x18c>
	mov    -0x44(%rbp),%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdx
	lea    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	addl   $0x1,-0x44(%rbp)
	mov    -0x44(%rbp),%eax
	cmp    -0x34(%rbp),%eax
	jl     <memory_estimate_usage+0x165>
	mov    -0x58(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <memory_estimate_usage+0x2b4>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	mov    %eax,-0x38(%rbp)
	mov    -0x38(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_map_size_in_terms>
	cltq   
	add    %rax,-0x30(%rbp)
	cmpl   $0x0,-0x38(%rbp)
	jle    <memory_estimate_usage+0x2a1>
	movl   $0x1,-0x40(%rbp)
	jmp    <memory_estimate_usage+0x25c>
	mov    -0x40(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,%rdx
	lea    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0x40(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,%rdx
	lea    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	addl   $0x1,-0x40(%rbp)
	mov    -0x40(%rbp),%eax
	cmp    -0x38(%rbp),%eax
	jl     <memory_estimate_usage+0x20a>
	mov    -0x58(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,%rdx
	lea    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0x58(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <memory_estimate_usage+0x310>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	add    $0x1,%eax
	cltq   
	add    %rax,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	je     <memory_estimate_usage+0x2fe>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_sub_binary_ref>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x58(%rbp)
	jmp    <memory_estimate_usage+0x38e>
	mov    0x49be5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x58(%rbp),%rdx
	lea    0x38ed2(%rip),%rcx        # <_IO_stdin_used+0x2378>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <memory_estimate_usage+0x389>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x28(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	add    $0x1,%eax
	mov    %eax,-0x3c(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    0x49b8a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x3c(%rbp),%ecx
	lea    0x38ea0(%rip),%rsi        # <_IO_stdin_used+0x23a0>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_is_empty>
	test   %eax,%eax
	je     <memory_estimate_usage+0x4b>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_destory>
	mov    -0x30(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <memory_estimate_usage+0x3c6>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<memory_scan_and_copy>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x98,%rsp
	mov    %rdi,-0x78(%rbp)
	mov    %rsi,-0x80(%rbp)
	mov    %rdx,-0x88(%rbp)
	mov    %rcx,-0x90(%rbp)
	mov    %r8d,-0x94(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x78(%rbp),%rax
	mov    %rax,-0x50(%rbp)
	mov    -0x88(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x58(%rbp)
	jmp    <memory_scan_and_copy+0x45a>
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <memory_scan_and_copy+0x7c>
	addq   $0x8,-0x50(%rbp)
	jmp    <memory_scan_and_copy+0x45a>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <memory_scan_and_copy+0x96>
	addq   $0x8,-0x50(%rbp)
	jmp    <memory_scan_and_copy+0x45a>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <memory_scan_and_copy+0xb0>
	addq   $0x8,-0x50(%rbp)
	jmp    <memory_scan_and_copy+0x45a>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <memory_scan_and_copy+0xca>
	addq   $0x8,-0x50(%rbp)
	jmp    <memory_scan_and_copy+0x45a>
	mov    -0x40(%rbp),%rax
	and    $0x3,%eax
	test   %rax,%rax
	jne    <memory_scan_and_copy+0x3c5>
	mov    -0x40(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3c,%rax
	ja     <memory_scan_and_copy+0x372>
	lea    0x0(,%rax,4),%rdx
	lea    0x38d9e(%rip),%rax        # <_IO_stdin_used+0x23e4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x38d92(%rip),%rdx        # <_IO_stdin_used+0x23e4>
	add    %rdx,%rax
	notrack jmp *%rax
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	mov    %eax,-0x5c(%rbp)
	movl   $0x1,-0x68(%rbp)
	jmp    <memory_scan_and_copy+0x16d>
	mov    -0x68(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    -0x68(%rbp),%edx
	movslq %edx,%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x50(%rbp),%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    -0x94(%rbp),%edx
	lea    -0x58(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,(%rbx)
	addl   $0x1,-0x68(%rbp)
	mov    -0x68(%rbp),%eax
	cmp    -0x5c(%rbp),%eax
	jle    <memory_scan_and_copy+0x124>
	jmp    <memory_scan_and_copy+0x3a7>
	mov    -0x50(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    -0x50(%rbp),%rdx
	lea    0x8(%rdx),%rbx
	mov    -0x94(%rbp),%edx
	lea    -0x58(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,(%rbx)
	jmp    <memory_scan_and_copy+0x3a7>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	mov    %eax,-0x60(%rbp)
	movl   $0x3,-0x64(%rbp)
	jmp    <memory_scan_and_copy+0x20b>
	mov    -0x64(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    -0x64(%rbp),%edx
	movslq %edx,%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x50(%rbp),%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    -0x94(%rbp),%edx
	lea    -0x58(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,(%rbx)
	addl   $0x1,-0x64(%rbp)
	mov    -0x64(%rbp),%eax
	cmp    -0x60(%rbp),%eax
	jle    <memory_scan_and_copy+0x1c2>
	jmp    <memory_scan_and_copy+0x3a7>
	mov    -0x50(%rbp),%rax
	or     $0x2,%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	xor    $0x1,%eax
	test   %al,%al
	je     <memory_scan_and_copy+0x3a6>
	mov    -0x90(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x50(%rbp),%rax
	lea    0x20(%rax),%rcx
	mov    -0x20(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_init_prepend>
	mov    -0x90(%rbp),%rdx
	mov    %rax,(%rdx)
	jmp    <memory_scan_and_copy+0x3a6>
	mov    -0x50(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    -0x50(%rbp),%rdx
	lea    0x18(%rdx),%rbx
	mov    -0x94(%rbp),%edx
	lea    -0x58(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,(%rbx)
	jmp    <memory_scan_and_copy+0x3a7>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	sub    $0x1,%eax
	cltq   
	mov    %rax,-0x38(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	mov    %rax,-0x30(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    %rax,-0x28(%rbp)
	mov    -0x30(%rbp),%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    -0x30(%rbp),%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x50(%rbp),%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    -0x94(%rbp),%edx
	lea    -0x58(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,(%rbx)
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x48(%rbp)
	jmp    <memory_scan_and_copy+0x35f>
	mov    -0x48(%rbp),%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    -0x48(%rbp),%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x50(%rbp),%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    -0x94(%rbp),%edx
	lea    -0x58(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    %rax,(%rbx)
	addq   $0x1,-0x48(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	add    %rdx,%rax
	cmp    %rax,-0x48(%rbp)
	jb     <memory_scan_and_copy+0x318>
	jmp    <memory_scan_and_copy+0x3a7>
	mov    -0x40(%rbp),%rax
	shr    $0x2,%rax
	and    $0xf,%eax
	mov    %rax,%rdx
	mov    0x497ad(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x38ae6(%rip),%rcx        # <_IO_stdin_used+0x23c0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	nop
	jmp    <memory_scan_and_copy+0x3a7>
	nop
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	add    $0x1,%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,-0x50(%rbp)
	jmp    <memory_scan_and_copy+0x45a>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <memory_scan_and_copy+0x3fc>
	mov    -0x94(%rbp),%edx
	lea    -0x58(%rbp),%rcx
	mov    -0x40(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    -0x50(%rbp),%rdx
	mov    %rax,(%rdx)
	addq   $0x8,-0x50(%rbp)
	jmp    <memory_scan_and_copy+0x45a>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <memory_scan_and_copy+0x433>
	mov    -0x94(%rbp),%edx
	lea    -0x58(%rbp),%rcx
	mov    -0x40(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_shallow_copy_term>
	mov    -0x50(%rbp),%rdx
	mov    %rax,(%rdx)
	addq   $0x8,-0x50(%rbp)
	jmp    <memory_scan_and_copy+0x45a>
	mov    0x496fa(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x40(%rbp),%rdx
	lea    0x389e7(%rip),%rcx        # <_IO_stdin_used+0x2378>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x50(%rbp),%rax
	cmp    -0x80(%rbp),%rax
	jb     <memory_scan_and_copy+0x57>
	mov    -0x58(%rbp),%rdx
	mov    -0x88(%rbp),%rax
	mov    %rdx,(%rax)
	nop
	mov    -0x18(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <memory_scan_and_copy+0x48b>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<memory_shallow_copy_term>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %edx,-0x54(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0x30>
	mov    -0x48(%rbp),%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0x49>
	mov    -0x48(%rbp),%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0x62>
	mov    -0x48(%rbp),%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0x7b>
	mov    -0x48(%rbp),%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_cp>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0x94>
	mov    -0x48(%rbp),%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_catch_label>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0xad>
	mov    -0x48(%rbp),%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0x1ea>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <memory_is_moved_marker>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0xf2>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <memory_dereference_moved_marker>
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	add    $0x1,%eax
	mov    %eax,-0x34(%rbp)
	cmpl   $0x1,-0x34(%rbp)
	jne    <memory_shallow_copy_term+0x11a>
	lea    0x3b1a2(%rip),%rax        # <empty_tuple>
	or     $0x2,%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	movl   $0x0,-0x38(%rbp)
	jmp    <memory_shallow_copy_term+0x161>
	mov    -0x38(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    -0x38(%rbp),%edx
	movslq %edx,%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x10(%rbp),%rdx
	add    %rcx,%rdx
	mov    (%rax),%rax
	mov    %rax,(%rdx)
	addl   $0x1,-0x38(%rbp)
	mov    -0x38(%rbp),%eax
	cmp    -0x34(%rbp),%eax
	jl     <memory_shallow_copy_term+0x12e>
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x34(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x50(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x10(%rbp),%rax
	or     $0x2,%rax
	mov    %rax,-0x8(%rbp)
	cmpl   $0x0,-0x54(%rbp)
	je     <memory_shallow_copy_term+0x1aa>
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <memory_replace_with_moved_marker>
	jmp    <memory_shallow_copy_term+0x1e1>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <memory_shallow_copy_term+0x1e1>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	xor    $0x1,%eax
	test   %al,%al
	je     <memory_shallow_copy_term+0x1e1>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_ptr>
	mov    %rax,%rdi
	call   <refc_binary_increment_refcount>
	mov    -0x8(%rbp),%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0x298>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <memory_is_moved_marker>
	test   %eax,%eax
	je     <memory_shallow_copy_term+0x22f>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <memory_dereference_moved_marker>
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x30(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x28(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x30(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,(%rdx)
	mov    -0x50(%rbp),%rax
	mov    (%rax),%rax
	lea    0x10(%rax),%rdx
	mov    -0x50(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x28(%rbp),%rax
	or     $0x1,%rax
	mov    %rax,-0x20(%rbp)
	cmpl   $0x0,-0x54(%rbp)
	je     <memory_shallow_copy_term+0x292>
	mov    -0x20(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <memory_replace_with_moved_marker>
	mov    -0x20(%rbp),%rax
	jmp    <memory_shallow_copy_term+0x2bf>
	mov    0x49404(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x48(%rbp),%rdx
	lea    0x38851(%rip),%rcx        # <_IO_stdin_used+0x24d8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	leave  
	ret    

<memory_sweep_mso_list>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <memory_sweep_mso_list+0x91>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <memory_is_moved_marker>
	test   %eax,%eax
	jne    <memory_sweep_mso_list+0x81>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <memory_sweep_mso_list+0x81>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	xor    $0x1,%eax
	test   %al,%al
	je     <memory_sweep_mso_list+0x81>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_ptr>
	mov    %rax,%rdi
	call   <refc_binary_decrement_refcount>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x18(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	cmp    %rax,-0x18(%rbp)
	jne    <memory_sweep_mso_list+0x1a>
	nop
	nop
	leave  
	ret    

<term_is_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_from_int4>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,%eax
	mov    %al,-0x4(%rbp)
	movsbl -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<module_get_atom_string_by_id>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	shl    $0x2,%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	mov    %eax,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	leave  
	ret    

<read_core_chunk>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xac0,%rsp
	mov    %rdi,-0xab8(%rbp)
	mov    -0xab8(%rbp),%rax
	mov    0x8(%rax),%rax
	add    $0x1c,%rax
	mov    %rax,-0x428(%rbp)
	movl   $0x0,-0x8dc(%rbp)
	mov    -0x8dc(%rbp),%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	cmp    $0xaa,%eax
	ja     <read_core_chunk+0x196e2>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x387de(%rip),%rax        # <_IO_stdin_used+0x2604>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x387d2(%rip),%rdx        # <_IO_stdin_used+0x2604>
	add    %rdx,%rax
	notrack jmp *%rax
	movl   $0x1,-0x8d4(%rbp)
	mov    -0x8d4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8dd(%rbp)
	movzbl -0x8dd(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xcc>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x12d>
	test   %eax,%eax
	je     <read_core_chunk+0xcc>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe8>
	jmp    <read_core_chunk+0x12d>
	movzbl -0x8dd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x8d8(%rbp)
	addl   $0x1,-0x8d4(%rbp)
	jmp    <read_core_chunk+0x157>
	movzbl -0x8dd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8d4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x8d8(%rbp)
	addl   $0x2,-0x8d4(%rbp)
	jmp    <read_core_chunk+0x157>
	movzbl -0x8dd(%rbp),%edx
	mov    0x49187(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x385f8(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8dc(%rbp),%edx
	mov    -0x428(%rbp),%rax
	add    %rax,%rdx
	mov    -0x8d8(%rbp),%ecx
	mov    -0xab8(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <module_add_label>
	mov    -0x8d4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8d0(%rbp)
	mov    -0x8d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e0(%rbp)
	movzbl -0x8e0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1e1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x242>
	test   %eax,%eax
	je     <read_core_chunk+0x1e1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1fd>
	jmp    <read_core_chunk+0x242>
	movzbl -0x8e0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x444(%rbp)
	addl   $0x1,-0x8d0(%rbp)
	jmp    <read_core_chunk+0x26c>
	movzbl -0x8e0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x444(%rbp)
	addl   $0x2,-0x8d0(%rbp)
	jmp    <read_core_chunk+0x26c>
	movzbl -0x8e0(%rbp),%edx
	mov    0x49072(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x384e3(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8df(%rbp)
	movzbl -0x8df(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2b4>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x315>
	test   %eax,%eax
	je     <read_core_chunk+0x2b4>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2d0>
	jmp    <read_core_chunk+0x315>
	movzbl -0x8df(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x440(%rbp)
	addl   $0x1,-0x8d0(%rbp)
	jmp    <read_core_chunk+0x33f>
	movzbl -0x8df(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x440(%rbp)
	addl   $0x2,-0x8d0(%rbp)
	jmp    <read_core_chunk+0x33f>
	movzbl -0x8df(%rbp),%edx
	mov    0x48f9f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x38410(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8de(%rbp)
	movzbl -0x8de(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x387>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3e8>
	test   %eax,%eax
	je     <read_core_chunk+0x387>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x3a3>
	jmp    <read_core_chunk+0x3e8>
	movzbl -0x8de(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x43c(%rbp)
	addl   $0x1,-0x8d0(%rbp)
	jmp    <read_core_chunk+0x412>
	movzbl -0x8de(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x43c(%rbp)
	addl   $0x2,-0x8d0(%rbp)
	jmp    <read_core_chunk+0x412>
	movzbl -0x8de(%rbp),%edx
	mov    0x48ecc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x38375(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8d0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	mov    -0x8dc(%rbp),%eax
	jmp    <read_core_chunk+0x1971d>
	movl   $0x1,-0x8cc(%rbp)
	mov    -0x8cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e2(%rbp)
	movzbl -0x8e2(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x480>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4e1>
	test   %eax,%eax
	je     <read_core_chunk+0x480>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x49c>
	jmp    <read_core_chunk+0x4e1>
	movzbl -0x8e2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x44c(%rbp)
	addl   $0x1,-0x8cc(%rbp)
	jmp    <read_core_chunk+0x50b>
	movzbl -0x8e2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x44c(%rbp)
	addl   $0x2,-0x8cc(%rbp)
	jmp    <read_core_chunk+0x50b>
	movzbl -0x8e2(%rbp),%edx
	mov    0x48dd3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3827c(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e1(%rbp)
	movzbl -0x8e1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x553>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x5b4>
	test   %eax,%eax
	je     <read_core_chunk+0x553>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x56f>
	jmp    <read_core_chunk+0x5b4>
	movzbl -0x8e1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x448(%rbp)
	addl   $0x1,-0x8cc(%rbp)
	jmp    <read_core_chunk+0x5de>
	movzbl -0x8e1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x448(%rbp)
	addl   $0x2,-0x8cc(%rbp)
	jmp    <read_core_chunk+0x5de>
	movzbl -0x8e1(%rbp),%edx
	mov    0x48d00(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x38171(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8cc(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8c8(%rbp)
	mov    -0x8c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e5(%rbp)
	movzbl -0x8e5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x641>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x6a2>
	test   %eax,%eax
	je     <read_core_chunk+0x641>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x65d>
	jmp    <read_core_chunk+0x6a2>
	movzbl -0x8e5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x458(%rbp)
	addl   $0x1,-0x8c8(%rbp)
	jmp    <read_core_chunk+0x6cc>
	movzbl -0x8e5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x458(%rbp)
	addl   $0x2,-0x8c8(%rbp)
	jmp    <read_core_chunk+0x6cc>
	movzbl -0x8e5(%rbp),%edx
	mov    0x48c12(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x380bb(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e4(%rbp)
	movzbl -0x8e4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x714>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x775>
	test   %eax,%eax
	je     <read_core_chunk+0x714>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x730>
	jmp    <read_core_chunk+0x775>
	movzbl -0x8e4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x454(%rbp)
	addl   $0x1,-0x8c8(%rbp)
	jmp    <read_core_chunk+0x79f>
	movzbl -0x8e4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x454(%rbp)
	addl   $0x2,-0x8c8(%rbp)
	jmp    <read_core_chunk+0x79f>
	movzbl -0x8e4(%rbp),%edx
	mov    0x48b3f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37fb0(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e3(%rbp)
	movzbl -0x8e3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x7e7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x848>
	test   %eax,%eax
	je     <read_core_chunk+0x7e7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x803>
	jmp    <read_core_chunk+0x848>
	movzbl -0x8e3(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x450(%rbp)
	addl   $0x1,-0x8c8(%rbp)
	jmp    <read_core_chunk+0x872>
	movzbl -0x8e3(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x450(%rbp)
	addl   $0x2,-0x8c8(%rbp)
	jmp    <read_core_chunk+0x872>
	movzbl -0x8e3(%rbp),%edx
	mov    0x48a6c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37f15(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8c8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8c4(%rbp)
	mov    -0x8c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e7(%rbp)
	movzbl -0x8e7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x8d5>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x936>
	test   %eax,%eax
	je     <read_core_chunk+0x8d5>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x8f1>
	jmp    <read_core_chunk+0x936>
	movzbl -0x8e7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x460(%rbp)
	addl   $0x1,-0x8c4(%rbp)
	jmp    <read_core_chunk+0x960>
	movzbl -0x8e7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x460(%rbp)
	addl   $0x2,-0x8c4(%rbp)
	jmp    <read_core_chunk+0x960>
	movzbl -0x8e7(%rbp),%edx
	mov    0x4897e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37e27(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e6(%rbp)
	movzbl -0x8e6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x9a8>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xa09>
	test   %eax,%eax
	je     <read_core_chunk+0x9a8>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9c4>
	jmp    <read_core_chunk+0xa09>
	movzbl -0x8e6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x45c(%rbp)
	addl   $0x1,-0x8c4(%rbp)
	jmp    <read_core_chunk+0xa33>
	movzbl -0x8e6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x45c(%rbp)
	addl   $0x2,-0x8c4(%rbp)
	jmp    <read_core_chunk+0xa33>
	movzbl -0x8e6(%rbp),%edx
	mov    0x488ab(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37d1c(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8c4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8c0(%rbp)
	mov    -0x8c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e9(%rbp)
	movzbl -0x8e9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xa96>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xaf7>
	test   %eax,%eax
	je     <read_core_chunk+0xa96>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xab2>
	jmp    <read_core_chunk+0xaf7>
	movzbl -0x8e9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x468(%rbp)
	addl   $0x1,-0x8c0(%rbp)
	jmp    <read_core_chunk+0xb21>
	movzbl -0x8e9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x468(%rbp)
	addl   $0x2,-0x8c0(%rbp)
	jmp    <read_core_chunk+0xb21>
	movzbl -0x8e9(%rbp),%edx
	mov    0x487bd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37c66(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8e8(%rbp)
	movzbl -0x8e8(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xb69>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xbca>
	test   %eax,%eax
	je     <read_core_chunk+0xb69>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xb85>
	jmp    <read_core_chunk+0xbca>
	movzbl -0x8e8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x464(%rbp)
	addl   $0x1,-0x8c0(%rbp)
	jmp    <read_core_chunk+0xbf4>
	movzbl -0x8e8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x464(%rbp)
	addl   $0x2,-0x8c0(%rbp)
	jmp    <read_core_chunk+0xbf4>
	movzbl -0x8e8(%rbp),%edx
	mov    0x486ea(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37b93(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8c0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8bc(%rbp)
	mov    -0x8bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8ec(%rbp)
	movzbl -0x8ec(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xc57>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xcb8>
	test   %eax,%eax
	je     <read_core_chunk+0xc57>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xc73>
	jmp    <read_core_chunk+0xcb8>
	movzbl -0x8ec(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x474(%rbp)
	addl   $0x1,-0x8bc(%rbp)
	jmp    <read_core_chunk+0xce2>
	movzbl -0x8ec(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x474(%rbp)
	addl   $0x2,-0x8bc(%rbp)
	jmp    <read_core_chunk+0xce2>
	movzbl -0x8ec(%rbp),%edx
	mov    0x485fc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37aa5(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8eb(%rbp)
	movzbl -0x8eb(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xd2a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xd8b>
	test   %eax,%eax
	je     <read_core_chunk+0xd2a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xd46>
	jmp    <read_core_chunk+0xd8b>
	movzbl -0x8eb(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x470(%rbp)
	addl   $0x1,-0x8bc(%rbp)
	jmp    <read_core_chunk+0xdb5>
	movzbl -0x8eb(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x470(%rbp)
	addl   $0x2,-0x8bc(%rbp)
	jmp    <read_core_chunk+0xdb5>
	movzbl -0x8eb(%rbp),%edx
	mov    0x48529(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x379d2(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8ea(%rbp)
	movzbl -0x8ea(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xdfd>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xe5e>
	test   %eax,%eax
	je     <read_core_chunk+0xdfd>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe19>
	jmp    <read_core_chunk+0xe5e>
	movzbl -0x8ea(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x46c(%rbp)
	addl   $0x1,-0x8bc(%rbp)
	jmp    <read_core_chunk+0xe88>
	movzbl -0x8ea(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x46c(%rbp)
	addl   $0x2,-0x8bc(%rbp)
	jmp    <read_core_chunk+0xe88>
	movzbl -0x8ea(%rbp),%edx
	mov    0x48456(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x378ff(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8bc(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8b8(%rbp)
	mov    -0x8b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8ef(%rbp)
	movzbl -0x8ef(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xeeb>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xf4c>
	test   %eax,%eax
	je     <read_core_chunk+0xeeb>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xf07>
	jmp    <read_core_chunk+0xf4c>
	movzbl -0x8ef(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x47c(%rbp)
	addl   $0x1,-0x8b8(%rbp)
	jmp    <read_core_chunk+0xf76>
	movzbl -0x8ef(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x47c(%rbp)
	addl   $0x2,-0x8b8(%rbp)
	jmp    <read_core_chunk+0xf76>
	movzbl -0x8ef(%rbp),%edx
	mov    0x48368(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37811(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8ee(%rbp)
	movzbl -0x8ee(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x8ed(%rbp)
	movzbl -0x8ed(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x8ed(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xfc9>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xfd0>
	jmp    <read_core_chunk+0x1047>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x1002>
	jmp    <read_core_chunk+0x1047>
	mov    -0x8b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x478(%rbp)
	addl   $0x1,-0x8b8(%rbp)
	jmp    <read_core_chunk+0x104c>
	movzbl -0x8ee(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x478(%rbp)
	addl   $0x2,-0x8b8(%rbp)
	jmp    <read_core_chunk+0x104c>
	call   <abort@plt>
	mov    -0x8b8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8b4(%rbp)
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8f5(%rbp)
	movzbl -0x8f5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10af>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1110>
	test   %eax,%eax
	je     <read_core_chunk+0x10af>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x10cb>
	jmp    <read_core_chunk+0x1110>
	movzbl -0x8f5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x488(%rbp)
	addl   $0x1,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x113a>
	movzbl -0x8f5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x488(%rbp)
	addl   $0x2,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x113a>
	movzbl -0x8f5(%rbp),%edx
	mov    0x481a4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37615(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8f4(%rbp)
	movzbl -0x8f4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1182>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x11e3>
	test   %eax,%eax
	je     <read_core_chunk+0x1182>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x119e>
	jmp    <read_core_chunk+0x11e3>
	movzbl -0x8f4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x484(%rbp)
	addl   $0x1,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x120d>
	movzbl -0x8f4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x484(%rbp)
	addl   $0x2,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x120d>
	movzbl -0x8f4(%rbp),%edx
	mov    0x480d1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3757a(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8f3(%rbp)
	movzbl -0x8f3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x13e0>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3789e(%rip),%rax        # <_IO_stdin_used+0x28b0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x37892(%rip),%rdx        # <_IO_stdin_used+0x28b0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x8f3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x128b>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x12e3>
	test   %eax,%eax
	je     <read_core_chunk+0x128b>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x12ac>
	jmp    <read_core_chunk+0x12e3>
	movzbl -0x8f3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8(%rbp)
	addl   $0x1,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x130d>
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x8(%rbp)
	addl   $0x2,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x130d>
	movzbl -0x8f3(%rbp),%edx
	mov    0x47fd1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x374b2(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x140f>
	addl   $0x1,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x140f>
	movzbl -0x8f3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x137c>
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x8f2(%rbp)
	cmpb   $0x0,-0x8f2(%rbp)
	jne    <read_core_chunk+0x1365>
	addl   $0x2,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x139e>
	cmpb   $0x8,-0x8f2(%rbp)
	jne    <read_core_chunk+0x1377>
	addl   $0x3,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x139e>
	call   <abort@plt>
	movzbl -0x8f3(%rbp),%eax
	mov    %eax,%esi
	lea    0x37450(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x140f>
	movzbl -0x8f3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x13b6>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x13bf>
	jmp    <read_core_chunk+0x13d5>
	addl   $0x2,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x13d5>
	movzbl -0x8f3(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x140f>
	addl   $0x2,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x140f>
	movzbl -0x8f3(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x47ecf(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x373f8(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8f1(%rbp)
	movzbl -0x8f1(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x8f0(%rbp)
	movzbl -0x8f0(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x8f0(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x1462>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x1469>
	jmp    <read_core_chunk+0x14e0>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x149b>
	jmp    <read_core_chunk+0x14e0>
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x480(%rbp)
	addl   $0x1,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x14e5>
	movzbl -0x8f1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x480(%rbp)
	addl   $0x2,-0x8b4(%rbp)
	jmp    <read_core_chunk+0x14e5>
	call   <abort@plt>
	mov    -0x8b4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8b0(%rbp)
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8fd(%rbp)
	movzbl -0x8fd(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1548>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x15a9>
	test   %eax,%eax
	je     <read_core_chunk+0x1548>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1564>
	jmp    <read_core_chunk+0x15a9>
	movzbl -0x8fd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x494(%rbp)
	addl   $0x1,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x15d3>
	movzbl -0x8fd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x494(%rbp)
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x15d3>
	movzbl -0x8fd(%rbp),%edx
	mov    0x47d0b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3717c(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8fc(%rbp)
	movzbl -0x8fc(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x161b>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x167c>
	test   %eax,%eax
	je     <read_core_chunk+0x161b>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1637>
	jmp    <read_core_chunk+0x167c>
	movzbl -0x8fc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x490(%rbp)
	addl   $0x1,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x16a6>
	movzbl -0x8fc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x490(%rbp)
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x16a6>
	movzbl -0x8fc(%rbp),%edx
	mov    0x47c38(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x370e1(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8fb(%rbp)
	movzbl -0x8fb(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1879>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x37439(%rip),%rax        # <_IO_stdin_used+0x28e4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3742d(%rip),%rdx        # <_IO_stdin_used+0x28e4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x8fb(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1724>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x177c>
	test   %eax,%eax
	je     <read_core_chunk+0x1724>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1745>
	jmp    <read_core_chunk+0x177c>
	movzbl -0x8fb(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x18(%rbp)
	addl   $0x1,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x17a6>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x18(%rbp)
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x17a6>
	movzbl -0x8fb(%rbp),%edx
	mov    0x47b38(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x37019(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x18a8>
	addl   $0x1,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x18a8>
	movzbl -0x8fb(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x1815>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x8fa(%rbp)
	cmpb   $0x0,-0x8fa(%rbp)
	jne    <read_core_chunk+0x17fe>
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1837>
	cmpb   $0x8,-0x8fa(%rbp)
	jne    <read_core_chunk+0x1810>
	addl   $0x3,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1837>
	call   <abort@plt>
	movzbl -0x8fb(%rbp),%eax
	mov    %eax,%esi
	lea    0x36fb7(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x18a8>
	movzbl -0x8fb(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x184f>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1858>
	jmp    <read_core_chunk+0x186e>
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x186e>
	movzbl -0x8fb(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x18a8>
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x18a8>
	movzbl -0x8fb(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x47a36(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36f5f(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8f9(%rbp)
	movzbl -0x8f9(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1a7b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3726b(%rip),%rax        # <_IO_stdin_used+0x2918>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3725f(%rip),%rdx        # <_IO_stdin_used+0x2918>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x8f9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1926>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x197e>
	test   %eax,%eax
	je     <read_core_chunk+0x1926>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1947>
	jmp    <read_core_chunk+0x197e>
	movzbl -0x8f9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x10(%rbp)
	addl   $0x1,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x19a8>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x10(%rbp)
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x19a8>
	movzbl -0x8f9(%rbp),%edx
	mov    0x47936(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36e17(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1aaa>
	addl   $0x1,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1aaa>
	movzbl -0x8f9(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x1a17>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x8f8(%rbp)
	cmpb   $0x0,-0x8f8(%rbp)
	jne    <read_core_chunk+0x1a00>
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1a39>
	cmpb   $0x8,-0x8f8(%rbp)
	jne    <read_core_chunk+0x1a12>
	addl   $0x3,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1a39>
	call   <abort@plt>
	movzbl -0x8f9(%rbp),%eax
	mov    %eax,%esi
	lea    0x36db5(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1aaa>
	movzbl -0x8f9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x1a51>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1a5a>
	jmp    <read_core_chunk+0x1a70>
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1a70>
	movzbl -0x8f9(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1aaa>
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1aaa>
	movzbl -0x8f9(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x47834(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36d5d(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8f7(%rbp)
	movzbl -0x8f7(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x8f6(%rbp)
	movzbl -0x8f6(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x8f6(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x1afd>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x1b04>
	jmp    <read_core_chunk+0x1b7b>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x1b36>
	jmp    <read_core_chunk+0x1b7b>
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x48c(%rbp)
	addl   $0x1,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1b80>
	movzbl -0x8f7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x48c(%rbp)
	addl   $0x2,-0x8b0(%rbp)
	jmp    <read_core_chunk+0x1b80>
	call   <abort@plt>
	mov    -0x8b0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8ac(%rbp)
	mov    -0x8ac(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8ff(%rbp)
	movzbl -0x8ff(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1be3>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1c44>
	test   %eax,%eax
	je     <read_core_chunk+0x1be3>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1bff>
	jmp    <read_core_chunk+0x1c44>
	movzbl -0x8ff(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x49c(%rbp)
	addl   $0x1,-0x8ac(%rbp)
	jmp    <read_core_chunk+0x1c6e>
	movzbl -0x8ff(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8ac(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x49c(%rbp)
	addl   $0x2,-0x8ac(%rbp)
	jmp    <read_core_chunk+0x1c6e>
	movzbl -0x8ff(%rbp),%edx
	mov    0x47670(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36b19(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8ac(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x8fe(%rbp)
	movzbl -0x8fe(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1cb6>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1d17>
	test   %eax,%eax
	je     <read_core_chunk+0x1cb6>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1cd2>
	jmp    <read_core_chunk+0x1d17>
	movzbl -0x8fe(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x498(%rbp)
	addl   $0x1,-0x8ac(%rbp)
	jmp    <read_core_chunk+0x1d41>
	movzbl -0x8fe(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8ac(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x498(%rbp)
	addl   $0x2,-0x8ac(%rbp)
	jmp    <read_core_chunk+0x1d41>
	movzbl -0x8fe(%rbp),%edx
	mov    0x4759d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36a46(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8ac(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8a8(%rbp)
	mov    -0x8a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x902(%rbp)
	movzbl -0x902(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1da4>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1e05>
	test   %eax,%eax
	je     <read_core_chunk+0x1da4>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1dc0>
	jmp    <read_core_chunk+0x1e05>
	movzbl -0x902(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4a8(%rbp)
	addl   $0x1,-0x8a8(%rbp)
	jmp    <read_core_chunk+0x1e2f>
	movzbl -0x902(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4a8(%rbp)
	addl   $0x2,-0x8a8(%rbp)
	jmp    <read_core_chunk+0x1e2f>
	movzbl -0x902(%rbp),%edx
	mov    0x474af(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36958(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x901(%rbp)
	movzbl -0x901(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1e77>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1ed8>
	test   %eax,%eax
	je     <read_core_chunk+0x1e77>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1e93>
	jmp    <read_core_chunk+0x1ed8>
	movzbl -0x901(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4a4(%rbp)
	addl   $0x1,-0x8a8(%rbp)
	jmp    <read_core_chunk+0x1f02>
	movzbl -0x901(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4a4(%rbp)
	addl   $0x2,-0x8a8(%rbp)
	jmp    <read_core_chunk+0x1f02>
	movzbl -0x901(%rbp),%edx
	mov    0x473dc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36885(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x900(%rbp)
	movzbl -0x900(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1f4a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1fab>
	test   %eax,%eax
	je     <read_core_chunk+0x1f4a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1f66>
	jmp    <read_core_chunk+0x1fab>
	movzbl -0x900(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4a0(%rbp)
	addl   $0x1,-0x8a8(%rbp)
	jmp    <read_core_chunk+0x1fd5>
	movzbl -0x900(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4a0(%rbp)
	addl   $0x2,-0x8a8(%rbp)
	jmp    <read_core_chunk+0x1fd5>
	movzbl -0x900(%rbp),%edx
	mov    0x47309(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x367b2(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8a8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8a4(%rbp)
	mov    -0x8a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x904(%rbp)
	movzbl -0x904(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2038>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x2099>
	test   %eax,%eax
	je     <read_core_chunk+0x2038>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2054>
	jmp    <read_core_chunk+0x2099>
	movzbl -0x904(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4b0(%rbp)
	addl   $0x1,-0x8a4(%rbp)
	jmp    <read_core_chunk+0x20c3>
	movzbl -0x904(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4b0(%rbp)
	addl   $0x2,-0x8a4(%rbp)
	jmp    <read_core_chunk+0x20c3>
	movzbl -0x904(%rbp),%edx
	mov    0x4721b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x366c4(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x903(%rbp)
	movzbl -0x903(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x210b>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x216c>
	test   %eax,%eax
	je     <read_core_chunk+0x210b>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2127>
	jmp    <read_core_chunk+0x216c>
	movzbl -0x903(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4ac(%rbp)
	addl   $0x1,-0x8a4(%rbp)
	jmp    <read_core_chunk+0x2196>
	movzbl -0x903(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4ac(%rbp)
	addl   $0x2,-0x8a4(%rbp)
	jmp    <read_core_chunk+0x2196>
	movzbl -0x903(%rbp),%edx
	mov    0x47148(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x365f1(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8a4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x8a0(%rbp)
	mov    -0x8a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x907(%rbp)
	movzbl -0x907(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x21f9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x225a>
	test   %eax,%eax
	je     <read_core_chunk+0x21f9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2215>
	jmp    <read_core_chunk+0x225a>
	movzbl -0x907(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4bc(%rbp)
	addl   $0x1,-0x8a0(%rbp)
	jmp    <read_core_chunk+0x2284>
	movzbl -0x907(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4bc(%rbp)
	addl   $0x2,-0x8a0(%rbp)
	jmp    <read_core_chunk+0x2284>
	movzbl -0x907(%rbp),%edx
	mov    0x4705a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36503(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x906(%rbp)
	movzbl -0x906(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x22cc>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x232d>
	test   %eax,%eax
	je     <read_core_chunk+0x22cc>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x22e8>
	jmp    <read_core_chunk+0x232d>
	movzbl -0x906(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4b8(%rbp)
	addl   $0x1,-0x8a0(%rbp)
	jmp    <read_core_chunk+0x2357>
	movzbl -0x906(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4b8(%rbp)
	addl   $0x2,-0x8a0(%rbp)
	jmp    <read_core_chunk+0x2357>
	movzbl -0x906(%rbp),%edx
	mov    0x46f87(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x36430(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x905(%rbp)
	movzbl -0x905(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x239f>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x2400>
	test   %eax,%eax
	je     <read_core_chunk+0x239f>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x23bb>
	jmp    <read_core_chunk+0x2400>
	movzbl -0x905(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4b4(%rbp)
	addl   $0x1,-0x8a0(%rbp)
	jmp    <read_core_chunk+0x242a>
	movzbl -0x905(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x8a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4b4(%rbp)
	addl   $0x2,-0x8a0(%rbp)
	jmp    <read_core_chunk+0x242a>
	movzbl -0x905(%rbp),%edx
	mov    0x46eb4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3635d(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8a0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x89c(%rbp)
	mov    -0x89c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x909(%rbp)
	movzbl -0x909(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x248d>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x24ee>
	test   %eax,%eax
	je     <read_core_chunk+0x248d>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x24a9>
	jmp    <read_core_chunk+0x24ee>
	movzbl -0x909(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4c4(%rbp)
	addl   $0x1,-0x89c(%rbp)
	jmp    <read_core_chunk+0x2518>
	movzbl -0x909(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x89c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4c4(%rbp)
	addl   $0x2,-0x89c(%rbp)
	jmp    <read_core_chunk+0x2518>
	movzbl -0x909(%rbp),%edx
	mov    0x46dc6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3626f(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x89c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x908(%rbp)
	movzbl -0x908(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2560>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x25c1>
	test   %eax,%eax
	je     <read_core_chunk+0x2560>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x257c>
	jmp    <read_core_chunk+0x25c1>
	movzbl -0x908(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4c0(%rbp)
	addl   $0x1,-0x89c(%rbp)
	jmp    <read_core_chunk+0x25eb>
	movzbl -0x908(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x89c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4c0(%rbp)
	addl   $0x2,-0x89c(%rbp)
	jmp    <read_core_chunk+0x25eb>
	movzbl -0x908(%rbp),%edx
	mov    0x46cf3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3619c(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x89c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x898(%rbp)
	mov    -0x898(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x90a(%rbp)
	movzbl -0x90a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x264e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x26af>
	test   %eax,%eax
	je     <read_core_chunk+0x264e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x266a>
	jmp    <read_core_chunk+0x26af>
	movzbl -0x90a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4c8(%rbp)
	addl   $0x1,-0x898(%rbp)
	jmp    <read_core_chunk+0x26d9>
	movzbl -0x90a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x898(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4c8(%rbp)
	addl   $0x2,-0x898(%rbp)
	jmp    <read_core_chunk+0x26d9>
	movzbl -0x90a(%rbp),%edx
	mov    0x46c05(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x360ae(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x898(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x894(%rbp)
	mov    -0x894(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x90b(%rbp)
	movzbl -0x90b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x273c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x279d>
	test   %eax,%eax
	je     <read_core_chunk+0x273c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2758>
	jmp    <read_core_chunk+0x279d>
	movzbl -0x90b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4cc(%rbp)
	addl   $0x1,-0x894(%rbp)
	jmp    <read_core_chunk+0x27c7>
	movzbl -0x90b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x894(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4cc(%rbp)
	addl   $0x2,-0x894(%rbp)
	jmp    <read_core_chunk+0x27c7>
	movzbl -0x90b(%rbp),%edx
	mov    0x46b17(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35fc0(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x894(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	addl   $0x1,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	addl   $0x1,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	addl   $0x1,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	addl   $0x1,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x890(%rbp)
	mov    -0x890(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x90e(%rbp)
	movzbl -0x90e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x285a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x28bb>
	test   %eax,%eax
	je     <read_core_chunk+0x285a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2876>
	jmp    <read_core_chunk+0x28bb>
	movzbl -0x90e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4d4(%rbp)
	addl   $0x1,-0x890(%rbp)
	jmp    <read_core_chunk+0x28e5>
	movzbl -0x90e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x890(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4d4(%rbp)
	addl   $0x2,-0x890(%rbp)
	jmp    <read_core_chunk+0x28e5>
	movzbl -0x90e(%rbp),%edx
	mov    0x469f9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35e6a(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x890(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x90d(%rbp)
	movzbl -0x90d(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x90c(%rbp)
	movzbl -0x90c(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x90c(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x2938>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x293f>
	jmp    <read_core_chunk+0x29b6>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x2971>
	jmp    <read_core_chunk+0x29b6>
	mov    -0x890(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4d0(%rbp)
	addl   $0x1,-0x890(%rbp)
	jmp    <read_core_chunk+0x29bb>
	movzbl -0x90d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x890(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4d0(%rbp)
	addl   $0x2,-0x890(%rbp)
	jmp    <read_core_chunk+0x29bb>
	call   <abort@plt>
	mov    -0x890(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x88c(%rbp)
	mov    -0x88c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x90f(%rbp)
	movzbl -0x90f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2a1e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x2a7f>
	test   %eax,%eax
	je     <read_core_chunk+0x2a1e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2a3a>
	jmp    <read_core_chunk+0x2a7f>
	movzbl -0x90f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4d8(%rbp)
	addl   $0x1,-0x88c(%rbp)
	jmp    <read_core_chunk+0x2aa9>
	movzbl -0x90f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x88c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4d8(%rbp)
	addl   $0x2,-0x88c(%rbp)
	jmp    <read_core_chunk+0x2aa9>
	movzbl -0x90f(%rbp),%edx
	mov    0x46835(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35ca6(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x88c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x888(%rbp)
	mov    -0x888(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x910(%rbp)
	movzbl -0x910(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2b0c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x2b6d>
	test   %eax,%eax
	je     <read_core_chunk+0x2b0c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2b28>
	jmp    <read_core_chunk+0x2b6d>
	movzbl -0x910(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4dc(%rbp)
	addl   $0x1,-0x888(%rbp)
	jmp    <read_core_chunk+0x2b97>
	movzbl -0x910(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x888(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4dc(%rbp)
	addl   $0x2,-0x888(%rbp)
	jmp    <read_core_chunk+0x2b97>
	movzbl -0x910(%rbp),%edx
	mov    0x46747(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35bb8(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x888(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x884(%rbp)
	mov    -0x884(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x913(%rbp)
	movzbl -0x913(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2bfa>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x2c5b>
	test   %eax,%eax
	je     <read_core_chunk+0x2bfa>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2c16>
	jmp    <read_core_chunk+0x2c5b>
	movzbl -0x913(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4e4(%rbp)
	addl   $0x1,-0x884(%rbp)
	jmp    <read_core_chunk+0x2c85>
	movzbl -0x913(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x884(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4e4(%rbp)
	addl   $0x2,-0x884(%rbp)
	jmp    <read_core_chunk+0x2c85>
	movzbl -0x913(%rbp),%edx
	mov    0x46659(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35aca(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x884(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x912(%rbp)
	movzbl -0x912(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x2e5c>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x35ec2(%rip),%rax        # <_IO_stdin_used+0x294c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x35eb6(%rip),%rdx        # <_IO_stdin_used+0x294c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x912(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2d03>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x2d5f>
	test   %eax,%eax
	je     <read_core_chunk+0x2d03>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2d26>
	jmp    <read_core_chunk+0x2d5f>
	movzbl -0x912(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0x4e0(%rbp)
	addl   $0x1,-0x884(%rbp)
	jmp    <read_core_chunk+0x2d89>
	mov    -0x884(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0x4e0(%rbp)
	addl   $0x2,-0x884(%rbp)
	jmp    <read_core_chunk+0x2d89>
	movzbl -0x912(%rbp),%edx
	mov    0x46555(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35a36(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x2e8b>
	addl   $0x1,-0x884(%rbp)
	jmp    <read_core_chunk+0x2e8b>
	movzbl -0x912(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x2df8>
	mov    -0x884(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x911(%rbp)
	cmpb   $0x0,-0x911(%rbp)
	jne    <read_core_chunk+0x2de1>
	addl   $0x2,-0x884(%rbp)
	jmp    <read_core_chunk+0x2e1a>
	cmpb   $0x8,-0x911(%rbp)
	jne    <read_core_chunk+0x2df3>
	addl   $0x3,-0x884(%rbp)
	jmp    <read_core_chunk+0x2e1a>
	call   <abort@plt>
	movzbl -0x912(%rbp),%eax
	mov    %eax,%esi
	lea    0x359d4(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x2e8b>
	movzbl -0x912(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x2e32>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x2e3b>
	jmp    <read_core_chunk+0x2e51>
	addl   $0x2,-0x884(%rbp)
	jmp    <read_core_chunk+0x2e51>
	movzbl -0x912(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x884(%rbp)
	jmp    <read_core_chunk+0x2e8b>
	addl   $0x2,-0x884(%rbp)
	jmp    <read_core_chunk+0x2e8b>
	movzbl -0x912(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x46453(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3597c(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x884(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x880(%rbp)
	mov    -0x880(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x918(%rbp)
	movzbl -0x918(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2eee>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x2f4f>
	test   %eax,%eax
	je     <read_core_chunk+0x2eee>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x2f0a>
	jmp    <read_core_chunk+0x2f4f>
	movzbl -0x918(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4e8(%rbp)
	addl   $0x1,-0x880(%rbp)
	jmp    <read_core_chunk+0x2f79>
	movzbl -0x918(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x880(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4e8(%rbp)
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x2f79>
	movzbl -0x918(%rbp),%edx
	mov    0x46365(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x357d6(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x880(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x917(%rbp)
	movzbl -0x917(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x314c>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x35c02(%rip),%rax        # <_IO_stdin_used+0x2980>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x35bf6(%rip),%rdx        # <_IO_stdin_used+0x2980>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x917(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x2ff7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x304f>
	test   %eax,%eax
	je     <read_core_chunk+0x2ff7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x3018>
	jmp    <read_core_chunk+0x304f>
	movzbl -0x917(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x28(%rbp)
	addl   $0x1,-0x880(%rbp)
	jmp    <read_core_chunk+0x3079>
	mov    -0x880(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x28(%rbp)
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x3079>
	movzbl -0x917(%rbp),%edx
	mov    0x46265(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35746(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x317b>
	addl   $0x1,-0x880(%rbp)
	jmp    <read_core_chunk+0x317b>
	movzbl -0x917(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x30e8>
	mov    -0x880(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x916(%rbp)
	cmpb   $0x0,-0x916(%rbp)
	jne    <read_core_chunk+0x30d1>
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x310a>
	cmpb   $0x8,-0x916(%rbp)
	jne    <read_core_chunk+0x30e3>
	addl   $0x3,-0x880(%rbp)
	jmp    <read_core_chunk+0x310a>
	call   <abort@plt>
	movzbl -0x917(%rbp),%eax
	mov    %eax,%esi
	lea    0x356e4(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x317b>
	movzbl -0x917(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x3122>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x312b>
	jmp    <read_core_chunk+0x3141>
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x3141>
	movzbl -0x917(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x880(%rbp)
	jmp    <read_core_chunk+0x317b>
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x317b>
	movzbl -0x917(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x46163(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3568c(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x880(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x915(%rbp)
	movzbl -0x915(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x334e>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x35a34(%rip),%rax        # <_IO_stdin_used+0x29b4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x35a28(%rip),%rdx        # <_IO_stdin_used+0x29b4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x915(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x31f9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3251>
	test   %eax,%eax
	je     <read_core_chunk+0x31f9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x321a>
	jmp    <read_core_chunk+0x3251>
	movzbl -0x915(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x20(%rbp)
	addl   $0x1,-0x880(%rbp)
	jmp    <read_core_chunk+0x327b>
	mov    -0x880(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x20(%rbp)
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x327b>
	movzbl -0x915(%rbp),%edx
	mov    0x46063(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35544(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x337d>
	addl   $0x1,-0x880(%rbp)
	jmp    <read_core_chunk+0x337d>
	movzbl -0x915(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x32ea>
	mov    -0x880(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x914(%rbp)
	cmpb   $0x0,-0x914(%rbp)
	jne    <read_core_chunk+0x32d3>
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x330c>
	cmpb   $0x8,-0x914(%rbp)
	jne    <read_core_chunk+0x32e5>
	addl   $0x3,-0x880(%rbp)
	jmp    <read_core_chunk+0x330c>
	call   <abort@plt>
	movzbl -0x915(%rbp),%eax
	mov    %eax,%esi
	lea    0x354e2(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x337d>
	movzbl -0x915(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x3324>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x332d>
	jmp    <read_core_chunk+0x3343>
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x3343>
	movzbl -0x915(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x880(%rbp)
	jmp    <read_core_chunk+0x337d>
	addl   $0x2,-0x880(%rbp)
	jmp    <read_core_chunk+0x337d>
	movzbl -0x915(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x45f61(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3548a(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x880(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x87c(%rbp)
	mov    -0x87c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x91d(%rbp)
	movzbl -0x91d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x33e0>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3441>
	test   %eax,%eax
	je     <read_core_chunk+0x33e0>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x33fc>
	jmp    <read_core_chunk+0x3441>
	movzbl -0x91d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4ec(%rbp)
	addl   $0x1,-0x87c(%rbp)
	jmp    <read_core_chunk+0x346b>
	movzbl -0x91d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x87c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4ec(%rbp)
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x346b>
	movzbl -0x91d(%rbp),%edx
	mov    0x45e73(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x352e4(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x87c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x91c(%rbp)
	movzbl -0x91c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x363e>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x35778(%rip),%rax        # <_IO_stdin_used+0x29e8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3576c(%rip),%rdx        # <_IO_stdin_used+0x29e8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x91c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x34e9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3541>
	test   %eax,%eax
	je     <read_core_chunk+0x34e9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x350a>
	jmp    <read_core_chunk+0x3541>
	movzbl -0x91c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x38(%rbp)
	addl   $0x1,-0x87c(%rbp)
	jmp    <read_core_chunk+0x356b>
	mov    -0x87c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x38(%rbp)
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x356b>
	movzbl -0x91c(%rbp),%edx
	mov    0x45d73(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35254(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x366d>
	addl   $0x1,-0x87c(%rbp)
	jmp    <read_core_chunk+0x366d>
	movzbl -0x91c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x35da>
	mov    -0x87c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x91b(%rbp)
	cmpb   $0x0,-0x91b(%rbp)
	jne    <read_core_chunk+0x35c3>
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x35fc>
	cmpb   $0x8,-0x91b(%rbp)
	jne    <read_core_chunk+0x35d5>
	addl   $0x3,-0x87c(%rbp)
	jmp    <read_core_chunk+0x35fc>
	call   <abort@plt>
	movzbl -0x91c(%rbp),%eax
	mov    %eax,%esi
	lea    0x351f2(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x366d>
	movzbl -0x91c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x3614>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x361d>
	jmp    <read_core_chunk+0x3633>
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x3633>
	movzbl -0x91c(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x87c(%rbp)
	jmp    <read_core_chunk+0x366d>
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x366d>
	movzbl -0x91c(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x45c71(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3519a(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x87c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x91a(%rbp)
	movzbl -0x91a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x3840>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x355aa(%rip),%rax        # <_IO_stdin_used+0x2a1c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3559e(%rip),%rdx        # <_IO_stdin_used+0x2a1c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x91a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x36eb>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3743>
	test   %eax,%eax
	je     <read_core_chunk+0x36eb>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x370c>
	jmp    <read_core_chunk+0x3743>
	movzbl -0x91a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x30(%rbp)
	addl   $0x1,-0x87c(%rbp)
	jmp    <read_core_chunk+0x376d>
	mov    -0x87c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x30(%rbp)
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x376d>
	movzbl -0x91a(%rbp),%edx
	mov    0x45b71(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x35052(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x386f>
	addl   $0x1,-0x87c(%rbp)
	jmp    <read_core_chunk+0x386f>
	movzbl -0x91a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x37dc>
	mov    -0x87c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x919(%rbp)
	cmpb   $0x0,-0x919(%rbp)
	jne    <read_core_chunk+0x37c5>
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x37fe>
	cmpb   $0x8,-0x919(%rbp)
	jne    <read_core_chunk+0x37d7>
	addl   $0x3,-0x87c(%rbp)
	jmp    <read_core_chunk+0x37fe>
	call   <abort@plt>
	movzbl -0x91a(%rbp),%eax
	mov    %eax,%esi
	lea    0x34ff0(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x386f>
	movzbl -0x91a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x3816>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x381f>
	jmp    <read_core_chunk+0x3835>
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x3835>
	movzbl -0x91a(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x87c(%rbp)
	jmp    <read_core_chunk+0x386f>
	addl   $0x2,-0x87c(%rbp)
	jmp    <read_core_chunk+0x386f>
	movzbl -0x91a(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x45a6f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x34f98(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x87c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x878(%rbp)
	mov    -0x878(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x922(%rbp)
	movzbl -0x922(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x38d2>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3933>
	test   %eax,%eax
	je     <read_core_chunk+0x38d2>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x38ee>
	jmp    <read_core_chunk+0x3933>
	movzbl -0x922(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4f0(%rbp)
	addl   $0x1,-0x878(%rbp)
	jmp    <read_core_chunk+0x395d>
	movzbl -0x922(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x878(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4f0(%rbp)
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x395d>
	movzbl -0x922(%rbp),%edx
	mov    0x45981(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x34df2(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x878(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x921(%rbp)
	movzbl -0x921(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x3b30>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x352ee(%rip),%rax        # <_IO_stdin_used+0x2a50>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x352e2(%rip),%rdx        # <_IO_stdin_used+0x2a50>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x921(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x39db>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3a33>
	test   %eax,%eax
	je     <read_core_chunk+0x39db>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x39fc>
	jmp    <read_core_chunk+0x3a33>
	movzbl -0x921(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x48(%rbp)
	addl   $0x1,-0x878(%rbp)
	jmp    <read_core_chunk+0x3a5d>
	mov    -0x878(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x48(%rbp)
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x3a5d>
	movzbl -0x921(%rbp),%edx
	mov    0x45881(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x34d62(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x3b5f>
	addl   $0x1,-0x878(%rbp)
	jmp    <read_core_chunk+0x3b5f>
	movzbl -0x921(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x3acc>
	mov    -0x878(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x920(%rbp)
	cmpb   $0x0,-0x920(%rbp)
	jne    <read_core_chunk+0x3ab5>
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x3aee>
	cmpb   $0x8,-0x920(%rbp)
	jne    <read_core_chunk+0x3ac7>
	addl   $0x3,-0x878(%rbp)
	jmp    <read_core_chunk+0x3aee>
	call   <abort@plt>
	movzbl -0x921(%rbp),%eax
	mov    %eax,%esi
	lea    0x34d00(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x3b5f>
	movzbl -0x921(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x3b06>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x3b0f>
	jmp    <read_core_chunk+0x3b25>
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x3b25>
	movzbl -0x921(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x878(%rbp)
	jmp    <read_core_chunk+0x3b5f>
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x3b5f>
	movzbl -0x921(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x4577f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x34ca8(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x878(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x91f(%rbp)
	movzbl -0x91f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x3d32>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x35120(%rip),%rax        # <_IO_stdin_used+0x2a84>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x35114(%rip),%rdx        # <_IO_stdin_used+0x2a84>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x91f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x3bdd>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3c35>
	test   %eax,%eax
	je     <read_core_chunk+0x3bdd>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x3bfe>
	jmp    <read_core_chunk+0x3c35>
	movzbl -0x91f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x40(%rbp)
	addl   $0x1,-0x878(%rbp)
	jmp    <read_core_chunk+0x3c5f>
	mov    -0x878(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x40(%rbp)
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x3c5f>
	movzbl -0x91f(%rbp),%edx
	mov    0x4567f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x34b60(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x3d61>
	addl   $0x1,-0x878(%rbp)
	jmp    <read_core_chunk+0x3d61>
	movzbl -0x91f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x3cce>
	mov    -0x878(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x91e(%rbp)
	cmpb   $0x0,-0x91e(%rbp)
	jne    <read_core_chunk+0x3cb7>
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x3cf0>
	cmpb   $0x8,-0x91e(%rbp)
	jne    <read_core_chunk+0x3cc9>
	addl   $0x3,-0x878(%rbp)
	jmp    <read_core_chunk+0x3cf0>
	call   <abort@plt>
	movzbl -0x91f(%rbp),%eax
	mov    %eax,%esi
	lea    0x34afe(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x3d61>
	movzbl -0x91f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x3d08>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x3d11>
	jmp    <read_core_chunk+0x3d27>
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x3d27>
	movzbl -0x91f(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x878(%rbp)
	jmp    <read_core_chunk+0x3d61>
	addl   $0x2,-0x878(%rbp)
	jmp    <read_core_chunk+0x3d61>
	movzbl -0x91f(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x4557d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x34aa6(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x878(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x874(%rbp)
	mov    -0x874(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x927(%rbp)
	movzbl -0x927(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x3dc4>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3e25>
	test   %eax,%eax
	je     <read_core_chunk+0x3dc4>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x3de0>
	jmp    <read_core_chunk+0x3e25>
	movzbl -0x927(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4f4(%rbp)
	addl   $0x1,-0x874(%rbp)
	jmp    <read_core_chunk+0x3e4f>
	movzbl -0x927(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x874(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4f4(%rbp)
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x3e4f>
	movzbl -0x927(%rbp),%edx
	mov    0x4548f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x34900(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x874(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x926(%rbp)
	movzbl -0x926(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x4022>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x34e64(%rip),%rax        # <_IO_stdin_used+0x2ab8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x34e58(%rip),%rdx        # <_IO_stdin_used+0x2ab8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x926(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x3ecd>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x3f25>
	test   %eax,%eax
	je     <read_core_chunk+0x3ecd>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x3eee>
	jmp    <read_core_chunk+0x3f25>
	movzbl -0x926(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x58(%rbp)
	addl   $0x1,-0x874(%rbp)
	jmp    <read_core_chunk+0x3f4f>
	mov    -0x874(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x58(%rbp)
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x3f4f>
	movzbl -0x926(%rbp),%edx
	mov    0x4538f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x34870(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4051>
	addl   $0x1,-0x874(%rbp)
	jmp    <read_core_chunk+0x4051>
	movzbl -0x926(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x3fbe>
	mov    -0x874(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x925(%rbp)
	cmpb   $0x0,-0x925(%rbp)
	jne    <read_core_chunk+0x3fa7>
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x3fe0>
	cmpb   $0x8,-0x925(%rbp)
	jne    <read_core_chunk+0x3fb9>
	addl   $0x3,-0x874(%rbp)
	jmp    <read_core_chunk+0x3fe0>
	call   <abort@plt>
	movzbl -0x926(%rbp),%eax
	mov    %eax,%esi
	lea    0x3480e(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4051>
	movzbl -0x926(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x3ff8>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x4001>
	jmp    <read_core_chunk+0x4017>
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x4017>
	movzbl -0x926(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x874(%rbp)
	jmp    <read_core_chunk+0x4051>
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x4051>
	movzbl -0x926(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x4528d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x347b6(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x874(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x924(%rbp)
	movzbl -0x924(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x4224>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x34c96(%rip),%rax        # <_IO_stdin_used+0x2aec>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x34c8a(%rip),%rdx        # <_IO_stdin_used+0x2aec>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x924(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x40cf>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4127>
	test   %eax,%eax
	je     <read_core_chunk+0x40cf>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x40f0>
	jmp    <read_core_chunk+0x4127>
	movzbl -0x924(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x50(%rbp)
	addl   $0x1,-0x874(%rbp)
	jmp    <read_core_chunk+0x4151>
	mov    -0x874(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x50(%rbp)
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x4151>
	movzbl -0x924(%rbp),%edx
	mov    0x4518d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3466e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4253>
	addl   $0x1,-0x874(%rbp)
	jmp    <read_core_chunk+0x4253>
	movzbl -0x924(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x41c0>
	mov    -0x874(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x923(%rbp)
	cmpb   $0x0,-0x923(%rbp)
	jne    <read_core_chunk+0x41a9>
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x41e2>
	cmpb   $0x8,-0x923(%rbp)
	jne    <read_core_chunk+0x41bb>
	addl   $0x3,-0x874(%rbp)
	jmp    <read_core_chunk+0x41e2>
	call   <abort@plt>
	movzbl -0x924(%rbp),%eax
	mov    %eax,%esi
	lea    0x3460c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4253>
	movzbl -0x924(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x41fa>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x4203>
	jmp    <read_core_chunk+0x4219>
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x4219>
	movzbl -0x924(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x874(%rbp)
	jmp    <read_core_chunk+0x4253>
	addl   $0x2,-0x874(%rbp)
	jmp    <read_core_chunk+0x4253>
	movzbl -0x924(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x4508b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x345b4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x874(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x870(%rbp)
	mov    -0x870(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x92c(%rbp)
	movzbl -0x92c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x42b6>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4317>
	test   %eax,%eax
	je     <read_core_chunk+0x42b6>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x42d2>
	jmp    <read_core_chunk+0x4317>
	movzbl -0x92c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4f8(%rbp)
	addl   $0x1,-0x870(%rbp)
	jmp    <read_core_chunk+0x4341>
	movzbl -0x92c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x870(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4f8(%rbp)
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x4341>
	movzbl -0x92c(%rbp),%edx
	mov    0x44f9d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3440e(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x870(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x92b(%rbp)
	movzbl -0x92b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x4514>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x349da(%rip),%rax        # <_IO_stdin_used+0x2b20>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x349ce(%rip),%rdx        # <_IO_stdin_used+0x2b20>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x92b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x43bf>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4417>
	test   %eax,%eax
	je     <read_core_chunk+0x43bf>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x43e0>
	jmp    <read_core_chunk+0x4417>
	movzbl -0x92b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x68(%rbp)
	addl   $0x1,-0x870(%rbp)
	jmp    <read_core_chunk+0x4441>
	mov    -0x870(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x68(%rbp)
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x4441>
	movzbl -0x92b(%rbp),%edx
	mov    0x44e9d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3437e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4543>
	addl   $0x1,-0x870(%rbp)
	jmp    <read_core_chunk+0x4543>
	movzbl -0x92b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x44b0>
	mov    -0x870(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x92a(%rbp)
	cmpb   $0x0,-0x92a(%rbp)
	jne    <read_core_chunk+0x4499>
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x44d2>
	cmpb   $0x8,-0x92a(%rbp)
	jne    <read_core_chunk+0x44ab>
	addl   $0x3,-0x870(%rbp)
	jmp    <read_core_chunk+0x44d2>
	call   <abort@plt>
	movzbl -0x92b(%rbp),%eax
	mov    %eax,%esi
	lea    0x3431c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4543>
	movzbl -0x92b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x44ea>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x44f3>
	jmp    <read_core_chunk+0x4509>
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x4509>
	movzbl -0x92b(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x870(%rbp)
	jmp    <read_core_chunk+0x4543>
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x4543>
	movzbl -0x92b(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x44d9b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x342c4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x870(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x929(%rbp)
	movzbl -0x929(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x4716>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3480c(%rip),%rax        # <_IO_stdin_used+0x2b54>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x34800(%rip),%rdx        # <_IO_stdin_used+0x2b54>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x929(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x45c1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4619>
	test   %eax,%eax
	je     <read_core_chunk+0x45c1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x45e2>
	jmp    <read_core_chunk+0x4619>
	movzbl -0x929(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x60(%rbp)
	addl   $0x1,-0x870(%rbp)
	jmp    <read_core_chunk+0x4643>
	mov    -0x870(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x60(%rbp)
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x4643>
	movzbl -0x929(%rbp),%edx
	mov    0x44c9b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3417c(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4745>
	addl   $0x1,-0x870(%rbp)
	jmp    <read_core_chunk+0x4745>
	movzbl -0x929(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x46b2>
	mov    -0x870(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x928(%rbp)
	cmpb   $0x0,-0x928(%rbp)
	jne    <read_core_chunk+0x469b>
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x46d4>
	cmpb   $0x8,-0x928(%rbp)
	jne    <read_core_chunk+0x46ad>
	addl   $0x3,-0x870(%rbp)
	jmp    <read_core_chunk+0x46d4>
	call   <abort@plt>
	movzbl -0x929(%rbp),%eax
	mov    %eax,%esi
	lea    0x3411a(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4745>
	movzbl -0x929(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x46ec>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x46f5>
	jmp    <read_core_chunk+0x470b>
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x470b>
	movzbl -0x929(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x870(%rbp)
	jmp    <read_core_chunk+0x4745>
	addl   $0x2,-0x870(%rbp)
	jmp    <read_core_chunk+0x4745>
	movzbl -0x929(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x44b99(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x340c2(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x870(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x86c(%rbp)
	mov    -0x86c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x931(%rbp)
	movzbl -0x931(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x47a8>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4809>
	test   %eax,%eax
	je     <read_core_chunk+0x47a8>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x47c4>
	jmp    <read_core_chunk+0x4809>
	movzbl -0x931(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x4fc(%rbp)
	addl   $0x1,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4833>
	movzbl -0x931(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x86c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x4fc(%rbp)
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4833>
	movzbl -0x931(%rbp),%edx
	mov    0x44aab(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x33f1c(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x86c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x930(%rbp)
	movzbl -0x930(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x4a06>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x34550(%rip),%rax        # <_IO_stdin_used+0x2b88>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x34544(%rip),%rdx        # <_IO_stdin_used+0x2b88>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x930(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x48b1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4909>
	test   %eax,%eax
	je     <read_core_chunk+0x48b1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x48d2>
	jmp    <read_core_chunk+0x4909>
	movzbl -0x930(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x78(%rbp)
	addl   $0x1,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4933>
	mov    -0x86c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x78(%rbp)
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4933>
	movzbl -0x930(%rbp),%edx
	mov    0x449ab(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x33e8c(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4a35>
	addl   $0x1,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4a35>
	movzbl -0x930(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x49a2>
	mov    -0x86c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x92f(%rbp)
	cmpb   $0x0,-0x92f(%rbp)
	jne    <read_core_chunk+0x498b>
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x49c4>
	cmpb   $0x8,-0x92f(%rbp)
	jne    <read_core_chunk+0x499d>
	addl   $0x3,-0x86c(%rbp)
	jmp    <read_core_chunk+0x49c4>
	call   <abort@plt>
	movzbl -0x930(%rbp),%eax
	mov    %eax,%esi
	lea    0x33e2a(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4a35>
	movzbl -0x930(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x49dc>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x49e5>
	jmp    <read_core_chunk+0x49fb>
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x49fb>
	movzbl -0x930(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4a35>
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4a35>
	movzbl -0x930(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x448a9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x33dd2(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x86c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x92e(%rbp)
	movzbl -0x92e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x4c08>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x34382(%rip),%rax        # <_IO_stdin_used+0x2bbc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x34376(%rip),%rdx        # <_IO_stdin_used+0x2bbc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x92e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x4ab3>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4b0b>
	test   %eax,%eax
	je     <read_core_chunk+0x4ab3>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x4ad4>
	jmp    <read_core_chunk+0x4b0b>
	movzbl -0x92e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x70(%rbp)
	addl   $0x1,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4b35>
	mov    -0x86c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x70(%rbp)
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4b35>
	movzbl -0x92e(%rbp),%edx
	mov    0x447a9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x33c8a(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4c37>
	addl   $0x1,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4c37>
	movzbl -0x92e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x4ba4>
	mov    -0x86c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x92d(%rbp)
	cmpb   $0x0,-0x92d(%rbp)
	jne    <read_core_chunk+0x4b8d>
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4bc6>
	cmpb   $0x8,-0x92d(%rbp)
	jne    <read_core_chunk+0x4b9f>
	addl   $0x3,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4bc6>
	call   <abort@plt>
	movzbl -0x92e(%rbp),%eax
	mov    %eax,%esi
	lea    0x33c28(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4c37>
	movzbl -0x92e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x4bde>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x4be7>
	jmp    <read_core_chunk+0x4bfd>
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4bfd>
	movzbl -0x92e(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4c37>
	addl   $0x2,-0x86c(%rbp)
	jmp    <read_core_chunk+0x4c37>
	movzbl -0x92e(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x446a7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x33bd0(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x86c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x868(%rbp)
	mov    -0x868(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x934(%rbp)
	movzbl -0x934(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x4c9a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4cfb>
	test   %eax,%eax
	je     <read_core_chunk+0x4c9a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x4cb6>
	jmp    <read_core_chunk+0x4cfb>
	movzbl -0x934(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x500(%rbp)
	addl   $0x1,-0x868(%rbp)
	jmp    <read_core_chunk+0x4d25>
	movzbl -0x934(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x868(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x500(%rbp)
	addl   $0x2,-0x868(%rbp)
	jmp    <read_core_chunk+0x4d25>
	movzbl -0x934(%rbp),%edx
	mov    0x445b9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x33a2a(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x868(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x933(%rbp)
	movzbl -0x933(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x4ef8>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x340c6(%rip),%rax        # <_IO_stdin_used+0x2bf0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x340ba(%rip),%rdx        # <_IO_stdin_used+0x2bf0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x933(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x4da3>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4dfb>
	test   %eax,%eax
	je     <read_core_chunk+0x4da3>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x4dc4>
	jmp    <read_core_chunk+0x4dfb>
	movzbl -0x933(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x80(%rbp)
	addl   $0x1,-0x868(%rbp)
	jmp    <read_core_chunk+0x4e25>
	mov    -0x868(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x80(%rbp)
	addl   $0x2,-0x868(%rbp)
	jmp    <read_core_chunk+0x4e25>
	movzbl -0x933(%rbp),%edx
	mov    0x444b9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3399a(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4f27>
	addl   $0x1,-0x868(%rbp)
	jmp    <read_core_chunk+0x4f27>
	movzbl -0x933(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x4e94>
	mov    -0x868(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x932(%rbp)
	cmpb   $0x0,-0x932(%rbp)
	jne    <read_core_chunk+0x4e7d>
	addl   $0x2,-0x868(%rbp)
	jmp    <read_core_chunk+0x4eb6>
	cmpb   $0x8,-0x932(%rbp)
	jne    <read_core_chunk+0x4e8f>
	addl   $0x3,-0x868(%rbp)
	jmp    <read_core_chunk+0x4eb6>
	call   <abort@plt>
	movzbl -0x933(%rbp),%eax
	mov    %eax,%esi
	lea    0x33938(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x4f27>
	movzbl -0x933(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x4ece>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x4ed7>
	jmp    <read_core_chunk+0x4eed>
	addl   $0x2,-0x868(%rbp)
	jmp    <read_core_chunk+0x4eed>
	movzbl -0x933(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x868(%rbp)
	jmp    <read_core_chunk+0x4f27>
	addl   $0x2,-0x868(%rbp)
	jmp    <read_core_chunk+0x4f27>
	movzbl -0x933(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x443b7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x338e0(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x868(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x864(%rbp)
	mov    -0x864(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x937(%rbp)
	movzbl -0x937(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x4f8a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x4feb>
	test   %eax,%eax
	je     <read_core_chunk+0x4f8a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x4fa6>
	jmp    <read_core_chunk+0x4feb>
	movzbl -0x937(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x504(%rbp)
	addl   $0x1,-0x864(%rbp)
	jmp    <read_core_chunk+0x5015>
	movzbl -0x937(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x864(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x504(%rbp)
	addl   $0x2,-0x864(%rbp)
	jmp    <read_core_chunk+0x5015>
	movzbl -0x937(%rbp),%edx
	mov    0x442c9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3373a(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x864(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x936(%rbp)
	movzbl -0x936(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x51ee>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x33e0a(%rip),%rax        # <_IO_stdin_used+0x2c24>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x33dfe(%rip),%rdx        # <_IO_stdin_used+0x2c24>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x936(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5093>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x50f1>
	test   %eax,%eax
	je     <read_core_chunk+0x5093>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x50b7>
	jmp    <read_core_chunk+0x50f1>
	movzbl -0x936(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x88(%rbp)
	addl   $0x1,-0x864(%rbp)
	jmp    <read_core_chunk+0x511b>
	mov    -0x864(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x88(%rbp)
	addl   $0x2,-0x864(%rbp)
	jmp    <read_core_chunk+0x511b>
	movzbl -0x936(%rbp),%edx
	mov    0x441c3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x336a4(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x521d>
	addl   $0x1,-0x864(%rbp)
	jmp    <read_core_chunk+0x521d>
	movzbl -0x936(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x518a>
	mov    -0x864(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x935(%rbp)
	cmpb   $0x0,-0x935(%rbp)
	jne    <read_core_chunk+0x5173>
	addl   $0x2,-0x864(%rbp)
	jmp    <read_core_chunk+0x51ac>
	cmpb   $0x8,-0x935(%rbp)
	jne    <read_core_chunk+0x5185>
	addl   $0x3,-0x864(%rbp)
	jmp    <read_core_chunk+0x51ac>
	call   <abort@plt>
	movzbl -0x936(%rbp),%eax
	mov    %eax,%esi
	lea    0x33642(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x521d>
	movzbl -0x936(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x51c4>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x51cd>
	jmp    <read_core_chunk+0x51e3>
	addl   $0x2,-0x864(%rbp)
	jmp    <read_core_chunk+0x51e3>
	movzbl -0x936(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x864(%rbp)
	jmp    <read_core_chunk+0x521d>
	addl   $0x2,-0x864(%rbp)
	jmp    <read_core_chunk+0x521d>
	movzbl -0x936(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x440c1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x335ea(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x864(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x860(%rbp)
	mov    -0x860(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x93a(%rbp)
	movzbl -0x93a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5280>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x52e1>
	test   %eax,%eax
	je     <read_core_chunk+0x5280>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x529c>
	jmp    <read_core_chunk+0x52e1>
	movzbl -0x93a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x508(%rbp)
	addl   $0x1,-0x860(%rbp)
	jmp    <read_core_chunk+0x530b>
	movzbl -0x93a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x860(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x508(%rbp)
	addl   $0x2,-0x860(%rbp)
	jmp    <read_core_chunk+0x530b>
	movzbl -0x93a(%rbp),%edx
	mov    0x43fd3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x33444(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x860(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x939(%rbp)
	movzbl -0x939(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x54e4>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x33b48(%rip),%rax        # <_IO_stdin_used+0x2c58>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x33b3c(%rip),%rdx        # <_IO_stdin_used+0x2c58>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x939(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5389>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x53e7>
	test   %eax,%eax
	je     <read_core_chunk+0x5389>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x53ad>
	jmp    <read_core_chunk+0x53e7>
	movzbl -0x939(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x90(%rbp)
	addl   $0x1,-0x860(%rbp)
	jmp    <read_core_chunk+0x5411>
	mov    -0x860(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x90(%rbp)
	addl   $0x2,-0x860(%rbp)
	jmp    <read_core_chunk+0x5411>
	movzbl -0x939(%rbp),%edx
	mov    0x43ecd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x333ae(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x5513>
	addl   $0x1,-0x860(%rbp)
	jmp    <read_core_chunk+0x5513>
	movzbl -0x939(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x5480>
	mov    -0x860(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x938(%rbp)
	cmpb   $0x0,-0x938(%rbp)
	jne    <read_core_chunk+0x5469>
	addl   $0x2,-0x860(%rbp)
	jmp    <read_core_chunk+0x54a2>
	cmpb   $0x8,-0x938(%rbp)
	jne    <read_core_chunk+0x547b>
	addl   $0x3,-0x860(%rbp)
	jmp    <read_core_chunk+0x54a2>
	call   <abort@plt>
	movzbl -0x939(%rbp),%eax
	mov    %eax,%esi
	lea    0x3334c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x5513>
	movzbl -0x939(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x54ba>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x54c3>
	jmp    <read_core_chunk+0x54d9>
	addl   $0x2,-0x860(%rbp)
	jmp    <read_core_chunk+0x54d9>
	movzbl -0x939(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x860(%rbp)
	jmp    <read_core_chunk+0x5513>
	addl   $0x2,-0x860(%rbp)
	jmp    <read_core_chunk+0x5513>
	movzbl -0x939(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x43dcb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x332f4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x860(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x85c(%rbp)
	mov    -0x85c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x94c(%rbp)
	movzbl -0x94c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5576>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x55d7>
	test   %eax,%eax
	je     <read_core_chunk+0x5576>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x5592>
	jmp    <read_core_chunk+0x55d7>
	movzbl -0x94c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x520(%rbp)
	addl   $0x1,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5601>
	movzbl -0x94c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x85c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x520(%rbp)
	addl   $0x2,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5601>
	movzbl -0x94c(%rbp),%edx
	mov    0x43cdd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3314e(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x85c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x94b(%rbp)
	movzbl -0x94b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x57da>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x33886(%rip),%rax        # <_IO_stdin_used+0x2c8c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3387a(%rip),%rdx        # <_IO_stdin_used+0x2c8c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x94b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x567f>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x56dd>
	test   %eax,%eax
	je     <read_core_chunk+0x567f>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x56a3>
	jmp    <read_core_chunk+0x56dd>
	movzbl -0x94b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xc0(%rbp)
	addl   $0x1,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5707>
	mov    -0x85c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xc0(%rbp)
	addl   $0x2,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5707>
	movzbl -0x94b(%rbp),%edx
	mov    0x43bd7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x330b8(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x5809>
	addl   $0x1,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5809>
	movzbl -0x94b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x5776>
	mov    -0x85c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x94a(%rbp)
	cmpb   $0x0,-0x94a(%rbp)
	jne    <read_core_chunk+0x575f>
	addl   $0x2,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5798>
	cmpb   $0x8,-0x94a(%rbp)
	jne    <read_core_chunk+0x5771>
	addl   $0x3,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5798>
	call   <abort@plt>
	movzbl -0x94b(%rbp),%eax
	mov    %eax,%esi
	lea    0x33056(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x5809>
	movzbl -0x94b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x57b0>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x57b9>
	jmp    <read_core_chunk+0x57cf>
	addl   $0x2,-0x85c(%rbp)
	jmp    <read_core_chunk+0x57cf>
	movzbl -0x94b(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5809>
	addl   $0x2,-0x85c(%rbp)
	jmp    <read_core_chunk+0x5809>
	movzbl -0x94b(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x43ad5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32ffe(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x85c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x858(%rbp)
	mov    -0x858(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x94f(%rbp)
	movzbl -0x94f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x586c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x58cd>
	test   %eax,%eax
	je     <read_core_chunk+0x586c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x5888>
	jmp    <read_core_chunk+0x58cd>
	movzbl -0x94f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x524(%rbp)
	addl   $0x1,-0x858(%rbp)
	jmp    <read_core_chunk+0x58f7>
	movzbl -0x94f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x858(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x524(%rbp)
	addl   $0x2,-0x858(%rbp)
	jmp    <read_core_chunk+0x58f7>
	movzbl -0x94f(%rbp),%edx
	mov    0x439e7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32e58(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x858(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x94e(%rbp)
	movzbl -0x94e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x5ad0>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x335c4(%rip),%rax        # <_IO_stdin_used+0x2cc0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x335b8(%rip),%rdx        # <_IO_stdin_used+0x2cc0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x94e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5975>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x59d3>
	test   %eax,%eax
	je     <read_core_chunk+0x5975>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x5999>
	jmp    <read_core_chunk+0x59d3>
	movzbl -0x94e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xc8(%rbp)
	addl   $0x1,-0x858(%rbp)
	jmp    <read_core_chunk+0x59fd>
	mov    -0x858(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xc8(%rbp)
	addl   $0x2,-0x858(%rbp)
	jmp    <read_core_chunk+0x59fd>
	movzbl -0x94e(%rbp),%edx
	mov    0x438e1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32dc2(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x5aff>
	addl   $0x1,-0x858(%rbp)
	jmp    <read_core_chunk+0x5aff>
	movzbl -0x94e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x5a6c>
	mov    -0x858(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x94d(%rbp)
	cmpb   $0x0,-0x94d(%rbp)
	jne    <read_core_chunk+0x5a55>
	addl   $0x2,-0x858(%rbp)
	jmp    <read_core_chunk+0x5a8e>
	cmpb   $0x8,-0x94d(%rbp)
	jne    <read_core_chunk+0x5a67>
	addl   $0x3,-0x858(%rbp)
	jmp    <read_core_chunk+0x5a8e>
	call   <abort@plt>
	movzbl -0x94e(%rbp),%eax
	mov    %eax,%esi
	lea    0x32d60(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x5aff>
	movzbl -0x94e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x5aa6>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x5aaf>
	jmp    <read_core_chunk+0x5ac5>
	addl   $0x2,-0x858(%rbp)
	jmp    <read_core_chunk+0x5ac5>
	movzbl -0x94e(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x858(%rbp)
	jmp    <read_core_chunk+0x5aff>
	addl   $0x2,-0x858(%rbp)
	jmp    <read_core_chunk+0x5aff>
	movzbl -0x94e(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x437df(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32d08(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x858(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x854(%rbp)
	mov    -0x854(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x952(%rbp)
	movzbl -0x952(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5b62>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x5bc3>
	test   %eax,%eax
	je     <read_core_chunk+0x5b62>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x5b7e>
	jmp    <read_core_chunk+0x5bc3>
	movzbl -0x952(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x528(%rbp)
	addl   $0x1,-0x854(%rbp)
	jmp    <read_core_chunk+0x5bed>
	movzbl -0x952(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x854(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x528(%rbp)
	addl   $0x2,-0x854(%rbp)
	jmp    <read_core_chunk+0x5bed>
	movzbl -0x952(%rbp),%edx
	mov    0x436f1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32b62(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x854(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x951(%rbp)
	movzbl -0x951(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x5dc6>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x33302(%rip),%rax        # <_IO_stdin_used+0x2cf4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x332f6(%rip),%rdx        # <_IO_stdin_used+0x2cf4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x951(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5c6b>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x5cc9>
	test   %eax,%eax
	je     <read_core_chunk+0x5c6b>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x5c8f>
	jmp    <read_core_chunk+0x5cc9>
	movzbl -0x951(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xd0(%rbp)
	addl   $0x1,-0x854(%rbp)
	jmp    <read_core_chunk+0x5cf3>
	mov    -0x854(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xd0(%rbp)
	addl   $0x2,-0x854(%rbp)
	jmp    <read_core_chunk+0x5cf3>
	movzbl -0x951(%rbp),%edx
	mov    0x435eb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32acc(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x5df5>
	addl   $0x1,-0x854(%rbp)
	jmp    <read_core_chunk+0x5df5>
	movzbl -0x951(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x5d62>
	mov    -0x854(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x950(%rbp)
	cmpb   $0x0,-0x950(%rbp)
	jne    <read_core_chunk+0x5d4b>
	addl   $0x2,-0x854(%rbp)
	jmp    <read_core_chunk+0x5d84>
	cmpb   $0x8,-0x950(%rbp)
	jne    <read_core_chunk+0x5d5d>
	addl   $0x3,-0x854(%rbp)
	jmp    <read_core_chunk+0x5d84>
	call   <abort@plt>
	movzbl -0x951(%rbp),%eax
	mov    %eax,%esi
	lea    0x32a6a(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x5df5>
	movzbl -0x951(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x5d9c>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x5da5>
	jmp    <read_core_chunk+0x5dbb>
	addl   $0x2,-0x854(%rbp)
	jmp    <read_core_chunk+0x5dbb>
	movzbl -0x951(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x854(%rbp)
	jmp    <read_core_chunk+0x5df5>
	addl   $0x2,-0x854(%rbp)
	jmp    <read_core_chunk+0x5df5>
	movzbl -0x951(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x434e9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32a12(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x854(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x850(%rbp)
	mov    -0x850(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x949(%rbp)
	movzbl -0x949(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5e58>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x5eb9>
	test   %eax,%eax
	je     <read_core_chunk+0x5e58>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x5e74>
	jmp    <read_core_chunk+0x5eb9>
	movzbl -0x949(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x51c(%rbp)
	addl   $0x1,-0x850(%rbp)
	jmp    <read_core_chunk+0x5ee3>
	movzbl -0x949(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x850(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x51c(%rbp)
	addl   $0x2,-0x850(%rbp)
	jmp    <read_core_chunk+0x5ee3>
	movzbl -0x949(%rbp),%edx
	mov    0x433fb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3286c(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x850(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x948(%rbp)
	movzbl -0x948(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x60bc>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x33040(%rip),%rax        # <_IO_stdin_used+0x2d28>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x33034(%rip),%rdx        # <_IO_stdin_used+0x2d28>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x948(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x5f61>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x5fbf>
	test   %eax,%eax
	je     <read_core_chunk+0x5f61>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x5f85>
	jmp    <read_core_chunk+0x5fbf>
	movzbl -0x948(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xb8(%rbp)
	addl   $0x1,-0x850(%rbp)
	jmp    <read_core_chunk+0x5fe9>
	mov    -0x850(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xb8(%rbp)
	addl   $0x2,-0x850(%rbp)
	jmp    <read_core_chunk+0x5fe9>
	movzbl -0x948(%rbp),%edx
	mov    0x432f5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x327d6(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x60eb>
	addl   $0x1,-0x850(%rbp)
	jmp    <read_core_chunk+0x60eb>
	movzbl -0x948(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x6058>
	mov    -0x850(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x947(%rbp)
	cmpb   $0x0,-0x947(%rbp)
	jne    <read_core_chunk+0x6041>
	addl   $0x2,-0x850(%rbp)
	jmp    <read_core_chunk+0x607a>
	cmpb   $0x8,-0x947(%rbp)
	jne    <read_core_chunk+0x6053>
	addl   $0x3,-0x850(%rbp)
	jmp    <read_core_chunk+0x607a>
	call   <abort@plt>
	movzbl -0x948(%rbp),%eax
	mov    %eax,%esi
	lea    0x32774(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x60eb>
	movzbl -0x948(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x6092>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x609b>
	jmp    <read_core_chunk+0x60b1>
	addl   $0x2,-0x850(%rbp)
	jmp    <read_core_chunk+0x60b1>
	movzbl -0x948(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x850(%rbp)
	jmp    <read_core_chunk+0x60eb>
	addl   $0x2,-0x850(%rbp)
	jmp    <read_core_chunk+0x60eb>
	movzbl -0x948(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x431f3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3271c(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x850(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x84c(%rbp)
	mov    -0x84c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x93d(%rbp)
	movzbl -0x93d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x614e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x61af>
	test   %eax,%eax
	je     <read_core_chunk+0x614e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x616a>
	jmp    <read_core_chunk+0x61af>
	movzbl -0x93d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x50c(%rbp)
	addl   $0x1,-0x84c(%rbp)
	jmp    <read_core_chunk+0x61d9>
	movzbl -0x93d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x84c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x50c(%rbp)
	addl   $0x2,-0x84c(%rbp)
	jmp    <read_core_chunk+0x61d9>
	movzbl -0x93d(%rbp),%edx
	mov    0x43105(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32576(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x84c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x93c(%rbp)
	movzbl -0x93c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x63b2>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x32d7e(%rip),%rax        # <_IO_stdin_used+0x2d5c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x32d72(%rip),%rdx        # <_IO_stdin_used+0x2d5c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x93c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x6257>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x62b5>
	test   %eax,%eax
	je     <read_core_chunk+0x6257>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x627b>
	jmp    <read_core_chunk+0x62b5>
	movzbl -0x93c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x98(%rbp)
	addl   $0x1,-0x84c(%rbp)
	jmp    <read_core_chunk+0x62df>
	mov    -0x84c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x98(%rbp)
	addl   $0x2,-0x84c(%rbp)
	jmp    <read_core_chunk+0x62df>
	movzbl -0x93c(%rbp),%edx
	mov    0x42fff(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x324e0(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x63e1>
	addl   $0x1,-0x84c(%rbp)
	jmp    <read_core_chunk+0x63e1>
	movzbl -0x93c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x634e>
	mov    -0x84c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x93b(%rbp)
	cmpb   $0x0,-0x93b(%rbp)
	jne    <read_core_chunk+0x6337>
	addl   $0x2,-0x84c(%rbp)
	jmp    <read_core_chunk+0x6370>
	cmpb   $0x8,-0x93b(%rbp)
	jne    <read_core_chunk+0x6349>
	addl   $0x3,-0x84c(%rbp)
	jmp    <read_core_chunk+0x6370>
	call   <abort@plt>
	movzbl -0x93c(%rbp),%eax
	mov    %eax,%esi
	lea    0x3247e(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x63e1>
	movzbl -0x93c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x6388>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x6391>
	jmp    <read_core_chunk+0x63a7>
	addl   $0x2,-0x84c(%rbp)
	jmp    <read_core_chunk+0x63a7>
	movzbl -0x93c(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x84c(%rbp)
	jmp    <read_core_chunk+0x63e1>
	addl   $0x2,-0x84c(%rbp)
	jmp    <read_core_chunk+0x63e1>
	movzbl -0x93c(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x42efd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32426(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x84c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x848(%rbp)
	mov    -0x848(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x940(%rbp)
	movzbl -0x940(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x6444>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x64a5>
	test   %eax,%eax
	je     <read_core_chunk+0x6444>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x6460>
	jmp    <read_core_chunk+0x64a5>
	movzbl -0x940(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x510(%rbp)
	addl   $0x1,-0x848(%rbp)
	jmp    <read_core_chunk+0x64cf>
	movzbl -0x940(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x848(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x510(%rbp)
	addl   $0x2,-0x848(%rbp)
	jmp    <read_core_chunk+0x64cf>
	movzbl -0x940(%rbp),%edx
	mov    0x42e0f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32280(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x848(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x93f(%rbp)
	movzbl -0x93f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x66a8>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x32abc(%rip),%rax        # <_IO_stdin_used+0x2d90>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x32ab0(%rip),%rdx        # <_IO_stdin_used+0x2d90>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x93f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x654d>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x65ab>
	test   %eax,%eax
	je     <read_core_chunk+0x654d>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x6571>
	jmp    <read_core_chunk+0x65ab>
	movzbl -0x93f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xa0(%rbp)
	addl   $0x1,-0x848(%rbp)
	jmp    <read_core_chunk+0x65d5>
	mov    -0x848(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xa0(%rbp)
	addl   $0x2,-0x848(%rbp)
	jmp    <read_core_chunk+0x65d5>
	movzbl -0x93f(%rbp),%edx
	mov    0x42d09(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x321ea(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x66d7>
	addl   $0x1,-0x848(%rbp)
	jmp    <read_core_chunk+0x66d7>
	movzbl -0x93f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x6644>
	mov    -0x848(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x93e(%rbp)
	cmpb   $0x0,-0x93e(%rbp)
	jne    <read_core_chunk+0x662d>
	addl   $0x2,-0x848(%rbp)
	jmp    <read_core_chunk+0x6666>
	cmpb   $0x8,-0x93e(%rbp)
	jne    <read_core_chunk+0x663f>
	addl   $0x3,-0x848(%rbp)
	jmp    <read_core_chunk+0x6666>
	call   <abort@plt>
	movzbl -0x93f(%rbp),%eax
	mov    %eax,%esi
	lea    0x32188(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x66d7>
	movzbl -0x93f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x667e>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x6687>
	jmp    <read_core_chunk+0x669d>
	addl   $0x2,-0x848(%rbp)
	jmp    <read_core_chunk+0x669d>
	movzbl -0x93f(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x848(%rbp)
	jmp    <read_core_chunk+0x66d7>
	addl   $0x2,-0x848(%rbp)
	jmp    <read_core_chunk+0x66d7>
	movzbl -0x93f(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x42c07(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x32130(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x848(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x844(%rbp)
	mov    -0x844(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x943(%rbp)
	movzbl -0x943(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x673a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x679b>
	test   %eax,%eax
	je     <read_core_chunk+0x673a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x6756>
	jmp    <read_core_chunk+0x679b>
	movzbl -0x943(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x514(%rbp)
	addl   $0x1,-0x844(%rbp)
	jmp    <read_core_chunk+0x67c5>
	movzbl -0x943(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x844(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x514(%rbp)
	addl   $0x2,-0x844(%rbp)
	jmp    <read_core_chunk+0x67c5>
	movzbl -0x943(%rbp),%edx
	mov    0x42b19(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31f8a(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x844(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x942(%rbp)
	movzbl -0x942(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x699e>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x327fa(%rip),%rax        # <_IO_stdin_used+0x2dc4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x327ee(%rip),%rdx        # <_IO_stdin_used+0x2dc4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x942(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x6843>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x68a1>
	test   %eax,%eax
	je     <read_core_chunk+0x6843>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x6867>
	jmp    <read_core_chunk+0x68a1>
	movzbl -0x942(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xa8(%rbp)
	addl   $0x1,-0x844(%rbp)
	jmp    <read_core_chunk+0x68cb>
	mov    -0x844(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xa8(%rbp)
	addl   $0x2,-0x844(%rbp)
	jmp    <read_core_chunk+0x68cb>
	movzbl -0x942(%rbp),%edx
	mov    0x42a13(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31ef4(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x69cd>
	addl   $0x1,-0x844(%rbp)
	jmp    <read_core_chunk+0x69cd>
	movzbl -0x942(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x693a>
	mov    -0x844(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x941(%rbp)
	cmpb   $0x0,-0x941(%rbp)
	jne    <read_core_chunk+0x6923>
	addl   $0x2,-0x844(%rbp)
	jmp    <read_core_chunk+0x695c>
	cmpb   $0x8,-0x941(%rbp)
	jne    <read_core_chunk+0x6935>
	addl   $0x3,-0x844(%rbp)
	jmp    <read_core_chunk+0x695c>
	call   <abort@plt>
	movzbl -0x942(%rbp),%eax
	mov    %eax,%esi
	lea    0x31e92(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x69cd>
	movzbl -0x942(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x6974>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x697d>
	jmp    <read_core_chunk+0x6993>
	addl   $0x2,-0x844(%rbp)
	jmp    <read_core_chunk+0x6993>
	movzbl -0x942(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x844(%rbp)
	jmp    <read_core_chunk+0x69cd>
	addl   $0x2,-0x844(%rbp)
	jmp    <read_core_chunk+0x69cd>
	movzbl -0x942(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x42911(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31e3a(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x844(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x840(%rbp)
	mov    -0x840(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x946(%rbp)
	movzbl -0x946(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x6a30>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x6a91>
	test   %eax,%eax
	je     <read_core_chunk+0x6a30>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x6a4c>
	jmp    <read_core_chunk+0x6a91>
	movzbl -0x946(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x518(%rbp)
	addl   $0x1,-0x840(%rbp)
	jmp    <read_core_chunk+0x6abb>
	movzbl -0x946(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x840(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x518(%rbp)
	addl   $0x2,-0x840(%rbp)
	jmp    <read_core_chunk+0x6abb>
	movzbl -0x946(%rbp),%edx
	mov    0x42823(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31c94(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x840(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x945(%rbp)
	movzbl -0x945(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x6c94>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x32538(%rip),%rax        # <_IO_stdin_used+0x2df8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3252c(%rip),%rdx        # <_IO_stdin_used+0x2df8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x945(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x6b39>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x6b97>
	test   %eax,%eax
	je     <read_core_chunk+0x6b39>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x6b5d>
	jmp    <read_core_chunk+0x6b97>
	movzbl -0x945(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xb0(%rbp)
	addl   $0x1,-0x840(%rbp)
	jmp    <read_core_chunk+0x6bc1>
	mov    -0x840(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xb0(%rbp)
	addl   $0x2,-0x840(%rbp)
	jmp    <read_core_chunk+0x6bc1>
	movzbl -0x945(%rbp),%edx
	mov    0x4271d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31bfe(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x6cc3>
	addl   $0x1,-0x840(%rbp)
	jmp    <read_core_chunk+0x6cc3>
	movzbl -0x945(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x6c30>
	mov    -0x840(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x944(%rbp)
	cmpb   $0x0,-0x944(%rbp)
	jne    <read_core_chunk+0x6c19>
	addl   $0x2,-0x840(%rbp)
	jmp    <read_core_chunk+0x6c52>
	cmpb   $0x8,-0x944(%rbp)
	jne    <read_core_chunk+0x6c2b>
	addl   $0x3,-0x840(%rbp)
	jmp    <read_core_chunk+0x6c52>
	call   <abort@plt>
	movzbl -0x945(%rbp),%eax
	mov    %eax,%esi
	lea    0x31b9c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x6cc3>
	movzbl -0x945(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x6c6a>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x6c73>
	jmp    <read_core_chunk+0x6c89>
	addl   $0x2,-0x840(%rbp)
	jmp    <read_core_chunk+0x6c89>
	movzbl -0x945(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x840(%rbp)
	jmp    <read_core_chunk+0x6cc3>
	addl   $0x2,-0x840(%rbp)
	jmp    <read_core_chunk+0x6cc3>
	movzbl -0x945(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x4261b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31b44(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x840(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x83c(%rbp)
	mov    -0x83c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x955(%rbp)
	movzbl -0x955(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x6d26>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x6d87>
	test   %eax,%eax
	je     <read_core_chunk+0x6d26>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x6d42>
	jmp    <read_core_chunk+0x6d87>
	movzbl -0x955(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x52c(%rbp)
	addl   $0x1,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6db1>
	movzbl -0x955(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x83c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x52c(%rbp)
	addl   $0x2,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6db1>
	movzbl -0x955(%rbp),%edx
	mov    0x4252d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3199e(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x83c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x954(%rbp)
	movzbl -0x954(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x6f8a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x32276(%rip),%rax        # <_IO_stdin_used+0x2e2c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x3226a(%rip),%rdx        # <_IO_stdin_used+0x2e2c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x954(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x6e2f>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x6e8d>
	test   %eax,%eax
	je     <read_core_chunk+0x6e2f>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x6e53>
	jmp    <read_core_chunk+0x6e8d>
	movzbl -0x954(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xd8(%rbp)
	addl   $0x1,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6eb7>
	mov    -0x83c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xd8(%rbp)
	addl   $0x2,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6eb7>
	movzbl -0x954(%rbp),%edx
	mov    0x42427(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31908(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x6fb9>
	addl   $0x1,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6fb9>
	movzbl -0x954(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x6f26>
	mov    -0x83c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x953(%rbp)
	cmpb   $0x0,-0x953(%rbp)
	jne    <read_core_chunk+0x6f0f>
	addl   $0x2,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6f48>
	cmpb   $0x8,-0x953(%rbp)
	jne    <read_core_chunk+0x6f21>
	addl   $0x3,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6f48>
	call   <abort@plt>
	movzbl -0x954(%rbp),%eax
	mov    %eax,%esi
	lea    0x318a6(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x6fb9>
	movzbl -0x954(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x6f60>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x6f69>
	jmp    <read_core_chunk+0x6f7f>
	addl   $0x2,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6f7f>
	movzbl -0x954(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6fb9>
	addl   $0x2,-0x83c(%rbp)
	jmp    <read_core_chunk+0x6fb9>
	movzbl -0x954(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x42325(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3184e(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x83c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x838(%rbp)
	mov    -0x838(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x959(%rbp)
	movzbl -0x959(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x701c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x707d>
	test   %eax,%eax
	je     <read_core_chunk+0x701c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7038>
	jmp    <read_core_chunk+0x707d>
	movzbl -0x959(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x534(%rbp)
	addl   $0x1,-0x838(%rbp)
	jmp    <read_core_chunk+0x70a7>
	movzbl -0x959(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x838(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x534(%rbp)
	addl   $0x2,-0x838(%rbp)
	jmp    <read_core_chunk+0x70a7>
	movzbl -0x959(%rbp),%edx
	mov    0x42237(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x316a8(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x838(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x958(%rbp)
	movzbl -0x958(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x7280>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x31fb4(%rip),%rax        # <_IO_stdin_used+0x2e60>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x31fa8(%rip),%rdx        # <_IO_stdin_used+0x2e60>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x958(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x7125>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7183>
	test   %eax,%eax
	je     <read_core_chunk+0x7125>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7149>
	jmp    <read_core_chunk+0x7183>
	movzbl -0x958(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xe0(%rbp)
	addl   $0x1,-0x838(%rbp)
	jmp    <read_core_chunk+0x71ad>
	mov    -0x838(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xe0(%rbp)
	addl   $0x2,-0x838(%rbp)
	jmp    <read_core_chunk+0x71ad>
	movzbl -0x958(%rbp),%edx
	mov    0x42131(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31612(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x72af>
	addl   $0x1,-0x838(%rbp)
	jmp    <read_core_chunk+0x72af>
	movzbl -0x958(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x721c>
	mov    -0x838(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x957(%rbp)
	cmpb   $0x0,-0x957(%rbp)
	jne    <read_core_chunk+0x7205>
	addl   $0x2,-0x838(%rbp)
	jmp    <read_core_chunk+0x723e>
	cmpb   $0x8,-0x957(%rbp)
	jne    <read_core_chunk+0x7217>
	addl   $0x3,-0x838(%rbp)
	jmp    <read_core_chunk+0x723e>
	call   <abort@plt>
	movzbl -0x958(%rbp),%eax
	mov    %eax,%esi
	lea    0x315b0(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x72af>
	movzbl -0x958(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x7256>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x725f>
	jmp    <read_core_chunk+0x7275>
	addl   $0x2,-0x838(%rbp)
	jmp    <read_core_chunk+0x7275>
	movzbl -0x958(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x838(%rbp)
	jmp    <read_core_chunk+0x72af>
	addl   $0x2,-0x838(%rbp)
	jmp    <read_core_chunk+0x72af>
	movzbl -0x958(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x4202f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31558(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x838(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x956(%rbp)
	movzbl -0x956(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x72f7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7358>
	test   %eax,%eax
	je     <read_core_chunk+0x72f7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7313>
	jmp    <read_core_chunk+0x7358>
	movzbl -0x956(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x530(%rbp)
	addl   $0x1,-0x838(%rbp)
	jmp    <read_core_chunk+0x7382>
	movzbl -0x956(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x838(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x530(%rbp)
	addl   $0x2,-0x838(%rbp)
	jmp    <read_core_chunk+0x7382>
	movzbl -0x956(%rbp),%edx
	mov    0x41f5c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31405(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x838(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x834(%rbp)
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x960(%rbp)
	movzbl -0x960(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x7576>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x31cf2(%rip),%rax        # <_IO_stdin_used+0x2e94>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x31ce6(%rip),%rdx        # <_IO_stdin_used+0x2e94>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x960(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x741b>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7479>
	test   %eax,%eax
	je     <read_core_chunk+0x741b>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x743f>
	jmp    <read_core_chunk+0x7479>
	movzbl -0x960(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xf0(%rbp)
	addl   $0x1,-0x834(%rbp)
	jmp    <read_core_chunk+0x74a3>
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xf0(%rbp)
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x74a3>
	movzbl -0x960(%rbp),%edx
	mov    0x41e3b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3131c(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x75a5>
	addl   $0x1,-0x834(%rbp)
	jmp    <read_core_chunk+0x75a5>
	movzbl -0x960(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x7512>
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x95f(%rbp)
	cmpb   $0x0,-0x95f(%rbp)
	jne    <read_core_chunk+0x74fb>
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x7534>
	cmpb   $0x8,-0x95f(%rbp)
	jne    <read_core_chunk+0x750d>
	addl   $0x3,-0x834(%rbp)
	jmp    <read_core_chunk+0x7534>
	call   <abort@plt>
	movzbl -0x960(%rbp),%eax
	mov    %eax,%esi
	lea    0x312ba(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x75a5>
	movzbl -0x960(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x754c>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x7555>
	jmp    <read_core_chunk+0x756b>
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x756b>
	movzbl -0x960(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x834(%rbp)
	jmp    <read_core_chunk+0x75a5>
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x75a5>
	movzbl -0x960(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x41d39(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31262(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x95e(%rbp)
	movzbl -0x95e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x75ed>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x764e>
	test   %eax,%eax
	je     <read_core_chunk+0x75ed>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7609>
	jmp    <read_core_chunk+0x764e>
	movzbl -0x95e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x53c(%rbp)
	addl   $0x1,-0x834(%rbp)
	jmp    <read_core_chunk+0x7678>
	movzbl -0x95e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x53c(%rbp)
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x7678>
	movzbl -0x95e(%rbp),%edx
	mov    0x41c66(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x310d7(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x834(%rbp)
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x95d(%rbp)
	movzbl -0x95d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x76c7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7728>
	test   %eax,%eax
	je     <read_core_chunk+0x76c7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x76e3>
	jmp    <read_core_chunk+0x7728>
	movzbl -0x95d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x830(%rbp)
	addl   $0x1,-0x834(%rbp)
	jmp    <read_core_chunk+0x7752>
	movzbl -0x95d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x830(%rbp)
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x7752>
	movzbl -0x95d(%rbp),%edx
	mov    0x41b8c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x31035(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movl   $0x0,-0x82c(%rbp)
	jmp    <read_core_chunk+0x7a43>
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x95c(%rbp)
	movzbl -0x95c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x793a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x31962(%rip),%rax        # <_IO_stdin_used+0x2ec8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x31956(%rip),%rdx        # <_IO_stdin_used+0x2ec8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x95c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x77df>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x783d>
	test   %eax,%eax
	je     <read_core_chunk+0x77df>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7803>
	jmp    <read_core_chunk+0x783d>
	movzbl -0x95c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xe8(%rbp)
	addl   $0x1,-0x834(%rbp)
	jmp    <read_core_chunk+0x7867>
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xe8(%rbp)
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x7867>
	movzbl -0x95c(%rbp),%edx
	mov    0x41a77(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x30f58(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x7969>
	addl   $0x1,-0x834(%rbp)
	jmp    <read_core_chunk+0x7969>
	movzbl -0x95c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x78d6>
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x95b(%rbp)
	cmpb   $0x0,-0x95b(%rbp)
	jne    <read_core_chunk+0x78bf>
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x78f8>
	cmpb   $0x8,-0x95b(%rbp)
	jne    <read_core_chunk+0x78d1>
	addl   $0x3,-0x834(%rbp)
	jmp    <read_core_chunk+0x78f8>
	call   <abort@plt>
	movzbl -0x95c(%rbp),%eax
	mov    %eax,%esi
	lea    0x30ef6(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x7969>
	movzbl -0x95c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x7910>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x7919>
	jmp    <read_core_chunk+0x792f>
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x792f>
	movzbl -0x95c(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x834(%rbp)
	jmp    <read_core_chunk+0x7969>
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x7969>
	movzbl -0x95c(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x41975(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x30e9e(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x95a(%rbp)
	movzbl -0x95a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x79b1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7a12>
	test   %eax,%eax
	je     <read_core_chunk+0x79b1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x79cd>
	jmp    <read_core_chunk+0x7a12>
	movzbl -0x95a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x538(%rbp)
	addl   $0x1,-0x834(%rbp)
	jmp    <read_core_chunk+0x7a3c>
	movzbl -0x95a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x834(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x538(%rbp)
	addl   $0x2,-0x834(%rbp)
	jmp    <read_core_chunk+0x7a3c>
	movzbl -0x95a(%rbp),%edx
	mov    0x418a2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x30d13(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x82c(%rbp)
	mov    -0x830(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	cmp    %eax,-0x82c(%rbp)
	jl     <read_core_chunk+0x7761>
	mov    -0x834(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x828(%rbp)
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x966(%rbp)
	movzbl -0x966(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x7c52>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3167e(%rip),%rax        # <_IO_stdin_used+0x2efc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x31672(%rip),%rdx        # <_IO_stdin_used+0x2efc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x966(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x7af7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7b55>
	test   %eax,%eax
	je     <read_core_chunk+0x7af7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7b1b>
	jmp    <read_core_chunk+0x7b55>
	movzbl -0x966(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xf8(%rbp)
	addl   $0x1,-0x828(%rbp)
	jmp    <read_core_chunk+0x7b7f>
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0xf8(%rbp)
	addl   $0x2,-0x828(%rbp)
	jmp    <read_core_chunk+0x7b7f>
	movzbl -0x966(%rbp),%edx
	mov    0x4175f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x30c40(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x7c81>
	addl   $0x1,-0x828(%rbp)
	jmp    <read_core_chunk+0x7c81>
	movzbl -0x966(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x7bee>
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x965(%rbp)
	cmpb   $0x0,-0x965(%rbp)
	jne    <read_core_chunk+0x7bd7>
	addl   $0x2,-0x828(%rbp)
	jmp    <read_core_chunk+0x7c10>
	cmpb   $0x8,-0x965(%rbp)
	jne    <read_core_chunk+0x7be9>
	addl   $0x3,-0x828(%rbp)
	jmp    <read_core_chunk+0x7c10>
	call   <abort@plt>
	movzbl -0x966(%rbp),%eax
	mov    %eax,%esi
	lea    0x30bde(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x7c81>
	movzbl -0x966(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x7c28>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x7c31>
	jmp    <read_core_chunk+0x7c47>
	addl   $0x2,-0x828(%rbp)
	jmp    <read_core_chunk+0x7c47>
	movzbl -0x966(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x828(%rbp)
	jmp    <read_core_chunk+0x7c81>
	addl   $0x2,-0x828(%rbp)
	jmp    <read_core_chunk+0x7c81>
	movzbl -0x966(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x4165d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x30b86(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x964(%rbp)
	movzbl -0x964(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x7cc9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7d2a>
	test   %eax,%eax
	je     <read_core_chunk+0x7cc9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7ce5>
	jmp    <read_core_chunk+0x7d2a>
	movzbl -0x964(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x548(%rbp)
	addl   $0x1,-0x828(%rbp)
	jmp    <read_core_chunk+0x7d54>
	movzbl -0x964(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x548(%rbp)
	addl   $0x2,-0x828(%rbp)
	jmp    <read_core_chunk+0x7d54>
	movzbl -0x964(%rbp),%edx
	mov    0x4158a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x309fb(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x828(%rbp)
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x963(%rbp)
	movzbl -0x963(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x7da3>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7e04>
	test   %eax,%eax
	je     <read_core_chunk+0x7da3>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7dbf>
	jmp    <read_core_chunk+0x7e04>
	movzbl -0x963(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x824(%rbp)
	addl   $0x1,-0x828(%rbp)
	jmp    <read_core_chunk+0x7e2e>
	movzbl -0x963(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x824(%rbp)
	addl   $0x2,-0x828(%rbp)
	jmp    <read_core_chunk+0x7e2e>
	movzbl -0x963(%rbp),%edx
	mov    0x414b0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x30959(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movl   $0x0,-0x820(%rbp)
	jmp    <read_core_chunk+0x7fea>
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x962(%rbp)
	movzbl -0x962(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x7e85>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7ee6>
	test   %eax,%eax
	je     <read_core_chunk+0x7e85>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7ea1>
	jmp    <read_core_chunk+0x7ee6>
	movzbl -0x962(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x544(%rbp)
	addl   $0x1,-0x828(%rbp)
	jmp    <read_core_chunk+0x7f10>
	movzbl -0x962(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x544(%rbp)
	addl   $0x2,-0x828(%rbp)
	jmp    <read_core_chunk+0x7f10>
	movzbl -0x962(%rbp),%edx
	mov    0x413ce(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x30877(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x961(%rbp)
	movzbl -0x961(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x7f58>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x7fb9>
	test   %eax,%eax
	je     <read_core_chunk+0x7f58>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x7f74>
	jmp    <read_core_chunk+0x7fb9>
	movzbl -0x961(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x540(%rbp)
	addl   $0x1,-0x828(%rbp)
	jmp    <read_core_chunk+0x7fe3>
	movzbl -0x961(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x828(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x540(%rbp)
	addl   $0x2,-0x828(%rbp)
	jmp    <read_core_chunk+0x7fe3>
	movzbl -0x961(%rbp),%edx
	mov    0x412fb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3076c(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x820(%rbp)
	mov    -0x824(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	cmp    %eax,-0x820(%rbp)
	jl     <read_core_chunk+0x7e3d>
	mov    -0x828(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x81c(%rbp)
	mov    -0x81c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x967(%rbp)
	movzbl -0x967(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x8068>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x80c9>
	test   %eax,%eax
	je     <read_core_chunk+0x8068>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x8084>
	jmp    <read_core_chunk+0x80c9>
	movzbl -0x967(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x54c(%rbp)
	addl   $0x1,-0x81c(%rbp)
	jmp    <read_core_chunk+0x80f3>
	movzbl -0x967(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x81c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x54c(%rbp)
	addl   $0x2,-0x81c(%rbp)
	jmp    <read_core_chunk+0x80f3>
	movzbl -0x967(%rbp),%edx
	mov    0x411eb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x3065c(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x81c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x818(%rbp)
	mov    -0x818(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x970(%rbp)
	movzbl -0x970(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x82e7>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3101d(%rip),%rax        # <_IO_stdin_used+0x2f30>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x31011(%rip),%rdx        # <_IO_stdin_used+0x2f30>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x970(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x818c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x81ea>
	test   %eax,%eax
	je     <read_core_chunk+0x818c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x81b0>
	jmp    <read_core_chunk+0x81ea>
	movzbl -0x970(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x100(%rbp)
	addl   $0x1,-0x818(%rbp)
	jmp    <read_core_chunk+0x8214>
	mov    -0x818(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x100(%rbp)
	addl   $0x2,-0x818(%rbp)
	jmp    <read_core_chunk+0x8214>
	movzbl -0x970(%rbp),%edx
	mov    0x410ca(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x305ab(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x8316>
	addl   $0x1,-0x818(%rbp)
	jmp    <read_core_chunk+0x8316>
	movzbl -0x970(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x8283>
	mov    -0x818(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x96f(%rbp)
	cmpb   $0x0,-0x96f(%rbp)
	jne    <read_core_chunk+0x826c>
	addl   $0x2,-0x818(%rbp)
	jmp    <read_core_chunk+0x82a5>
	cmpb   $0x8,-0x96f(%rbp)
	jne    <read_core_chunk+0x827e>
	addl   $0x3,-0x818(%rbp)
	jmp    <read_core_chunk+0x82a5>
	call   <abort@plt>
	movzbl -0x970(%rbp),%eax
	mov    %eax,%esi
	lea    0x30549(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x8316>
	movzbl -0x970(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x82bd>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x82c6>
	jmp    <read_core_chunk+0x82dc>
	addl   $0x2,-0x818(%rbp)
	jmp    <read_core_chunk+0x82dc>
	movzbl -0x970(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x818(%rbp)
	jmp    <read_core_chunk+0x8316>
	addl   $0x2,-0x818(%rbp)
	jmp    <read_core_chunk+0x8316>
	movzbl -0x970(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x40fc8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x304f1(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x818(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x96e(%rbp)
	movzbl -0x96e(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x96d(%rbp)
	movzbl -0x96d(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x96d(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x8369>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x8370>
	jmp    <read_core_chunk+0x83e7>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x83a2>
	jmp    <read_core_chunk+0x83e7>
	mov    -0x818(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x55c(%rbp)
	addl   $0x1,-0x818(%rbp)
	jmp    <read_core_chunk+0x83ec>
	movzbl -0x96e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x818(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x55c(%rbp)
	addl   $0x2,-0x818(%rbp)
	jmp    <read_core_chunk+0x83ec>
	call   <abort@plt>
	mov    -0x818(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x814(%rbp)
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x976(%rbp)
	movzbl -0x976(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x85e0>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x30d58(%rip),%rax        # <_IO_stdin_used+0x2f64>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x30d4c(%rip),%rdx        # <_IO_stdin_used+0x2f64>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x976(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x8485>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x84e3>
	test   %eax,%eax
	je     <read_core_chunk+0x8485>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x84a9>
	jmp    <read_core_chunk+0x84e3>
	movzbl -0x976(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x108(%rbp)
	addl   $0x1,-0x814(%rbp)
	jmp    <read_core_chunk+0x850d>
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x108(%rbp)
	addl   $0x2,-0x814(%rbp)
	jmp    <read_core_chunk+0x850d>
	movzbl -0x976(%rbp),%edx
	mov    0x40dd1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x302b2(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x860f>
	addl   $0x1,-0x814(%rbp)
	jmp    <read_core_chunk+0x860f>
	movzbl -0x976(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x857c>
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x975(%rbp)
	cmpb   $0x0,-0x975(%rbp)
	jne    <read_core_chunk+0x8565>
	addl   $0x2,-0x814(%rbp)
	jmp    <read_core_chunk+0x859e>
	cmpb   $0x8,-0x975(%rbp)
	jne    <read_core_chunk+0x8577>
	addl   $0x3,-0x814(%rbp)
	jmp    <read_core_chunk+0x859e>
	call   <abort@plt>
	movzbl -0x976(%rbp),%eax
	mov    %eax,%esi
	lea    0x30250(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x860f>
	movzbl -0x976(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x85b6>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x85bf>
	jmp    <read_core_chunk+0x85d5>
	addl   $0x2,-0x814(%rbp)
	jmp    <read_core_chunk+0x85d5>
	movzbl -0x976(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x814(%rbp)
	jmp    <read_core_chunk+0x860f>
	addl   $0x2,-0x814(%rbp)
	jmp    <read_core_chunk+0x860f>
	movzbl -0x976(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x40ccf(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x301f8(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x974(%rbp)
	movzbl -0x974(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x973(%rbp)
	movzbl -0x973(%rbp),%eax
	mov    %eax,-0x438(%rbp)
	movzbl -0x973(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x8662>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x8669>
	jmp    <read_core_chunk+0x86e0>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x869b>
	jmp    <read_core_chunk+0x86e0>
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x564(%rbp)
	addl   $0x1,-0x814(%rbp)
	jmp    <read_core_chunk+0x86e5>
	movzbl -0x974(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x564(%rbp)
	addl   $0x2,-0x814(%rbp)
	jmp    <read_core_chunk+0x86e5>
	call   <abort@plt>
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x972(%rbp)
	movzbl -0x972(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x971(%rbp)
	movzbl -0x971(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x971(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x8738>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x873f>
	jmp    <read_core_chunk+0x87b6>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x8771>
	jmp    <read_core_chunk+0x87b6>
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x560(%rbp)
	addl   $0x1,-0x814(%rbp)
	jmp    <read_core_chunk+0x87bb>
	movzbl -0x972(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x814(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x560(%rbp)
	addl   $0x2,-0x814(%rbp)
	jmp    <read_core_chunk+0x87bb>
	call   <abort@plt>
	mov    -0x814(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x810(%rbp)
	mov    -0x810(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x97b(%rbp)
	movzbl -0x97b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x89af>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x309bd(%rip),%rax        # <_IO_stdin_used+0x2f98>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x309b1(%rip),%rdx        # <_IO_stdin_used+0x2f98>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x97b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x8854>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x88b2>
	test   %eax,%eax
	je     <read_core_chunk+0x8854>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x8878>
	jmp    <read_core_chunk+0x88b2>
	movzbl -0x97b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x110(%rbp)
	addl   $0x1,-0x810(%rbp)
	jmp    <read_core_chunk+0x88dc>
	mov    -0x810(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x110(%rbp)
	addl   $0x2,-0x810(%rbp)
	jmp    <read_core_chunk+0x88dc>
	movzbl -0x97b(%rbp),%edx
	mov    0x40a02(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2fee3(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x89de>
	addl   $0x1,-0x810(%rbp)
	jmp    <read_core_chunk+0x89de>
	movzbl -0x97b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x894b>
	mov    -0x810(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x97a(%rbp)
	cmpb   $0x0,-0x97a(%rbp)
	jne    <read_core_chunk+0x8934>
	addl   $0x2,-0x810(%rbp)
	jmp    <read_core_chunk+0x896d>
	cmpb   $0x8,-0x97a(%rbp)
	jne    <read_core_chunk+0x8946>
	addl   $0x3,-0x810(%rbp)
	jmp    <read_core_chunk+0x896d>
	call   <abort@plt>
	movzbl -0x97b(%rbp),%eax
	mov    %eax,%esi
	lea    0x2fe81(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x89de>
	movzbl -0x97b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x8985>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x898e>
	jmp    <read_core_chunk+0x89a4>
	addl   $0x2,-0x810(%rbp)
	jmp    <read_core_chunk+0x89a4>
	movzbl -0x97b(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x810(%rbp)
	jmp    <read_core_chunk+0x89de>
	addl   $0x2,-0x810(%rbp)
	jmp    <read_core_chunk+0x89de>
	movzbl -0x97b(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x40900(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2fe29(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x810(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x979(%rbp)
	movzbl -0x979(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x8a26>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x8a87>
	test   %eax,%eax
	je     <read_core_chunk+0x8a26>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x8a42>
	jmp    <read_core_chunk+0x8a87>
	movzbl -0x979(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x56c(%rbp)
	addl   $0x1,-0x810(%rbp)
	jmp    <read_core_chunk+0x8ab1>
	movzbl -0x979(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x810(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x56c(%rbp)
	addl   $0x2,-0x810(%rbp)
	jmp    <read_core_chunk+0x8ab1>
	movzbl -0x979(%rbp),%edx
	mov    0x4082d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2fcd6(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x810(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x978(%rbp)
	movzbl -0x978(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x977(%rbp)
	movzbl -0x977(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x977(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x8b04>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x8b0b>
	jmp    <read_core_chunk+0x8b82>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x8b3d>
	jmp    <read_core_chunk+0x8b82>
	mov    -0x810(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x568(%rbp)
	addl   $0x1,-0x810(%rbp)
	jmp    <read_core_chunk+0x8b87>
	movzbl -0x978(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x810(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x568(%rbp)
	addl   $0x2,-0x810(%rbp)
	jmp    <read_core_chunk+0x8b87>
	call   <abort@plt>
	mov    -0x810(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x80c(%rbp)
	mov    -0x80c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x980(%rbp)
	movzbl -0x980(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x8d7b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x30625(%rip),%rax        # <_IO_stdin_used+0x2fcc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x30619(%rip),%rdx        # <_IO_stdin_used+0x2fcc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x980(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x8c20>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x8c7e>
	test   %eax,%eax
	je     <read_core_chunk+0x8c20>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x8c44>
	jmp    <read_core_chunk+0x8c7e>
	movzbl -0x980(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x120(%rbp)
	addl   $0x1,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8ca8>
	mov    -0x80c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x120(%rbp)
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8ca8>
	movzbl -0x980(%rbp),%edx
	mov    0x40636(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2fb17(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x8daa>
	addl   $0x1,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8daa>
	movzbl -0x980(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x8d17>
	mov    -0x80c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x97f(%rbp)
	cmpb   $0x0,-0x97f(%rbp)
	jne    <read_core_chunk+0x8d00>
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8d39>
	cmpb   $0x8,-0x97f(%rbp)
	jne    <read_core_chunk+0x8d12>
	addl   $0x3,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8d39>
	call   <abort@plt>
	movzbl -0x980(%rbp),%eax
	mov    %eax,%esi
	lea    0x2fab5(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x8daa>
	movzbl -0x980(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x8d51>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x8d5a>
	jmp    <read_core_chunk+0x8d70>
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8d70>
	movzbl -0x980(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8daa>
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8daa>
	movzbl -0x980(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x40534(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2fa5d(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x80c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x97e(%rbp)
	movzbl -0x97e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x8f83>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x30451(%rip),%rax        # <_IO_stdin_used+0x3000>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x30445(%rip),%rdx        # <_IO_stdin_used+0x3000>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x97e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x8e28>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x8e86>
	test   %eax,%eax
	je     <read_core_chunk+0x8e28>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x8e4c>
	jmp    <read_core_chunk+0x8e86>
	movzbl -0x97e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x118(%rbp)
	addl   $0x1,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8eb0>
	mov    -0x80c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x118(%rbp)
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8eb0>
	movzbl -0x97e(%rbp),%edx
	mov    0x4042e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f90f(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x8fb2>
	addl   $0x1,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8fb2>
	movzbl -0x97e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x8f1f>
	mov    -0x80c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x97d(%rbp)
	cmpb   $0x0,-0x97d(%rbp)
	jne    <read_core_chunk+0x8f08>
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8f41>
	cmpb   $0x8,-0x97d(%rbp)
	jne    <read_core_chunk+0x8f1a>
	addl   $0x3,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8f41>
	call   <abort@plt>
	movzbl -0x97e(%rbp),%eax
	mov    %eax,%esi
	lea    0x2f8ad(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x8fb2>
	movzbl -0x97e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x8f59>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x8f62>
	jmp    <read_core_chunk+0x8f78>
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8f78>
	movzbl -0x97e(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8fb2>
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x8fb2>
	movzbl -0x97e(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x4032c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f855(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x80c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x97c(%rbp)
	movzbl -0x97c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x8ffa>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x905b>
	test   %eax,%eax
	je     <read_core_chunk+0x8ffa>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9016>
	jmp    <read_core_chunk+0x905b>
	movzbl -0x97c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x570(%rbp)
	addl   $0x1,-0x80c(%rbp)
	jmp    <read_core_chunk+0x9085>
	movzbl -0x97c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x80c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x570(%rbp)
	addl   $0x2,-0x80c(%rbp)
	jmp    <read_core_chunk+0x9085>
	movzbl -0x97c(%rbp),%edx
	mov    0x40259(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f702(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x80c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x808(%rbp)
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x986(%rbp)
	movzbl -0x986(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x9279>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x3018f(%rip),%rax        # <_IO_stdin_used+0x3034>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x30183(%rip),%rdx        # <_IO_stdin_used+0x3034>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x986(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x911e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x917c>
	test   %eax,%eax
	je     <read_core_chunk+0x911e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9142>
	jmp    <read_core_chunk+0x917c>
	movzbl -0x986(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x130(%rbp)
	addl   $0x1,-0x808(%rbp)
	jmp    <read_core_chunk+0x91a6>
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x130(%rbp)
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x91a6>
	movzbl -0x986(%rbp),%edx
	mov    0x40138(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f619(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x92a8>
	addl   $0x1,-0x808(%rbp)
	jmp    <read_core_chunk+0x92a8>
	movzbl -0x986(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x9215>
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x985(%rbp)
	cmpb   $0x0,-0x985(%rbp)
	jne    <read_core_chunk+0x91fe>
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x9237>
	cmpb   $0x8,-0x985(%rbp)
	jne    <read_core_chunk+0x9210>
	addl   $0x3,-0x808(%rbp)
	jmp    <read_core_chunk+0x9237>
	call   <abort@plt>
	movzbl -0x986(%rbp),%eax
	mov    %eax,%esi
	lea    0x2f5b7(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x92a8>
	movzbl -0x986(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x924f>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x9258>
	jmp    <read_core_chunk+0x926e>
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x926e>
	movzbl -0x986(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x808(%rbp)
	jmp    <read_core_chunk+0x92a8>
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x92a8>
	movzbl -0x986(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x40036(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f55f(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x984(%rbp)
	movzbl -0x984(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x9481>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2ffbb(%rip),%rax        # <_IO_stdin_used+0x3068>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2ffaf(%rip),%rdx        # <_IO_stdin_used+0x3068>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x984(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x9326>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x9384>
	test   %eax,%eax
	je     <read_core_chunk+0x9326>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x934a>
	jmp    <read_core_chunk+0x9384>
	movzbl -0x984(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x128(%rbp)
	addl   $0x1,-0x808(%rbp)
	jmp    <read_core_chunk+0x93ae>
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x128(%rbp)
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x93ae>
	movzbl -0x984(%rbp),%edx
	mov    0x3ff30(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f411(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x94b0>
	addl   $0x1,-0x808(%rbp)
	jmp    <read_core_chunk+0x94b0>
	movzbl -0x984(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x941d>
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x983(%rbp)
	cmpb   $0x0,-0x983(%rbp)
	jne    <read_core_chunk+0x9406>
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x943f>
	cmpb   $0x8,-0x983(%rbp)
	jne    <read_core_chunk+0x9418>
	addl   $0x3,-0x808(%rbp)
	jmp    <read_core_chunk+0x943f>
	call   <abort@plt>
	movzbl -0x984(%rbp),%eax
	mov    %eax,%esi
	lea    0x2f3af(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x94b0>
	movzbl -0x984(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x9457>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x9460>
	jmp    <read_core_chunk+0x9476>
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x9476>
	movzbl -0x984(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x808(%rbp)
	jmp    <read_core_chunk+0x94b0>
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x94b0>
	movzbl -0x984(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3fe2e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f357(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x982(%rbp)
	movzbl -0x982(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x981(%rbp)
	movzbl -0x981(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x981(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x9503>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x950a>
	jmp    <read_core_chunk+0x9581>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x953c>
	jmp    <read_core_chunk+0x9581>
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x574(%rbp)
	addl   $0x1,-0x808(%rbp)
	jmp    <read_core_chunk+0x9586>
	movzbl -0x982(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x808(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x574(%rbp)
	addl   $0x2,-0x808(%rbp)
	jmp    <read_core_chunk+0x9586>
	call   <abort@plt>
	mov    -0x808(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x804(%rbp)
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x98b(%rbp)
	movzbl -0x98b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x95e9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x964a>
	test   %eax,%eax
	je     <read_core_chunk+0x95e9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9605>
	jmp    <read_core_chunk+0x964a>
	movzbl -0x98b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x800(%rbp)
	addl   $0x1,-0x804(%rbp)
	jmp    <read_core_chunk+0x9674>
	movzbl -0x98b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x800(%rbp)
	addl   $0x2,-0x804(%rbp)
	jmp    <read_core_chunk+0x9674>
	movzbl -0x98b(%rbp),%edx
	mov    0x3fc6a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f113(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x98a(%rbp)
	movzbl -0x98a(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x989(%rbp)
	movzbl -0x989(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x989(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x96c7>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x96ce>
	jmp    <read_core_chunk+0x9745>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x9700>
	jmp    <read_core_chunk+0x9745>
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x578(%rbp)
	addl   $0x1,-0x804(%rbp)
	jmp    <read_core_chunk+0x974a>
	movzbl -0x98a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x578(%rbp)
	addl   $0x2,-0x804(%rbp)
	jmp    <read_core_chunk+0x974a>
	call   <abort@plt>
	movl   $0x0,-0x7fc(%rbp)
	jmp    <read_core_chunk+0x99d3>
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	cmp    $0x47,%al
	je     <read_core_chunk+0x97bd>
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%edx
	mov    0x3fb21(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2f069(%rip),%rcx        # <_IO_stdin_used+0x25cf>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x804(%rbp)
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x988(%rbp)
	movzbl -0x988(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x999d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2fad3(%rip),%rax        # <_IO_stdin_used+0x309c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2fac7(%rip),%rdx        # <_IO_stdin_used+0x309c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x988(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x9842>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x98a0>
	test   %eax,%eax
	je     <read_core_chunk+0x9842>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9866>
	jmp    <read_core_chunk+0x98a0>
	movzbl -0x988(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x138(%rbp)
	addl   $0x1,-0x804(%rbp)
	jmp    <read_core_chunk+0x98ca>
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x138(%rbp)
	addl   $0x2,-0x804(%rbp)
	jmp    <read_core_chunk+0x98ca>
	movzbl -0x988(%rbp),%edx
	mov    0x3fa14(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2eef5(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x99cc>
	addl   $0x1,-0x804(%rbp)
	jmp    <read_core_chunk+0x99cc>
	movzbl -0x988(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x9939>
	mov    -0x804(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x987(%rbp)
	cmpb   $0x0,-0x987(%rbp)
	jne    <read_core_chunk+0x9922>
	addl   $0x2,-0x804(%rbp)
	jmp    <read_core_chunk+0x995b>
	cmpb   $0x8,-0x987(%rbp)
	jne    <read_core_chunk+0x9934>
	addl   $0x3,-0x804(%rbp)
	jmp    <read_core_chunk+0x995b>
	call   <abort@plt>
	movzbl -0x988(%rbp),%eax
	mov    %eax,%esi
	lea    0x2ee93(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x99cc>
	movzbl -0x988(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x9973>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x997c>
	jmp    <read_core_chunk+0x9992>
	addl   $0x2,-0x804(%rbp)
	jmp    <read_core_chunk+0x9992>
	movzbl -0x988(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x804(%rbp)
	jmp    <read_core_chunk+0x99cc>
	addl   $0x2,-0x804(%rbp)
	jmp    <read_core_chunk+0x99cc>
	movzbl -0x988(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3f912(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2ee3b(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x7fc(%rbp)
	mov    -0x7fc(%rbp),%eax
	cmp    -0x800(%rbp),%eax
	jl     <read_core_chunk+0x9759>
	mov    -0x804(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7f8(%rbp)
	mov    -0x7f8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x98d(%rbp)
	movzbl -0x98d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x9bd9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2f8cb(%rip),%rax        # <_IO_stdin_used+0x30d0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2f8bf(%rip),%rdx        # <_IO_stdin_used+0x30d0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x98d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x9a7e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x9adc>
	test   %eax,%eax
	je     <read_core_chunk+0x9a7e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9aa2>
	jmp    <read_core_chunk+0x9adc>
	movzbl -0x98d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x140(%rbp)
	addl   $0x1,-0x7f8(%rbp)
	jmp    <read_core_chunk+0x9b06>
	mov    -0x7f8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x140(%rbp)
	addl   $0x2,-0x7f8(%rbp)
	jmp    <read_core_chunk+0x9b06>
	movzbl -0x98d(%rbp),%edx
	mov    0x3f7d8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2ecb9(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x9c08>
	addl   $0x1,-0x7f8(%rbp)
	jmp    <read_core_chunk+0x9c08>
	movzbl -0x98d(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x9b75>
	mov    -0x7f8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x98c(%rbp)
	cmpb   $0x0,-0x98c(%rbp)
	jne    <read_core_chunk+0x9b5e>
	addl   $0x2,-0x7f8(%rbp)
	jmp    <read_core_chunk+0x9b97>
	cmpb   $0x8,-0x98c(%rbp)
	jne    <read_core_chunk+0x9b70>
	addl   $0x3,-0x7f8(%rbp)
	jmp    <read_core_chunk+0x9b97>
	call   <abort@plt>
	movzbl -0x98d(%rbp),%eax
	mov    %eax,%esi
	lea    0x2ec57(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x9c08>
	movzbl -0x98d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x9baf>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x9bb8>
	jmp    <read_core_chunk+0x9bce>
	addl   $0x2,-0x7f8(%rbp)
	jmp    <read_core_chunk+0x9bce>
	movzbl -0x98d(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7f8(%rbp)
	jmp    <read_core_chunk+0x9c08>
	addl   $0x2,-0x7f8(%rbp)
	jmp    <read_core_chunk+0x9c08>
	movzbl -0x98d(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3f6d6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2ebff(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7f8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	addl   $0x1,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7f4(%rbp)
	mov    -0x7f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x98f(%rbp)
	movzbl -0x98f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x9e08>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2f6d0(%rip),%rax        # <_IO_stdin_used+0x3104>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2f6c4(%rip),%rdx        # <_IO_stdin_used+0x3104>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x98f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x9cad>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x9d0b>
	test   %eax,%eax
	je     <read_core_chunk+0x9cad>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9cd1>
	jmp    <read_core_chunk+0x9d0b>
	movzbl -0x98f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x148(%rbp)
	addl   $0x1,-0x7f4(%rbp)
	jmp    <read_core_chunk+0x9d35>
	mov    -0x7f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x148(%rbp)
	addl   $0x2,-0x7f4(%rbp)
	jmp    <read_core_chunk+0x9d35>
	movzbl -0x98f(%rbp),%edx
	mov    0x3f5a9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2ea8a(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x9e37>
	addl   $0x1,-0x7f4(%rbp)
	jmp    <read_core_chunk+0x9e37>
	movzbl -0x98f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x9da4>
	mov    -0x7f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x98e(%rbp)
	cmpb   $0x0,-0x98e(%rbp)
	jne    <read_core_chunk+0x9d8d>
	addl   $0x2,-0x7f4(%rbp)
	jmp    <read_core_chunk+0x9dc6>
	cmpb   $0x8,-0x98e(%rbp)
	jne    <read_core_chunk+0x9d9f>
	addl   $0x3,-0x7f4(%rbp)
	jmp    <read_core_chunk+0x9dc6>
	call   <abort@plt>
	movzbl -0x98f(%rbp),%eax
	mov    %eax,%esi
	lea    0x2ea28(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x9e37>
	movzbl -0x98f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x9dde>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x9de7>
	jmp    <read_core_chunk+0x9dfd>
	addl   $0x2,-0x7f4(%rbp)
	jmp    <read_core_chunk+0x9dfd>
	movzbl -0x98f(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7f4(%rbp)
	jmp    <read_core_chunk+0x9e37>
	addl   $0x2,-0x7f4(%rbp)
	jmp    <read_core_chunk+0x9e37>
	movzbl -0x98f(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3f4a7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e9d0(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7f4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7f0(%rbp)
	mov    -0x7f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x990(%rbp)
	movzbl -0x990(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x9e9a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x9efb>
	test   %eax,%eax
	je     <read_core_chunk+0x9e9a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9eb6>
	jmp    <read_core_chunk+0x9efb>
	movzbl -0x990(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x57c(%rbp)
	addl   $0x1,-0x7f0(%rbp)
	jmp    <read_core_chunk+0x9f25>
	movzbl -0x990(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x57c(%rbp)
	addl   $0x2,-0x7f0(%rbp)
	jmp    <read_core_chunk+0x9f25>
	movzbl -0x990(%rbp),%edx
	mov    0x3f3b9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e862(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7f0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7ec(%rbp)
	mov    -0x7ec(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x993(%rbp)
	movzbl -0x993(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x9f88>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x9fe9>
	test   %eax,%eax
	je     <read_core_chunk+0x9f88>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x9fa4>
	jmp    <read_core_chunk+0x9fe9>
	movzbl -0x993(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x580(%rbp)
	addl   $0x1,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa013>
	movzbl -0x993(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7ec(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x580(%rbp)
	addl   $0x2,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa013>
	movzbl -0x993(%rbp),%edx
	mov    0x3f2cb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e73c(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7ec(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x992(%rbp)
	movzbl -0x992(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xa1ec>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2f320(%rip),%rax        # <_IO_stdin_used+0x3138>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2f314(%rip),%rdx        # <_IO_stdin_used+0x3138>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x992(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xa091>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xa0ef>
	test   %eax,%eax
	je     <read_core_chunk+0xa091>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xa0b5>
	jmp    <read_core_chunk+0xa0ef>
	movzbl -0x992(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x150(%rbp)
	addl   $0x1,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa119>
	mov    -0x7ec(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x150(%rbp)
	addl   $0x2,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa119>
	movzbl -0x992(%rbp),%edx
	mov    0x3f1c5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e6a6(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xa21b>
	addl   $0x1,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa21b>
	movzbl -0x992(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xa188>
	mov    -0x7ec(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x991(%rbp)
	cmpb   $0x0,-0x991(%rbp)
	jne    <read_core_chunk+0xa171>
	addl   $0x2,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa1aa>
	cmpb   $0x8,-0x991(%rbp)
	jne    <read_core_chunk+0xa183>
	addl   $0x3,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa1aa>
	call   <abort@plt>
	movzbl -0x992(%rbp),%eax
	mov    %eax,%esi
	lea    0x2e644(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xa21b>
	movzbl -0x992(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xa1c2>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xa1cb>
	jmp    <read_core_chunk+0xa1e1>
	addl   $0x2,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa1e1>
	movzbl -0x992(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa21b>
	addl   $0x2,-0x7ec(%rbp)
	jmp    <read_core_chunk+0xa21b>
	movzbl -0x992(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3f0c3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e5ec(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7ec(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7e8(%rbp)
	mov    -0x7e8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x995(%rbp)
	movzbl -0x995(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xa27e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xa2df>
	test   %eax,%eax
	je     <read_core_chunk+0xa27e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xa29a>
	jmp    <read_core_chunk+0xa2df>
	movzbl -0x995(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x588(%rbp)
	addl   $0x1,-0x7e8(%rbp)
	jmp    <read_core_chunk+0xa309>
	movzbl -0x995(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7e8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x588(%rbp)
	addl   $0x2,-0x7e8(%rbp)
	jmp    <read_core_chunk+0xa309>
	movzbl -0x995(%rbp),%edx
	mov    0x3efd5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e47e(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7e8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x994(%rbp)
	movzbl -0x994(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xa351>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xa3b2>
	test   %eax,%eax
	je     <read_core_chunk+0xa351>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xa36d>
	jmp    <read_core_chunk+0xa3b2>
	movzbl -0x994(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x584(%rbp)
	addl   $0x1,-0x7e8(%rbp)
	jmp    <read_core_chunk+0xa3dc>
	movzbl -0x994(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7e8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x584(%rbp)
	addl   $0x2,-0x7e8(%rbp)
	jmp    <read_core_chunk+0xa3dc>
	movzbl -0x994(%rbp),%edx
	mov    0x3ef02(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e3ab(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7e8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7e4(%rbp)
	mov    -0x7e4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9a8(%rbp)
	movzbl -0x9a8(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xa43f>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xa4a0>
	test   %eax,%eax
	je     <read_core_chunk+0xa43f>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xa45b>
	jmp    <read_core_chunk+0xa4a0>
	movzbl -0x9a8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x598(%rbp)
	addl   $0x1,-0x7e4(%rbp)
	jmp    <read_core_chunk+0xa4ca>
	movzbl -0x9a8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7e4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x598(%rbp)
	addl   $0x2,-0x7e4(%rbp)
	jmp    <read_core_chunk+0xa4ca>
	movzbl -0x9a8(%rbp),%edx
	mov    0x3ee14(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e285(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7e4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7e0(%rbp)
	mov    -0x7e0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9ab(%rbp)
	movzbl -0x9ab(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x9aa(%rbp)
	movzbl -0x9aa(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x9aa(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xa538>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xa53f>
	jmp    <read_core_chunk+0xa5b6>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xa571>
	jmp    <read_core_chunk+0xa5b6>
	mov    -0x7e0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5a0(%rbp)
	addl   $0x1,-0x7e0(%rbp)
	jmp    <read_core_chunk+0xa5bb>
	movzbl -0x9ab(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7e0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5a0(%rbp)
	addl   $0x2,-0x7e0(%rbp)
	jmp    <read_core_chunk+0xa5bb>
	call   <abort@plt>
	mov    -0x7e0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9a9(%rbp)
	movzbl -0x9a9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xa603>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xa664>
	test   %eax,%eax
	je     <read_core_chunk+0xa603>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xa61f>
	jmp    <read_core_chunk+0xa664>
	movzbl -0x9a9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x59c(%rbp)
	addl   $0x1,-0x7e0(%rbp)
	jmp    <read_core_chunk+0xa68e>
	movzbl -0x9a9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7e0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x59c(%rbp)
	addl   $0x2,-0x7e0(%rbp)
	jmp    <read_core_chunk+0xa68e>
	movzbl -0x9a9(%rbp),%edx
	mov    0x3ec50(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2e0c1(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7e0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7dc(%rbp)
	mov    -0x7dc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9ad(%rbp)
	movzbl -0x9ad(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x9ac(%rbp)
	movzbl -0x9ac(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x9ac(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xa6fc>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xa703>
	jmp    <read_core_chunk+0xa77a>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xa735>
	jmp    <read_core_chunk+0xa77a>
	mov    -0x7dc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5a4(%rbp)
	addl   $0x1,-0x7dc(%rbp)
	jmp    <read_core_chunk+0xa77f>
	movzbl -0x9ad(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7dc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5a4(%rbp)
	addl   $0x2,-0x7dc(%rbp)
	jmp    <read_core_chunk+0xa77f>
	call   <abort@plt>
	mov    -0x7dc(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7d8(%rbp)
	mov    -0x7d8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9af(%rbp)
	movzbl -0x9af(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x9ae(%rbp)
	movzbl -0x9ae(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x9ae(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xa7ed>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xa7f4>
	jmp    <read_core_chunk+0xa86b>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xa826>
	jmp    <read_core_chunk+0xa86b>
	mov    -0x7d8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5a8(%rbp)
	addl   $0x1,-0x7d8(%rbp)
	jmp    <read_core_chunk+0xa870>
	movzbl -0x9af(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7d8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5a8(%rbp)
	addl   $0x2,-0x7d8(%rbp)
	jmp    <read_core_chunk+0xa870>
	call   <abort@plt>
	mov    -0x7d8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7d4(%rbp)
	mov    -0x7d4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9b1(%rbp)
	movzbl -0x9b1(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xaa64>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2eadc(%rip),%rax        # <_IO_stdin_used+0x316c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2ead0(%rip),%rdx        # <_IO_stdin_used+0x316c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9b1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xa909>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xa967>
	test   %eax,%eax
	je     <read_core_chunk+0xa909>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xa92d>
	jmp    <read_core_chunk+0xa967>
	movzbl -0x9b1(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1a0(%rbp)
	addl   $0x1,-0x7d4(%rbp)
	jmp    <read_core_chunk+0xa991>
	mov    -0x7d4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1a0(%rbp)
	addl   $0x2,-0x7d4(%rbp)
	jmp    <read_core_chunk+0xa991>
	movzbl -0x9b1(%rbp),%edx
	mov    0x3e94d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2de2e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xaa93>
	addl   $0x1,-0x7d4(%rbp)
	jmp    <read_core_chunk+0xaa93>
	movzbl -0x9b1(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xaa00>
	mov    -0x7d4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9b0(%rbp)
	cmpb   $0x0,-0x9b0(%rbp)
	jne    <read_core_chunk+0xa9e9>
	addl   $0x2,-0x7d4(%rbp)
	jmp    <read_core_chunk+0xaa22>
	cmpb   $0x8,-0x9b0(%rbp)
	jne    <read_core_chunk+0xa9fb>
	addl   $0x3,-0x7d4(%rbp)
	jmp    <read_core_chunk+0xaa22>
	call   <abort@plt>
	movzbl -0x9b1(%rbp),%eax
	mov    %eax,%esi
	lea    0x2ddcc(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xaa93>
	movzbl -0x9b1(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xaa3a>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xaa43>
	jmp    <read_core_chunk+0xaa59>
	addl   $0x2,-0x7d4(%rbp)
	jmp    <read_core_chunk+0xaa59>
	movzbl -0x9b1(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7d4(%rbp)
	jmp    <read_core_chunk+0xaa93>
	addl   $0x2,-0x7d4(%rbp)
	jmp    <read_core_chunk+0xaa93>
	movzbl -0x9b1(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3e84b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2dd74(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7d4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7d0(%rbp)
	mov    -0x7d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9b5(%rbp)
	movzbl -0x9b5(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xac87>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2e8ed(%rip),%rax        # <_IO_stdin_used+0x31a0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2e8e1(%rip),%rdx        # <_IO_stdin_used+0x31a0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9b5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xab2c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xab8a>
	test   %eax,%eax
	je     <read_core_chunk+0xab2c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xab50>
	jmp    <read_core_chunk+0xab8a>
	movzbl -0x9b5(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1b0(%rbp)
	addl   $0x1,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xabb4>
	mov    -0x7d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1b0(%rbp)
	addl   $0x2,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xabb4>
	movzbl -0x9b5(%rbp),%edx
	mov    0x3e72a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2dc0b(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xacb6>
	addl   $0x1,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xacb6>
	movzbl -0x9b5(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xac23>
	mov    -0x7d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9b4(%rbp)
	cmpb   $0x0,-0x9b4(%rbp)
	jne    <read_core_chunk+0xac0c>
	addl   $0x2,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xac45>
	cmpb   $0x8,-0x9b4(%rbp)
	jne    <read_core_chunk+0xac1e>
	addl   $0x3,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xac45>
	call   <abort@plt>
	movzbl -0x9b5(%rbp),%eax
	mov    %eax,%esi
	lea    0x2dba9(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xacb6>
	movzbl -0x9b5(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xac5d>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xac66>
	jmp    <read_core_chunk+0xac7c>
	addl   $0x2,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xac7c>
	movzbl -0x9b5(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xacb6>
	addl   $0x2,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xacb6>
	movzbl -0x9b5(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3e628(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2db51(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9b3(%rbp)
	movzbl -0x9b3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xae8f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2e719(%rip),%rax        # <_IO_stdin_used+0x31d4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2e70d(%rip),%rdx        # <_IO_stdin_used+0x31d4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9b3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xad34>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xad92>
	test   %eax,%eax
	je     <read_core_chunk+0xad34>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xad58>
	jmp    <read_core_chunk+0xad92>
	movzbl -0x9b3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1a8(%rbp)
	addl   $0x1,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xadbc>
	mov    -0x7d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1a8(%rbp)
	addl   $0x2,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xadbc>
	movzbl -0x9b3(%rbp),%edx
	mov    0x3e522(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2da03(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xaebe>
	addl   $0x1,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xaebe>
	movzbl -0x9b3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xae2b>
	mov    -0x7d0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9b2(%rbp)
	cmpb   $0x0,-0x9b2(%rbp)
	jne    <read_core_chunk+0xae14>
	addl   $0x2,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xae4d>
	cmpb   $0x8,-0x9b2(%rbp)
	jne    <read_core_chunk+0xae26>
	addl   $0x3,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xae4d>
	call   <abort@plt>
	movzbl -0x9b3(%rbp),%eax
	mov    %eax,%esi
	lea    0x2d9a1(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xaebe>
	movzbl -0x9b3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xae65>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xae6e>
	jmp    <read_core_chunk+0xae84>
	addl   $0x2,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xae84>
	movzbl -0x9b3(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xaebe>
	addl   $0x2,-0x7d0(%rbp)
	jmp    <read_core_chunk+0xaebe>
	movzbl -0x9b3(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3e420(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2d949(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7d0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7cc(%rbp)
	mov    -0x7cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x96a(%rbp)
	movzbl -0x96a(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x969(%rbp)
	movzbl -0x969(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x969(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xaf2c>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xaf33>
	jmp    <read_core_chunk+0xafaa>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xaf65>
	jmp    <read_core_chunk+0xafaa>
	mov    -0x7cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x554(%rbp)
	addl   $0x1,-0x7cc(%rbp)
	jmp    <read_core_chunk+0xafaf>
	movzbl -0x96a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x554(%rbp)
	addl   $0x2,-0x7cc(%rbp)
	jmp    <read_core_chunk+0xafaf>
	call   <abort@plt>
	mov    -0x7cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x968(%rbp)
	movzbl -0x968(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xaff7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xb058>
	test   %eax,%eax
	je     <read_core_chunk+0xaff7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xb013>
	jmp    <read_core_chunk+0xb058>
	movzbl -0x968(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x550(%rbp)
	addl   $0x1,-0x7cc(%rbp)
	jmp    <read_core_chunk+0xb082>
	movzbl -0x968(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7cc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x550(%rbp)
	addl   $0x2,-0x7cc(%rbp)
	jmp    <read_core_chunk+0xb082>
	movzbl -0x968(%rbp),%edx
	mov    0x3e25c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2d6cd(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7cc(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7c8(%rbp)
	mov    -0x7c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x96c(%rbp)
	movzbl -0x96c(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x96b(%rbp)
	movzbl -0x96b(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x96b(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xb0f0>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xb0f7>
	jmp    <read_core_chunk+0xb16e>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xb129>
	jmp    <read_core_chunk+0xb16e>
	mov    -0x7c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x558(%rbp)
	addl   $0x1,-0x7c8(%rbp)
	jmp    <read_core_chunk+0xb173>
	movzbl -0x96c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7c8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x558(%rbp)
	addl   $0x2,-0x7c8(%rbp)
	jmp    <read_core_chunk+0xb173>
	call   <abort@plt>
	mov    -0x7c8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7c4(%rbp)
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9c6(%rbp)
	movzbl -0x9c6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xb1d6>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xb237>
	test   %eax,%eax
	je     <read_core_chunk+0xb1d6>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xb1f2>
	jmp    <read_core_chunk+0xb237>
	movzbl -0x9c6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5b8(%rbp)
	addl   $0x1,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb261>
	movzbl -0x9c6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5b8(%rbp)
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb261>
	movzbl -0x9c6(%rbp),%edx
	mov    0x3e07d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2d4ee(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9c5(%rbp)
	movzbl -0x9c5(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xb43a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2e1a2(%rip),%rax        # <_IO_stdin_used+0x3208>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2e196(%rip),%rdx        # <_IO_stdin_used+0x3208>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9c5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xb2df>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xb33d>
	test   %eax,%eax
	je     <read_core_chunk+0xb2df>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xb303>
	jmp    <read_core_chunk+0xb33d>
	movzbl -0x9c5(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1e8(%rbp)
	addl   $0x1,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb367>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1e8(%rbp)
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb367>
	movzbl -0x9c5(%rbp),%edx
	mov    0x3df77(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2d458(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xb469>
	addl   $0x1,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb469>
	movzbl -0x9c5(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xb3d6>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9c4(%rbp)
	cmpb   $0x0,-0x9c4(%rbp)
	jne    <read_core_chunk+0xb3bf>
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb3f8>
	cmpb   $0x8,-0x9c4(%rbp)
	jne    <read_core_chunk+0xb3d1>
	addl   $0x3,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb3f8>
	call   <abort@plt>
	movzbl -0x9c5(%rbp),%eax
	mov    %eax,%esi
	lea    0x2d3f6(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xb469>
	movzbl -0x9c5(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xb410>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xb419>
	jmp    <read_core_chunk+0xb42f>
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb42f>
	movzbl -0x9c5(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb469>
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb469>
	movzbl -0x9c5(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3de75(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2d39e(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9c3(%rbp)
	movzbl -0x9c3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xb642>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2dfce(%rip),%rax        # <_IO_stdin_used+0x323c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2dfc2(%rip),%rdx        # <_IO_stdin_used+0x323c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9c3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xb4e7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xb545>
	test   %eax,%eax
	je     <read_core_chunk+0xb4e7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xb50b>
	jmp    <read_core_chunk+0xb545>
	movzbl -0x9c3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1e0(%rbp)
	addl   $0x1,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb56f>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1e0(%rbp)
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb56f>
	movzbl -0x9c3(%rbp),%edx
	mov    0x3dd6f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2d250(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xb671>
	addl   $0x1,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb671>
	movzbl -0x9c3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xb5de>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9c2(%rbp)
	cmpb   $0x0,-0x9c2(%rbp)
	jne    <read_core_chunk+0xb5c7>
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb600>
	cmpb   $0x8,-0x9c2(%rbp)
	jne    <read_core_chunk+0xb5d9>
	addl   $0x3,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb600>
	call   <abort@plt>
	movzbl -0x9c3(%rbp),%eax
	mov    %eax,%esi
	lea    0x2d1ee(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xb671>
	movzbl -0x9c3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xb618>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xb621>
	jmp    <read_core_chunk+0xb637>
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb637>
	movzbl -0x9c3(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb671>
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb671>
	movzbl -0x9c3(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3dc6d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2d196(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9c1(%rbp)
	movzbl -0x9c1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xb6b9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xb71e>
	test   %eax,%eax
	je     <read_core_chunk+0xb6b9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xb6d6>
	jmp    <read_core_chunk+0xb71e>
	movzbl -0x9c1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x1d8(%rbp)
	addl   $0x1,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb748>
	movzbl -0x9c1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x1d8(%rbp)
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb748>
	movzbl -0x9c1(%rbp),%edx
	mov    0x3db96(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2d03f(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9c0(%rbp)
	movzbl -0x9c0(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x9bf(%rbp)
	movzbl -0x9bf(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x9bf(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xb79b>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xb7a2>
	jmp    <read_core_chunk+0xb819>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xb7d4>
	jmp    <read_core_chunk+0xb819>
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5b4(%rbp)
	addl   $0x1,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb81e>
	movzbl -0x9c0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7c4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5b4(%rbp)
	addl   $0x2,-0x7c4(%rbp)
	jmp    <read_core_chunk+0xb81e>
	call   <abort@plt>
	mov    -0x7c4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7c0(%rbp)
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9be(%rbp)
	movzbl -0x9be(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xb881>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xb8e2>
	test   %eax,%eax
	je     <read_core_chunk+0xb881>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xb89d>
	jmp    <read_core_chunk+0xb8e2>
	movzbl -0x9be(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5b0(%rbp)
	addl   $0x1,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xb90c>
	movzbl -0x9be(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5b0(%rbp)
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xb90c>
	movzbl -0x9be(%rbp),%edx
	mov    0x3d9d2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2ce43(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9bd(%rbp)
	movzbl -0x9bd(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xbae5>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2db5f(%rip),%rax        # <_IO_stdin_used+0x3270>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2db53(%rip),%rdx        # <_IO_stdin_used+0x3270>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9bd(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xb98a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xb9e8>
	test   %eax,%eax
	je     <read_core_chunk+0xb98a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xb9ae>
	jmp    <read_core_chunk+0xb9e8>
	movzbl -0x9bd(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1d0(%rbp)
	addl   $0x1,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xba12>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1d0(%rbp)
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xba12>
	movzbl -0x9bd(%rbp),%edx
	mov    0x3d8cc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2cdad(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xbb14>
	addl   $0x1,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbb14>
	movzbl -0x9bd(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xba81>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9bc(%rbp)
	cmpb   $0x0,-0x9bc(%rbp)
	jne    <read_core_chunk+0xba6a>
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbaa3>
	cmpb   $0x8,-0x9bc(%rbp)
	jne    <read_core_chunk+0xba7c>
	addl   $0x3,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbaa3>
	call   <abort@plt>
	movzbl -0x9bd(%rbp),%eax
	mov    %eax,%esi
	lea    0x2cd4b(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xbb14>
	movzbl -0x9bd(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xbabb>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xbac4>
	jmp    <read_core_chunk+0xbada>
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbada>
	movzbl -0x9bd(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbb14>
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbb14>
	movzbl -0x9bd(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3d7ca(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2ccf3(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9bb(%rbp)
	movzbl -0x9bb(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xbb5c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xbbc1>
	test   %eax,%eax
	je     <read_core_chunk+0xbb5c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xbb79>
	jmp    <read_core_chunk+0xbbc1>
	movzbl -0x9bb(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x1c8(%rbp)
	addl   $0x1,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbbeb>
	movzbl -0x9bb(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x1c8(%rbp)
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbbeb>
	movzbl -0x9bb(%rbp),%edx
	mov    0x3d6f3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2cb9c(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9ba(%rbp)
	movzbl -0x9ba(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xbc33>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xbc98>
	test   %eax,%eax
	je     <read_core_chunk+0xbc33>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xbc50>
	jmp    <read_core_chunk+0xbc98>
	movzbl -0x9ba(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x1c0(%rbp)
	addl   $0x1,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbcc2>
	movzbl -0x9ba(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x1c0(%rbp)
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbcc2>
	movzbl -0x9ba(%rbp),%edx
	mov    0x3d61c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2cac5(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9b9(%rbp)
	movzbl -0x9b9(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xbe9b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2d7dd(%rip),%rax        # <_IO_stdin_used+0x32a4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2d7d1(%rip),%rdx        # <_IO_stdin_used+0x32a4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9b9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xbd40>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xbd9e>
	test   %eax,%eax
	je     <read_core_chunk+0xbd40>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xbd64>
	jmp    <read_core_chunk+0xbd9e>
	movzbl -0x9b9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1b8(%rbp)
	addl   $0x1,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbdc8>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1b8(%rbp)
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbdc8>
	movzbl -0x9b9(%rbp),%edx
	mov    0x3d516(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c9f7(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xbeca>
	addl   $0x1,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbeca>
	movzbl -0x9b9(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xbe37>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9b8(%rbp)
	cmpb   $0x0,-0x9b8(%rbp)
	jne    <read_core_chunk+0xbe20>
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbe59>
	cmpb   $0x8,-0x9b8(%rbp)
	jne    <read_core_chunk+0xbe32>
	addl   $0x3,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbe59>
	call   <abort@plt>
	movzbl -0x9b9(%rbp),%eax
	mov    %eax,%esi
	lea    0x2c995(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xbeca>
	movzbl -0x9b9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xbe71>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xbe7a>
	jmp    <read_core_chunk+0xbe90>
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbe90>
	movzbl -0x9b9(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbeca>
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbeca>
	movzbl -0x9b9(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3d414(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c93d(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9b7(%rbp)
	movzbl -0x9b7(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x9b6(%rbp)
	movzbl -0x9b6(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x9b6(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xbf1d>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xbf24>
	jmp    <read_core_chunk+0xbf9b>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xbf56>
	jmp    <read_core_chunk+0xbf9b>
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5ac(%rbp)
	addl   $0x1,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbfa0>
	movzbl -0x9b7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7c0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5ac(%rbp)
	addl   $0x2,-0x7c0(%rbp)
	jmp    <read_core_chunk+0xbfa0>
	call   <abort@plt>
	mov    -0x7c0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7bc(%rbp)
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa3c(%rbp)
	movzbl -0xa3c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xc003>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xc064>
	test   %eax,%eax
	je     <read_core_chunk+0xc003>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xc01f>
	jmp    <read_core_chunk+0xc064>
	movzbl -0xa3c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x648(%rbp)
	addl   $0x1,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc08e>
	movzbl -0xa3c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x648(%rbp)
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc08e>
	movzbl -0xa3c(%rbp),%edx
	mov    0x3d250(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c6c1(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa3b(%rbp)
	movzbl -0xa3b(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xc267>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2d445(%rip),%rax        # <_IO_stdin_used+0x32d8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2d439(%rip),%rdx        # <_IO_stdin_used+0x32d8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa3b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xc10c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xc16a>
	test   %eax,%eax
	je     <read_core_chunk+0xc10c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xc130>
	jmp    <read_core_chunk+0xc16a>
	movzbl -0xa3b(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x338(%rbp)
	addl   $0x1,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc194>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x338(%rbp)
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc194>
	movzbl -0xa3b(%rbp),%edx
	mov    0x3d14a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c62b(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xc296>
	addl   $0x1,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc296>
	movzbl -0xa3b(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xc203>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa3a(%rbp)
	cmpb   $0x0,-0xa3a(%rbp)
	jne    <read_core_chunk+0xc1ec>
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc225>
	cmpb   $0x8,-0xa3a(%rbp)
	jne    <read_core_chunk+0xc1fe>
	addl   $0x3,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc225>
	call   <abort@plt>
	movzbl -0xa3b(%rbp),%eax
	mov    %eax,%esi
	lea    0x2c5c9(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xc296>
	movzbl -0xa3b(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xc23d>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xc246>
	jmp    <read_core_chunk+0xc25c>
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc25c>
	movzbl -0xa3b(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc296>
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc296>
	movzbl -0xa3b(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3d048(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c571(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa39(%rbp)
	movzbl -0xa39(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xc2de>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xc33f>
	test   %eax,%eax
	je     <read_core_chunk+0xc2de>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xc2fa>
	jmp    <read_core_chunk+0xc33f>
	movzbl -0xa39(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x644(%rbp)
	addl   $0x1,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc369>
	movzbl -0xa39(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x644(%rbp)
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc369>
	movzbl -0xa39(%rbp),%edx
	mov    0x3cf75(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c41e(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa38(%rbp)
	movzbl -0xa38(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xc3b1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xc412>
	test   %eax,%eax
	je     <read_core_chunk+0xc3b1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xc3cd>
	jmp    <read_core_chunk+0xc412>
	movzbl -0xa38(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x640(%rbp)
	addl   $0x1,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc43c>
	movzbl -0xa38(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x640(%rbp)
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc43c>
	movzbl -0xa38(%rbp),%edx
	mov    0x3cea2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c34b(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa37(%rbp)
	movzbl -0xa37(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xc615>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2d0cb(%rip),%rax        # <_IO_stdin_used+0x330c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2d0bf(%rip),%rdx        # <_IO_stdin_used+0x330c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa37(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xc4ba>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xc518>
	test   %eax,%eax
	je     <read_core_chunk+0xc4ba>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xc4de>
	jmp    <read_core_chunk+0xc518>
	movzbl -0xa37(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x330(%rbp)
	addl   $0x1,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc542>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x330(%rbp)
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc542>
	movzbl -0xa37(%rbp),%edx
	mov    0x3cd9c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c27d(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xc644>
	addl   $0x1,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc644>
	movzbl -0xa37(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xc5b1>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa36(%rbp)
	cmpb   $0x0,-0xa36(%rbp)
	jne    <read_core_chunk+0xc59a>
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc5d3>
	cmpb   $0x8,-0xa36(%rbp)
	jne    <read_core_chunk+0xc5ac>
	addl   $0x3,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc5d3>
	call   <abort@plt>
	movzbl -0xa37(%rbp),%eax
	mov    %eax,%esi
	lea    0x2c21b(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xc644>
	movzbl -0xa37(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xc5eb>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xc5f4>
	jmp    <read_core_chunk+0xc60a>
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc60a>
	movzbl -0xa37(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc644>
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc644>
	movzbl -0xa37(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3cc9a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2c1c3(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa35(%rbp)
	movzbl -0xa35(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa34(%rbp)
	movzbl -0xa34(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa34(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xc697>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xc69e>
	jmp    <read_core_chunk+0xc715>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xc6d0>
	jmp    <read_core_chunk+0xc715>
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x63c(%rbp)
	addl   $0x1,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc71a>
	movzbl -0xa35(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7bc(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x63c(%rbp)
	addl   $0x2,-0x7bc(%rbp)
	jmp    <read_core_chunk+0xc71a>
	call   <abort@plt>
	mov    -0x7bc(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7b8(%rbp)
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa31(%rbp)
	movzbl -0xa31(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xc77d>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xc7de>
	test   %eax,%eax
	je     <read_core_chunk+0xc77d>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xc799>
	jmp    <read_core_chunk+0xc7de>
	movzbl -0xa31(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x630(%rbp)
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xc808>
	movzbl -0xa31(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x630(%rbp)
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xc808>
	movzbl -0xa31(%rbp),%edx
	mov    0x3cad6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2bf47(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa30(%rbp)
	movzbl -0xa30(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xc9e1>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2cd33(%rip),%rax        # <_IO_stdin_used+0x3340>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2cd27(%rip),%rdx        # <_IO_stdin_used+0x3340>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa30(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xc886>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xc8e4>
	test   %eax,%eax
	je     <read_core_chunk+0xc886>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xc8aa>
	jmp    <read_core_chunk+0xc8e4>
	movzbl -0xa30(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x328(%rbp)
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xc90e>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x328(%rbp)
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xc90e>
	movzbl -0xa30(%rbp),%edx
	mov    0x3c9d0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2beb1(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xca10>
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xca10>
	movzbl -0xa30(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xc97d>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa2f(%rbp)
	cmpb   $0x0,-0xa2f(%rbp)
	jne    <read_core_chunk+0xc966>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xc99f>
	cmpb   $0x8,-0xa2f(%rbp)
	jne    <read_core_chunk+0xc978>
	addl   $0x3,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xc99f>
	call   <abort@plt>
	movzbl -0xa30(%rbp),%eax
	mov    %eax,%esi
	lea    0x2be4f(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xca10>
	movzbl -0xa30(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xc9b7>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xc9c0>
	jmp    <read_core_chunk+0xc9d6>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xc9d6>
	movzbl -0xa30(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xca10>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xca10>
	movzbl -0xa30(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3c8ce(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2bdf7(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa2e(%rbp)
	movzbl -0xa2e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xcbe9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2cb5f(%rip),%rax        # <_IO_stdin_used+0x3374>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2cb53(%rip),%rdx        # <_IO_stdin_used+0x3374>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa2e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xca8e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xcaec>
	test   %eax,%eax
	je     <read_core_chunk+0xca8e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xcab2>
	jmp    <read_core_chunk+0xcaec>
	movzbl -0xa2e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x320(%rbp)
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcb16>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x320(%rbp)
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcb16>
	movzbl -0xa2e(%rbp),%edx
	mov    0x3c7c8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2bca9(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xcc18>
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcc18>
	movzbl -0xa2e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xcb85>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa2d(%rbp)
	cmpb   $0x0,-0xa2d(%rbp)
	jne    <read_core_chunk+0xcb6e>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcba7>
	cmpb   $0x8,-0xa2d(%rbp)
	jne    <read_core_chunk+0xcb80>
	addl   $0x3,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcba7>
	call   <abort@plt>
	movzbl -0xa2e(%rbp),%eax
	mov    %eax,%esi
	lea    0x2bc47(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xcc18>
	movzbl -0xa2e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xcbbf>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xcbc8>
	jmp    <read_core_chunk+0xcbde>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcbde>
	movzbl -0xa2e(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcc18>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcc18>
	movzbl -0xa2e(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3c6c6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2bbef(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa2c(%rbp)
	movzbl -0xa2c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xcdf1>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2c98b(%rip),%rax        # <_IO_stdin_used+0x33a8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2c97f(%rip),%rdx        # <_IO_stdin_used+0x33a8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa2c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xcc96>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xccf4>
	test   %eax,%eax
	je     <read_core_chunk+0xcc96>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xccba>
	jmp    <read_core_chunk+0xccf4>
	movzbl -0xa2c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x318(%rbp)
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcd1e>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x318(%rbp)
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcd1e>
	movzbl -0xa2c(%rbp),%edx
	mov    0x3c5c0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2baa1(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xce20>
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xce20>
	movzbl -0xa2c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xcd8d>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa2b(%rbp)
	cmpb   $0x0,-0xa2b(%rbp)
	jne    <read_core_chunk+0xcd76>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcdaf>
	cmpb   $0x8,-0xa2b(%rbp)
	jne    <read_core_chunk+0xcd88>
	addl   $0x3,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcdaf>
	call   <abort@plt>
	movzbl -0xa2c(%rbp),%eax
	mov    %eax,%esi
	lea    0x2ba3f(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xce20>
	movzbl -0xa2c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xcdc7>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xcdd0>
	jmp    <read_core_chunk+0xcde6>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcde6>
	movzbl -0xa2c(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xce20>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xce20>
	movzbl -0xa2c(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3c4be(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b9e7(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa2a(%rbp)
	movzbl -0xa2a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xce68>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xcecd>
	test   %eax,%eax
	je     <read_core_chunk+0xce68>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xce85>
	jmp    <read_core_chunk+0xcecd>
	movzbl -0xa2a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x310(%rbp)
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcef7>
	movzbl -0xa2a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x310(%rbp)
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xcef7>
	movzbl -0xa2a(%rbp),%edx
	mov    0x3c3e7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b890(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b8(%rbp),%eax
	mov    %eax,-0x62c(%rbp)
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa29(%rbp)
	movzbl -0xa29(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xd0dc>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2c6d4(%rip),%rax        # <_IO_stdin_used+0x33dc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2c6c8(%rip),%rdx        # <_IO_stdin_used+0x33dc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa29(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xcf81>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xcfdf>
	test   %eax,%eax
	je     <read_core_chunk+0xcf81>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xcfa5>
	jmp    <read_core_chunk+0xcfdf>
	movzbl -0xa29(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x308(%rbp)
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd009>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x308(%rbp)
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd009>
	movzbl -0xa29(%rbp),%edx
	mov    0x3c2d5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b7b6(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xd10b>
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd10b>
	movzbl -0xa29(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xd078>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa28(%rbp)
	cmpb   $0x0,-0xa28(%rbp)
	jne    <read_core_chunk+0xd061>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd09a>
	cmpb   $0x8,-0xa28(%rbp)
	jne    <read_core_chunk+0xd073>
	addl   $0x3,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd09a>
	call   <abort@plt>
	movzbl -0xa29(%rbp),%eax
	mov    %eax,%esi
	lea    0x2b754(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xd10b>
	movzbl -0xa29(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xd0b2>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xd0bb>
	jmp    <read_core_chunk+0xd0d1>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd0d1>
	movzbl -0xa29(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd10b>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd10b>
	movzbl -0xa29(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3c1d3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b6fc(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa27(%rbp)
	movzbl -0xa27(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xd2e4>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2c500(%rip),%rax        # <_IO_stdin_used+0x3410>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2c4f4(%rip),%rdx        # <_IO_stdin_used+0x3410>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa27(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xd189>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xd1e7>
	test   %eax,%eax
	je     <read_core_chunk+0xd189>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xd1ad>
	jmp    <read_core_chunk+0xd1e7>
	movzbl -0xa27(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x300(%rbp)
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd211>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x300(%rbp)
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd211>
	movzbl -0xa27(%rbp),%edx
	mov    0x3c0cd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b5ae(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xd313>
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd313>
	movzbl -0xa27(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xd280>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa26(%rbp)
	cmpb   $0x0,-0xa26(%rbp)
	jne    <read_core_chunk+0xd269>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd2a2>
	cmpb   $0x8,-0xa26(%rbp)
	jne    <read_core_chunk+0xd27b>
	addl   $0x3,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd2a2>
	call   <abort@plt>
	movzbl -0xa27(%rbp),%eax
	mov    %eax,%esi
	lea    0x2b54c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xd313>
	movzbl -0xa27(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xd2ba>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xd2c3>
	jmp    <read_core_chunk+0xd2d9>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd2d9>
	movzbl -0xa27(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd313>
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd313>
	movzbl -0xa27(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3bfcb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b4f4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa25(%rbp)
	movzbl -0xa25(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa24(%rbp)
	movzbl -0xa24(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa24(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xd366>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xd36d>
	jmp    <read_core_chunk+0xd3e4>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xd39f>
	jmp    <read_core_chunk+0xd3e4>
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x628(%rbp)
	addl   $0x1,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd3e9>
	movzbl -0xa25(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7b8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x628(%rbp)
	addl   $0x2,-0x7b8(%rbp)
	jmp    <read_core_chunk+0xd3e9>
	call   <abort@plt>
	mov    -0x7b8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7b4(%rbp)
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x99d(%rbp)
	movzbl -0x99d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xd44c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xd4ad>
	test   %eax,%eax
	je     <read_core_chunk+0xd44c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xd468>
	jmp    <read_core_chunk+0xd4ad>
	movzbl -0x99d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x58c(%rbp)
	addl   $0x1,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd4d7>
	movzbl -0x99d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x58c(%rbp)
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd4d7>
	movzbl -0x99d(%rbp),%edx
	mov    0x3be07(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b278(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x99c(%rbp)
	movzbl -0x99c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xd6b0>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2c168(%rip),%rax        # <_IO_stdin_used+0x3444>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2c15c(%rip),%rdx        # <_IO_stdin_used+0x3444>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x99c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xd555>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xd5b3>
	test   %eax,%eax
	je     <read_core_chunk+0xd555>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xd579>
	jmp    <read_core_chunk+0xd5b3>
	movzbl -0x99c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x170(%rbp)
	addl   $0x1,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd5dd>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x170(%rbp)
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd5dd>
	movzbl -0x99c(%rbp),%edx
	mov    0x3bd01(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b1e2(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xd6df>
	addl   $0x1,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd6df>
	movzbl -0x99c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xd64c>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x99b(%rbp)
	cmpb   $0x0,-0x99b(%rbp)
	jne    <read_core_chunk+0xd635>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd66e>
	cmpb   $0x8,-0x99b(%rbp)
	jne    <read_core_chunk+0xd647>
	addl   $0x3,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd66e>
	call   <abort@plt>
	movzbl -0x99c(%rbp),%eax
	mov    %eax,%esi
	lea    0x2b180(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xd6df>
	movzbl -0x99c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xd686>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xd68f>
	jmp    <read_core_chunk+0xd6a5>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd6a5>
	movzbl -0x99c(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd6df>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd6df>
	movzbl -0x99c(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3bbff(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2b128(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x99a(%rbp)
	movzbl -0x99a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xd727>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xd78c>
	test   %eax,%eax
	je     <read_core_chunk+0xd727>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xd744>
	jmp    <read_core_chunk+0xd78c>
	movzbl -0x99a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x168(%rbp)
	addl   $0x1,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd7b6>
	movzbl -0x99a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x168(%rbp)
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd7b6>
	movzbl -0x99a(%rbp),%edx
	mov    0x3bb28(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2afd1(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x999(%rbp)
	movzbl -0x999(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xd98f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2bebd(%rip),%rax        # <_IO_stdin_used+0x3478>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2beb1(%rip),%rdx        # <_IO_stdin_used+0x3478>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x999(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xd834>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xd892>
	test   %eax,%eax
	je     <read_core_chunk+0xd834>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xd858>
	jmp    <read_core_chunk+0xd892>
	movzbl -0x999(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x160(%rbp)
	addl   $0x1,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd8bc>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x160(%rbp)
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd8bc>
	movzbl -0x999(%rbp),%edx
	mov    0x3ba22(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2af03(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xd9be>
	addl   $0x1,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd9be>
	movzbl -0x999(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xd92b>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x998(%rbp)
	cmpb   $0x0,-0x998(%rbp)
	jne    <read_core_chunk+0xd914>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd94d>
	cmpb   $0x8,-0x998(%rbp)
	jne    <read_core_chunk+0xd926>
	addl   $0x3,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd94d>
	call   <abort@plt>
	movzbl -0x999(%rbp),%eax
	mov    %eax,%esi
	lea    0x2aea1(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xd9be>
	movzbl -0x999(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xd965>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xd96e>
	jmp    <read_core_chunk+0xd984>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd984>
	movzbl -0x999(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd9be>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xd9be>
	movzbl -0x999(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3b920(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2ae49(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x997(%rbp)
	movzbl -0x997(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xdb97>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2bce9(%rip),%rax        # <_IO_stdin_used+0x34ac>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2bcdd(%rip),%rdx        # <_IO_stdin_used+0x34ac>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x997(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xda3c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xda9a>
	test   %eax,%eax
	je     <read_core_chunk+0xda3c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xda60>
	jmp    <read_core_chunk+0xda9a>
	movzbl -0x997(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x158(%rbp)
	addl   $0x1,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xdac4>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x158(%rbp)
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xdac4>
	movzbl -0x997(%rbp),%edx
	mov    0x3b81a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2acfb(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xdbc6>
	addl   $0x1,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xdbc6>
	movzbl -0x997(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xdb33>
	mov    -0x7b4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x996(%rbp)
	cmpb   $0x0,-0x996(%rbp)
	jne    <read_core_chunk+0xdb1c>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xdb55>
	cmpb   $0x8,-0x996(%rbp)
	jne    <read_core_chunk+0xdb2e>
	addl   $0x3,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xdb55>
	call   <abort@plt>
	movzbl -0x997(%rbp),%eax
	mov    %eax,%esi
	lea    0x2ac99(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xdbc6>
	movzbl -0x997(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xdb6d>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xdb76>
	jmp    <read_core_chunk+0xdb8c>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xdb8c>
	movzbl -0x997(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xdbc6>
	addl   $0x2,-0x7b4(%rbp)
	jmp    <read_core_chunk+0xdbc6>
	movzbl -0x997(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3b718(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2ac41(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7b0(%rbp)
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9a5(%rbp)
	movzbl -0x9a5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xdc29>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xdc8a>
	test   %eax,%eax
	je     <read_core_chunk+0xdc29>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xdc45>
	jmp    <read_core_chunk+0xdc8a>
	movzbl -0x9a5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x594(%rbp)
	addl   $0x1,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xdcb4>
	movzbl -0x9a5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x594(%rbp)
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xdcb4>
	movzbl -0x9a5(%rbp),%edx
	mov    0x3b62a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2aa9b(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9a4(%rbp)
	movzbl -0x9a4(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xde8b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2ba27(%rip),%rax        # <_IO_stdin_used+0x34e0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2ba1b(%rip),%rdx        # <_IO_stdin_used+0x34e0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9a4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xdd32>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xdd8e>
	test   %eax,%eax
	je     <read_core_chunk+0xdd32>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xdd55>
	jmp    <read_core_chunk+0xdd8e>
	movzbl -0x9a4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0x590(%rbp)
	addl   $0x1,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xddb8>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %eax,-0x590(%rbp)
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xddb8>
	movzbl -0x9a4(%rbp),%edx
	mov    0x3b526(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2aa07(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xdeba>
	addl   $0x1,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xdeba>
	movzbl -0x9a4(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xde27>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9a3(%rbp)
	cmpb   $0x0,-0x9a3(%rbp)
	jne    <read_core_chunk+0xde10>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xde49>
	cmpb   $0x8,-0x9a3(%rbp)
	jne    <read_core_chunk+0xde22>
	addl   $0x3,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xde49>
	call   <abort@plt>
	movzbl -0x9a4(%rbp),%eax
	mov    %eax,%esi
	lea    0x2a9a5(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xdeba>
	movzbl -0x9a4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xde61>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xde6a>
	jmp    <read_core_chunk+0xde80>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xde80>
	movzbl -0x9a4(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xdeba>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xdeba>
	movzbl -0x9a4(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3b424(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a94d(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9a2(%rbp)
	movzbl -0x9a2(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xdf02>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xdf67>
	test   %eax,%eax
	je     <read_core_chunk+0xdf02>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xdf1f>
	jmp    <read_core_chunk+0xdf67>
	movzbl -0x9a2(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x188(%rbp)
	addl   $0x1,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xdf91>
	movzbl -0x9a2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x188(%rbp)
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xdf91>
	movzbl -0x9a2(%rbp),%edx
	mov    0x3b34d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a7f6(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9a1(%rbp)
	movzbl -0x9a1(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xe16a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2b77e(%rip),%rax        # <_IO_stdin_used+0x3514>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2b772(%rip),%rdx        # <_IO_stdin_used+0x3514>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9a1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xe00f>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xe06d>
	test   %eax,%eax
	je     <read_core_chunk+0xe00f>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe033>
	jmp    <read_core_chunk+0xe06d>
	movzbl -0x9a1(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x180(%rbp)
	addl   $0x1,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe097>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x180(%rbp)
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe097>
	movzbl -0x9a1(%rbp),%edx
	mov    0x3b247(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a728(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xe199>
	addl   $0x1,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe199>
	movzbl -0x9a1(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xe106>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9a0(%rbp)
	cmpb   $0x0,-0x9a0(%rbp)
	jne    <read_core_chunk+0xe0ef>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe128>
	cmpb   $0x8,-0x9a0(%rbp)
	jne    <read_core_chunk+0xe101>
	addl   $0x3,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe128>
	call   <abort@plt>
	movzbl -0x9a1(%rbp),%eax
	mov    %eax,%esi
	lea    0x2a6c6(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xe199>
	movzbl -0x9a1(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xe140>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xe149>
	jmp    <read_core_chunk+0xe15f>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe15f>
	movzbl -0x9a1(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe199>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe199>
	movzbl -0x9a1(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3b145(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a66e(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x99f(%rbp)
	movzbl -0x99f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xe372>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2b5aa(%rip),%rax        # <_IO_stdin_used+0x3548>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2b59e(%rip),%rdx        # <_IO_stdin_used+0x3548>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x99f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xe217>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xe275>
	test   %eax,%eax
	je     <read_core_chunk+0xe217>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe23b>
	jmp    <read_core_chunk+0xe275>
	movzbl -0x99f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x178(%rbp)
	addl   $0x1,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe29f>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x178(%rbp)
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe29f>
	movzbl -0x99f(%rbp),%edx
	mov    0x3b03f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a520(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xe3a1>
	addl   $0x1,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe3a1>
	movzbl -0x99f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xe30e>
	mov    -0x7b0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x99e(%rbp)
	cmpb   $0x0,-0x99e(%rbp)
	jne    <read_core_chunk+0xe2f7>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe330>
	cmpb   $0x8,-0x99e(%rbp)
	jne    <read_core_chunk+0xe309>
	addl   $0x3,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe330>
	call   <abort@plt>
	movzbl -0x99f(%rbp),%eax
	mov    %eax,%esi
	lea    0x2a4be(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xe3a1>
	movzbl -0x99f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xe348>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xe351>
	jmp    <read_core_chunk+0xe367>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe367>
	movzbl -0x99f(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe3a1>
	addl   $0x2,-0x7b0(%rbp)
	jmp    <read_core_chunk+0xe3a1>
	movzbl -0x99f(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3af3d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a466(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7b0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7ac(%rbp)
	mov    -0x7ac(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9a7(%rbp)
	movzbl -0x9a7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xe404>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xe469>
	test   %eax,%eax
	je     <read_core_chunk+0xe404>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe421>
	jmp    <read_core_chunk+0xe469>
	movzbl -0x9a7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x198(%rbp)
	addl   $0x1,-0x7ac(%rbp)
	jmp    <read_core_chunk+0xe493>
	movzbl -0x9a7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7ac(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x198(%rbp)
	addl   $0x2,-0x7ac(%rbp)
	jmp    <read_core_chunk+0xe493>
	movzbl -0x9a7(%rbp),%edx
	mov    0x3ae4b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a2f4(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7ac(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9a6(%rbp)
	movzbl -0x9a6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xe4db>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xe540>
	test   %eax,%eax
	je     <read_core_chunk+0xe4db>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe4f8>
	jmp    <read_core_chunk+0xe540>
	movzbl -0x9a6(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x190(%rbp)
	addl   $0x1,-0x7ac(%rbp)
	jmp    <read_core_chunk+0xe56a>
	movzbl -0x9a6(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7ac(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x190(%rbp)
	addl   $0x2,-0x7ac(%rbp)
	jmp    <read_core_chunk+0xe56a>
	movzbl -0x9a6(%rbp),%edx
	mov    0x3ad74(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a21d(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7ac(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7a8(%rbp)
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9d9(%rbp)
	movzbl -0x9d9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xe5cd>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xe62e>
	test   %eax,%eax
	je     <read_core_chunk+0xe5cd>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe5e9>
	jmp    <read_core_chunk+0xe62e>
	movzbl -0x9d9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5d8(%rbp)
	addl   $0x1,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe658>
	movzbl -0x9d9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5d8(%rbp)
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe658>
	movzbl -0x9d9(%rbp),%edx
	mov    0x3ac86(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a0f7(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9d8(%rbp)
	movzbl -0x9d8(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xe831>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2b11f(%rip),%rax        # <_IO_stdin_used+0x357c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2b113(%rip),%rdx        # <_IO_stdin_used+0x357c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9d8(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xe6d6>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xe734>
	test   %eax,%eax
	je     <read_core_chunk+0xe6d6>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe6fa>
	jmp    <read_core_chunk+0xe734>
	movzbl -0x9d8(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x210(%rbp)
	addl   $0x1,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe75e>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x210(%rbp)
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe75e>
	movzbl -0x9d8(%rbp),%edx
	mov    0x3ab80(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2a061(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xe860>
	addl   $0x1,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe860>
	movzbl -0x9d8(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xe7cd>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9d7(%rbp)
	cmpb   $0x0,-0x9d7(%rbp)
	jne    <read_core_chunk+0xe7b6>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe7ef>
	cmpb   $0x8,-0x9d7(%rbp)
	jne    <read_core_chunk+0xe7c8>
	addl   $0x3,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe7ef>
	call   <abort@plt>
	movzbl -0x9d8(%rbp),%eax
	mov    %eax,%esi
	lea    0x29fff(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xe860>
	movzbl -0x9d8(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xe807>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xe810>
	jmp    <read_core_chunk+0xe826>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe826>
	movzbl -0x9d8(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe860>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe860>
	movzbl -0x9d8(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3aa7e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x29fa7(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9d6(%rbp)
	movzbl -0x9d6(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xea39>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2af4b(%rip),%rax        # <_IO_stdin_used+0x35b0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2af3f(%rip),%rdx        # <_IO_stdin_used+0x35b0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9d6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xe8de>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xe93c>
	test   %eax,%eax
	je     <read_core_chunk+0xe8de>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xe902>
	jmp    <read_core_chunk+0xe93c>
	movzbl -0x9d6(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x208(%rbp)
	addl   $0x1,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe966>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x208(%rbp)
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe966>
	movzbl -0x9d6(%rbp),%edx
	mov    0x3a978(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x29e59(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xea68>
	addl   $0x1,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xea68>
	movzbl -0x9d6(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xe9d5>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9d5(%rbp)
	cmpb   $0x0,-0x9d5(%rbp)
	jne    <read_core_chunk+0xe9be>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe9f7>
	cmpb   $0x8,-0x9d5(%rbp)
	jne    <read_core_chunk+0xe9d0>
	addl   $0x3,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xe9f7>
	call   <abort@plt>
	movzbl -0x9d6(%rbp),%eax
	mov    %eax,%esi
	lea    0x29df7(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xea68>
	movzbl -0x9d6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xea0f>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xea18>
	jmp    <read_core_chunk+0xea2e>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xea2e>
	movzbl -0x9d6(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xea68>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xea68>
	movzbl -0x9d6(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3a876(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x29d9f(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9d4(%rbp)
	movzbl -0x9d4(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xec41>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2ad77(%rip),%rax        # <_IO_stdin_used+0x35e4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2ad6b(%rip),%rdx        # <_IO_stdin_used+0x35e4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9d4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xeae6>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xeb44>
	test   %eax,%eax
	je     <read_core_chunk+0xeae6>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xeb0a>
	jmp    <read_core_chunk+0xeb44>
	movzbl -0x9d4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x200(%rbp)
	addl   $0x1,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xeb6e>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x200(%rbp)
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xeb6e>
	movzbl -0x9d4(%rbp),%edx
	mov    0x3a770(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x29c51(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xec70>
	addl   $0x1,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xec70>
	movzbl -0x9d4(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xebdd>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9d3(%rbp)
	cmpb   $0x0,-0x9d3(%rbp)
	jne    <read_core_chunk+0xebc6>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xebff>
	cmpb   $0x8,-0x9d3(%rbp)
	jne    <read_core_chunk+0xebd8>
	addl   $0x3,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xebff>
	call   <abort@plt>
	movzbl -0x9d4(%rbp),%eax
	mov    %eax,%esi
	lea    0x29bef(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xec70>
	movzbl -0x9d4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xec17>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xec20>
	jmp    <read_core_chunk+0xec36>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xec36>
	movzbl -0x9d4(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xec70>
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xec70>
	movzbl -0x9d4(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3a66e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x29b97(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9d2(%rbp)
	movzbl -0x9d2(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x9d1(%rbp)
	movzbl -0x9d1(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x9d1(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xecc3>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xecca>
	jmp    <read_core_chunk+0xed41>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xecfc>
	jmp    <read_core_chunk+0xed41>
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5d4(%rbp)
	addl   $0x1,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xed46>
	movzbl -0x9d2(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7a8(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5d4(%rbp)
	addl   $0x2,-0x7a8(%rbp)
	jmp    <read_core_chunk+0xed46>
	call   <abort@plt>
	mov    -0x7a8(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7a4(%rbp)
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa90(%rbp)
	movzbl -0xa90(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xeda9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xee0a>
	test   %eax,%eax
	je     <read_core_chunk+0xeda9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xedc5>
	jmp    <read_core_chunk+0xee0a>
	movzbl -0xa90(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6dc(%rbp)
	addl   $0x1,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xee34>
	movzbl -0xa90(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6dc(%rbp)
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xee34>
	movzbl -0xa90(%rbp),%edx
	mov    0x3a4aa(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2991b(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa8f(%rbp)
	movzbl -0xa8f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xf00d>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2a9df(%rip),%rax        # <_IO_stdin_used+0x3618>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2a9d3(%rip),%rdx        # <_IO_stdin_used+0x3618>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa8f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xeeb2>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xef10>
	test   %eax,%eax
	je     <read_core_chunk+0xeeb2>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xeed6>
	jmp    <read_core_chunk+0xef10>
	movzbl -0xa8f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3e8(%rbp)
	addl   $0x1,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xef3a>
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3e8(%rbp)
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xef3a>
	movzbl -0xa8f(%rbp),%edx
	mov    0x3a3a4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x29885(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xf03c>
	addl   $0x1,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf03c>
	movzbl -0xa8f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xefa9>
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa8e(%rbp)
	cmpb   $0x0,-0xa8e(%rbp)
	jne    <read_core_chunk+0xef92>
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xefcb>
	cmpb   $0x8,-0xa8e(%rbp)
	jne    <read_core_chunk+0xefa4>
	addl   $0x3,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xefcb>
	call   <abort@plt>
	movzbl -0xa8f(%rbp),%eax
	mov    %eax,%esi
	lea    0x29823(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xf03c>
	movzbl -0xa8f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xefe3>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xefec>
	jmp    <read_core_chunk+0xf002>
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf002>
	movzbl -0xa8f(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf03c>
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf03c>
	movzbl -0xa8f(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3a2a2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x297cb(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa8d(%rbp)
	movzbl -0xa8d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xf215>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2a80b(%rip),%rax        # <_IO_stdin_used+0x364c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2a7ff(%rip),%rdx        # <_IO_stdin_used+0x364c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa8d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xf0ba>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xf118>
	test   %eax,%eax
	je     <read_core_chunk+0xf0ba>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xf0de>
	jmp    <read_core_chunk+0xf118>
	movzbl -0xa8d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3e0(%rbp)
	addl   $0x1,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf142>
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3e0(%rbp)
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf142>
	movzbl -0xa8d(%rbp),%edx
	mov    0x3a19c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2967d(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xf244>
	addl   $0x1,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf244>
	movzbl -0xa8d(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xf1b1>
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa8c(%rbp)
	cmpb   $0x0,-0xa8c(%rbp)
	jne    <read_core_chunk+0xf19a>
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf1d3>
	cmpb   $0x8,-0xa8c(%rbp)
	jne    <read_core_chunk+0xf1ac>
	addl   $0x3,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf1d3>
	call   <abort@plt>
	movzbl -0xa8d(%rbp),%eax
	mov    %eax,%esi
	lea    0x2961b(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xf244>
	movzbl -0xa8d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xf1eb>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xf1f4>
	jmp    <read_core_chunk+0xf20a>
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf20a>
	movzbl -0xa8d(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf244>
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf244>
	movzbl -0xa8d(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3a09a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x295c3(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa8b(%rbp)
	movzbl -0xa8b(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa8a(%rbp)
	movzbl -0xa8a(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa8a(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xf297>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xf29e>
	jmp    <read_core_chunk+0xf315>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xf2d0>
	jmp    <read_core_chunk+0xf315>
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6d8(%rbp)
	addl   $0x1,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf31a>
	movzbl -0xa8b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7a4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6d8(%rbp)
	addl   $0x2,-0x7a4(%rbp)
	jmp    <read_core_chunk+0xf31a>
	call   <abort@plt>
	mov    -0x7a4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x7a0(%rbp)
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa96(%rbp)
	movzbl -0xa96(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xf50e>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2a546(%rip),%rax        # <_IO_stdin_used+0x3680>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2a53a(%rip),%rdx        # <_IO_stdin_used+0x3680>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa96(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xf3b3>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xf411>
	test   %eax,%eax
	je     <read_core_chunk+0xf3b3>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xf3d7>
	jmp    <read_core_chunk+0xf411>
	movzbl -0xa96(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3f8(%rbp)
	addl   $0x1,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf43b>
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3f8(%rbp)
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf43b>
	movzbl -0xa96(%rbp),%edx
	mov    0x39ea3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x29384(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xf53d>
	addl   $0x1,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf53d>
	movzbl -0xa96(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xf4aa>
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa95(%rbp)
	cmpb   $0x0,-0xa95(%rbp)
	jne    <read_core_chunk+0xf493>
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf4cc>
	cmpb   $0x8,-0xa95(%rbp)
	jne    <read_core_chunk+0xf4a5>
	addl   $0x3,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf4cc>
	call   <abort@plt>
	movzbl -0xa96(%rbp),%eax
	mov    %eax,%esi
	lea    0x29322(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xf53d>
	movzbl -0xa96(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xf4e4>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xf4ed>
	jmp    <read_core_chunk+0xf503>
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf503>
	movzbl -0xa96(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf53d>
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf53d>
	movzbl -0xa96(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x39da1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x292ca(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa94(%rbp)
	movzbl -0xa94(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa93(%rbp)
	movzbl -0xa93(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa93(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xf590>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xf597>
	jmp    <read_core_chunk+0xf60e>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xf5c9>
	jmp    <read_core_chunk+0xf60e>
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6e0(%rbp)
	addl   $0x1,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf613>
	movzbl -0xa94(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6e0(%rbp)
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf613>
	call   <abort@plt>
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa92(%rbp)
	movzbl -0xa92(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xf7ec>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2a29c(%rip),%rax        # <_IO_stdin_used+0x36b4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2a290(%rip),%rdx        # <_IO_stdin_used+0x36b4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa92(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xf691>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xf6ef>
	test   %eax,%eax
	je     <read_core_chunk+0xf691>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xf6b5>
	jmp    <read_core_chunk+0xf6ef>
	movzbl -0xa92(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3f0(%rbp)
	addl   $0x1,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf719>
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3f0(%rbp)
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf719>
	movzbl -0xa92(%rbp),%edx
	mov    0x39bc5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x290a6(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xf81b>
	addl   $0x1,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf81b>
	movzbl -0xa92(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xf788>
	mov    -0x7a0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa91(%rbp)
	cmpb   $0x0,-0xa91(%rbp)
	jne    <read_core_chunk+0xf771>
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf7aa>
	cmpb   $0x8,-0xa91(%rbp)
	jne    <read_core_chunk+0xf783>
	addl   $0x3,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf7aa>
	call   <abort@plt>
	movzbl -0xa92(%rbp),%eax
	mov    %eax,%esi
	lea    0x29044(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xf81b>
	movzbl -0xa92(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xf7c2>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xf7cb>
	jmp    <read_core_chunk+0xf7e1>
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf7e1>
	movzbl -0xa92(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf81b>
	addl   $0x2,-0x7a0(%rbp)
	jmp    <read_core_chunk+0xf81b>
	movzbl -0xa92(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x39ac3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28fec(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x7a0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x79c(%rbp)
	mov    -0x79c(%rbp),%eax
	mov    %eax,-0x6d4(%rbp)
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa89(%rbp)
	movzbl -0xa89(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xfa1b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2a0a1(%rip),%rax        # <_IO_stdin_used+0x36e8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2a095(%rip),%rdx        # <_IO_stdin_used+0x36e8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa89(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xf8c0>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xf91e>
	test   %eax,%eax
	je     <read_core_chunk+0xf8c0>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xf8e4>
	jmp    <read_core_chunk+0xf91e>
	movzbl -0xa89(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3d8(%rbp)
	addl   $0x1,-0x79c(%rbp)
	jmp    <read_core_chunk+0xf948>
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3d8(%rbp)
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xf948>
	movzbl -0xa89(%rbp),%edx
	mov    0x39996(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28e77(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xfa4a>
	addl   $0x1,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfa4a>
	movzbl -0xa89(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xf9b7>
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa88(%rbp)
	cmpb   $0x0,-0xa88(%rbp)
	jne    <read_core_chunk+0xf9a0>
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xf9d9>
	cmpb   $0x8,-0xa88(%rbp)
	jne    <read_core_chunk+0xf9b2>
	addl   $0x3,-0x79c(%rbp)
	jmp    <read_core_chunk+0xf9d9>
	call   <abort@plt>
	movzbl -0xa89(%rbp),%eax
	mov    %eax,%esi
	lea    0x28e15(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xfa4a>
	movzbl -0xa89(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xf9f1>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xf9fa>
	jmp    <read_core_chunk+0xfa10>
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfa10>
	movzbl -0xa89(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfa4a>
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfa4a>
	movzbl -0xa89(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x39894(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28dbd(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa87(%rbp)
	movzbl -0xa87(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa86(%rbp)
	movzbl -0xa86(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa86(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0xfa9d>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0xfaa4>
	jmp    <read_core_chunk+0xfb1b>
	cmp    $0xc,%eax
	je     <read_core_chunk+0xfad6>
	jmp    <read_core_chunk+0xfb1b>
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6d0(%rbp)
	addl   $0x1,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfb20>
	movzbl -0xa87(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6d0(%rbp)
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfb20>
	call   <abort@plt>
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa85(%rbp)
	movzbl -0xa85(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xfcf9>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x29df7(%rip),%rax        # <_IO_stdin_used+0x371c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x29deb(%rip),%rdx        # <_IO_stdin_used+0x371c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa85(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xfb9e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xfbfc>
	test   %eax,%eax
	je     <read_core_chunk+0xfb9e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xfbc2>
	jmp    <read_core_chunk+0xfbfc>
	movzbl -0xa85(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3d0(%rbp)
	addl   $0x1,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfc26>
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3d0(%rbp)
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfc26>
	movzbl -0xa85(%rbp),%edx
	mov    0x396b8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28b99(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xfd28>
	addl   $0x1,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfd28>
	movzbl -0xa85(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xfc95>
	mov    -0x79c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa84(%rbp)
	cmpb   $0x0,-0xa84(%rbp)
	jne    <read_core_chunk+0xfc7e>
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfcb7>
	cmpb   $0x8,-0xa84(%rbp)
	jne    <read_core_chunk+0xfc90>
	addl   $0x3,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfcb7>
	call   <abort@plt>
	movzbl -0xa85(%rbp),%eax
	mov    %eax,%esi
	lea    0x28b37(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xfd28>
	movzbl -0xa85(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xfccf>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xfcd8>
	jmp    <read_core_chunk+0xfcee>
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfcee>
	movzbl -0xa85(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfd28>
	addl   $0x2,-0x79c(%rbp)
	jmp    <read_core_chunk+0xfd28>
	movzbl -0xa85(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x395b6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28adf(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x79c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x798(%rbp)
	mov    -0x798(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa9a(%rbp)
	movzbl -0xa9a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0xff1c>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x29c08(%rip),%rax        # <_IO_stdin_used+0x3750>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x29bfc(%rip),%rdx        # <_IO_stdin_used+0x3750>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa9a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xfdc1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0xfe1f>
	test   %eax,%eax
	je     <read_core_chunk+0xfdc1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xfde5>
	jmp    <read_core_chunk+0xfe1f>
	movzbl -0xa9a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x408(%rbp)
	addl   $0x1,-0x798(%rbp)
	jmp    <read_core_chunk+0xfe49>
	mov    -0x798(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x408(%rbp)
	addl   $0x2,-0x798(%rbp)
	jmp    <read_core_chunk+0xfe49>
	movzbl -0xa9a(%rbp),%edx
	mov    0x39495(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28976(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xff4b>
	addl   $0x1,-0x798(%rbp)
	jmp    <read_core_chunk+0xff4b>
	movzbl -0xa9a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0xfeb8>
	mov    -0x798(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa99(%rbp)
	cmpb   $0x0,-0xa99(%rbp)
	jne    <read_core_chunk+0xfea1>
	addl   $0x2,-0x798(%rbp)
	jmp    <read_core_chunk+0xfeda>
	cmpb   $0x8,-0xa99(%rbp)
	jne    <read_core_chunk+0xfeb3>
	addl   $0x3,-0x798(%rbp)
	jmp    <read_core_chunk+0xfeda>
	call   <abort@plt>
	movzbl -0xa9a(%rbp),%eax
	mov    %eax,%esi
	lea    0x28914(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0xff4b>
	movzbl -0xa9a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0xfef2>
	cmp    $0x18,%eax
	je     <read_core_chunk+0xfefb>
	jmp    <read_core_chunk+0xff11>
	addl   $0x2,-0x798(%rbp)
	jmp    <read_core_chunk+0xff11>
	movzbl -0xa9a(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x798(%rbp)
	jmp    <read_core_chunk+0xff4b>
	addl   $0x2,-0x798(%rbp)
	jmp    <read_core_chunk+0xff4b>
	movzbl -0xa9a(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x39393(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x288bc(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x798(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa98(%rbp)
	movzbl -0xa98(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x10124>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x29a34(%rip),%rax        # <_IO_stdin_used+0x3784>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x29a28(%rip),%rdx        # <_IO_stdin_used+0x3784>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa98(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0xffc9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x10027>
	test   %eax,%eax
	je     <read_core_chunk+0xffc9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0xffed>
	jmp    <read_core_chunk+0x10027>
	movzbl -0xa98(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x400(%rbp)
	addl   $0x1,-0x798(%rbp)
	jmp    <read_core_chunk+0x10051>
	mov    -0x798(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x400(%rbp)
	addl   $0x2,-0x798(%rbp)
	jmp    <read_core_chunk+0x10051>
	movzbl -0xa98(%rbp),%edx
	mov    0x3928d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2876e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10153>
	addl   $0x1,-0x798(%rbp)
	jmp    <read_core_chunk+0x10153>
	movzbl -0xa98(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x100c0>
	mov    -0x798(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa97(%rbp)
	cmpb   $0x0,-0xa97(%rbp)
	jne    <read_core_chunk+0x100a9>
	addl   $0x2,-0x798(%rbp)
	jmp    <read_core_chunk+0x100e2>
	cmpb   $0x8,-0xa97(%rbp)
	jne    <read_core_chunk+0x100bb>
	addl   $0x3,-0x798(%rbp)
	jmp    <read_core_chunk+0x100e2>
	call   <abort@plt>
	movzbl -0xa98(%rbp),%eax
	mov    %eax,%esi
	lea    0x2870c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10153>
	movzbl -0xa98(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x100fa>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x10103>
	jmp    <read_core_chunk+0x10119>
	addl   $0x2,-0x798(%rbp)
	jmp    <read_core_chunk+0x10119>
	movzbl -0xa98(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x798(%rbp)
	jmp    <read_core_chunk+0x10153>
	addl   $0x2,-0x798(%rbp)
	jmp    <read_core_chunk+0x10153>
	movzbl -0xa98(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3918b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x286b4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x798(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x794(%rbp)
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa23(%rbp)
	movzbl -0xa23(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x101b6>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x10217>
	test   %eax,%eax
	je     <read_core_chunk+0x101b6>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x101d2>
	jmp    <read_core_chunk+0x10217>
	movzbl -0xa23(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x624(%rbp)
	addl   $0x1,-0x794(%rbp)
	jmp    <read_core_chunk+0x10241>
	movzbl -0xa23(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x624(%rbp)
	addl   $0x2,-0x794(%rbp)
	jmp    <read_core_chunk+0x10241>
	movzbl -0xa23(%rbp),%edx
	mov    0x3909d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2850e(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa22(%rbp)
	movzbl -0xa22(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1041a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x29772(%rip),%rax        # <_IO_stdin_used+0x37b8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x29766(%rip),%rdx        # <_IO_stdin_used+0x37b8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa22(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x102bf>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1031d>
	test   %eax,%eax
	je     <read_core_chunk+0x102bf>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x102e3>
	jmp    <read_core_chunk+0x1031d>
	movzbl -0xa22(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2f8(%rbp)
	addl   $0x1,-0x794(%rbp)
	jmp    <read_core_chunk+0x10347>
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2f8(%rbp)
	addl   $0x2,-0x794(%rbp)
	jmp    <read_core_chunk+0x10347>
	movzbl -0xa22(%rbp),%edx
	mov    0x38f97(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28478(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10449>
	addl   $0x1,-0x794(%rbp)
	jmp    <read_core_chunk+0x10449>
	movzbl -0xa22(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x103b6>
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa21(%rbp)
	cmpb   $0x0,-0xa21(%rbp)
	jne    <read_core_chunk+0x1039f>
	addl   $0x2,-0x794(%rbp)
	jmp    <read_core_chunk+0x103d8>
	cmpb   $0x8,-0xa21(%rbp)
	jne    <read_core_chunk+0x103b1>
	addl   $0x3,-0x794(%rbp)
	jmp    <read_core_chunk+0x103d8>
	call   <abort@plt>
	movzbl -0xa22(%rbp),%eax
	mov    %eax,%esi
	lea    0x28416(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10449>
	movzbl -0xa22(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x103f0>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x103f9>
	jmp    <read_core_chunk+0x1040f>
	addl   $0x2,-0x794(%rbp)
	jmp    <read_core_chunk+0x1040f>
	movzbl -0xa22(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x794(%rbp)
	jmp    <read_core_chunk+0x10449>
	addl   $0x2,-0x794(%rbp)
	jmp    <read_core_chunk+0x10449>
	movzbl -0xa22(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x38e95(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x283be(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa20(%rbp)
	movzbl -0xa20(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10491>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x104f6>
	test   %eax,%eax
	je     <read_core_chunk+0x10491>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x104ae>
	jmp    <read_core_chunk+0x104f6>
	movzbl -0xa20(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x2f0(%rbp)
	addl   $0x1,-0x794(%rbp)
	jmp    <read_core_chunk+0x10520>
	movzbl -0xa20(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x2f0(%rbp)
	addl   $0x2,-0x794(%rbp)
	jmp    <read_core_chunk+0x10520>
	movzbl -0xa20(%rbp),%edx
	mov    0x38dbe(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28267(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa1f(%rbp)
	movzbl -0xa1f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10568>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x105cd>
	test   %eax,%eax
	je     <read_core_chunk+0x10568>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x10585>
	jmp    <read_core_chunk+0x105cd>
	movzbl -0xa1f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x2e8(%rbp)
	addl   $0x1,-0x794(%rbp)
	jmp    <read_core_chunk+0x105f7>
	movzbl -0xa1f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x794(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x2e8(%rbp)
	addl   $0x2,-0x794(%rbp)
	jmp    <read_core_chunk+0x105f7>
	movzbl -0xa1f(%rbp),%edx
	mov    0x38ce7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x28190(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x794(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x790(%rbp)
	mov    -0x790(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa01(%rbp)
	movzbl -0xa01(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x107eb>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x293d5(%rip),%rax        # <_IO_stdin_used+0x37ec>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x293c9(%rip),%rdx        # <_IO_stdin_used+0x37ec>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa01(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10690>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x106ee>
	test   %eax,%eax
	je     <read_core_chunk+0x10690>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x106b4>
	jmp    <read_core_chunk+0x106ee>
	movzbl -0xa01(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2a0(%rbp)
	addl   $0x1,-0x790(%rbp)
	jmp    <read_core_chunk+0x10718>
	mov    -0x790(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2a0(%rbp)
	addl   $0x2,-0x790(%rbp)
	jmp    <read_core_chunk+0x10718>
	movzbl -0xa01(%rbp),%edx
	mov    0x38bc6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x280a7(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1081a>
	addl   $0x1,-0x790(%rbp)
	jmp    <read_core_chunk+0x1081a>
	movzbl -0xa01(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x10787>
	mov    -0x790(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa00(%rbp)
	cmpb   $0x0,-0xa00(%rbp)
	jne    <read_core_chunk+0x10770>
	addl   $0x2,-0x790(%rbp)
	jmp    <read_core_chunk+0x107a9>
	cmpb   $0x8,-0xa00(%rbp)
	jne    <read_core_chunk+0x10782>
	addl   $0x3,-0x790(%rbp)
	jmp    <read_core_chunk+0x107a9>
	call   <abort@plt>
	movzbl -0xa01(%rbp),%eax
	mov    %eax,%esi
	lea    0x28045(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1081a>
	movzbl -0xa01(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x107c1>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x107ca>
	jmp    <read_core_chunk+0x107e0>
	addl   $0x2,-0x790(%rbp)
	jmp    <read_core_chunk+0x107e0>
	movzbl -0xa01(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x790(%rbp)
	jmp    <read_core_chunk+0x1081a>
	addl   $0x2,-0x790(%rbp)
	jmp    <read_core_chunk+0x1081a>
	movzbl -0xa01(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x38ac4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27fed(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x790(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9ff(%rbp)
	movzbl -0x9ff(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x109f3>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x29201(%rip),%rax        # <_IO_stdin_used+0x3820>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x291f5(%rip),%rdx        # <_IO_stdin_used+0x3820>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9ff(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10898>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x108f6>
	test   %eax,%eax
	je     <read_core_chunk+0x10898>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x108bc>
	jmp    <read_core_chunk+0x108f6>
	movzbl -0x9ff(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x298(%rbp)
	addl   $0x1,-0x790(%rbp)
	jmp    <read_core_chunk+0x10920>
	mov    -0x790(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x298(%rbp)
	addl   $0x2,-0x790(%rbp)
	jmp    <read_core_chunk+0x10920>
	movzbl -0x9ff(%rbp),%edx
	mov    0x389be(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27e9f(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10a22>
	addl   $0x1,-0x790(%rbp)
	jmp    <read_core_chunk+0x10a22>
	movzbl -0x9ff(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x1098f>
	mov    -0x790(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9fe(%rbp)
	cmpb   $0x0,-0x9fe(%rbp)
	jne    <read_core_chunk+0x10978>
	addl   $0x2,-0x790(%rbp)
	jmp    <read_core_chunk+0x109b1>
	cmpb   $0x8,-0x9fe(%rbp)
	jne    <read_core_chunk+0x1098a>
	addl   $0x3,-0x790(%rbp)
	jmp    <read_core_chunk+0x109b1>
	call   <abort@plt>
	movzbl -0x9ff(%rbp),%eax
	mov    %eax,%esi
	lea    0x27e3d(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10a22>
	movzbl -0x9ff(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x109c9>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x109d2>
	jmp    <read_core_chunk+0x109e8>
	addl   $0x2,-0x790(%rbp)
	jmp    <read_core_chunk+0x109e8>
	movzbl -0x9ff(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x790(%rbp)
	jmp    <read_core_chunk+0x10a22>
	addl   $0x2,-0x790(%rbp)
	jmp    <read_core_chunk+0x10a22>
	movzbl -0x9ff(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x388bc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27de5(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x790(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x78c(%rbp)
	mov    -0x78c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa05(%rbp)
	movzbl -0xa05(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x10c16>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x29012(%rip),%rax        # <_IO_stdin_used+0x3854>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x29006(%rip),%rdx        # <_IO_stdin_used+0x3854>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa05(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10abb>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x10b19>
	test   %eax,%eax
	je     <read_core_chunk+0x10abb>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x10adf>
	jmp    <read_core_chunk+0x10b19>
	movzbl -0xa05(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2b0(%rbp)
	addl   $0x1,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10b43>
	mov    -0x78c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2b0(%rbp)
	addl   $0x2,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10b43>
	movzbl -0xa05(%rbp),%edx
	mov    0x3879b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27c7c(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10c45>
	addl   $0x1,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10c45>
	movzbl -0xa05(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x10bb2>
	mov    -0x78c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa04(%rbp)
	cmpb   $0x0,-0xa04(%rbp)
	jne    <read_core_chunk+0x10b9b>
	addl   $0x2,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10bd4>
	cmpb   $0x8,-0xa04(%rbp)
	jne    <read_core_chunk+0x10bad>
	addl   $0x3,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10bd4>
	call   <abort@plt>
	movzbl -0xa05(%rbp),%eax
	mov    %eax,%esi
	lea    0x27c1a(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10c45>
	movzbl -0xa05(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x10bec>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x10bf5>
	jmp    <read_core_chunk+0x10c0b>
	addl   $0x2,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10c0b>
	movzbl -0xa05(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10c45>
	addl   $0x2,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10c45>
	movzbl -0xa05(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x38699(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27bc2(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x78c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa03(%rbp)
	movzbl -0xa03(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x10e1e>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x28e3e(%rip),%rax        # <_IO_stdin_used+0x3888>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x28e32(%rip),%rdx        # <_IO_stdin_used+0x3888>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa03(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10cc3>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x10d21>
	test   %eax,%eax
	je     <read_core_chunk+0x10cc3>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x10ce7>
	jmp    <read_core_chunk+0x10d21>
	movzbl -0xa03(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2a8(%rbp)
	addl   $0x1,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10d4b>
	mov    -0x78c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2a8(%rbp)
	addl   $0x2,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10d4b>
	movzbl -0xa03(%rbp),%edx
	mov    0x38593(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27a74(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10e4d>
	addl   $0x1,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10e4d>
	movzbl -0xa03(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x10dba>
	mov    -0x78c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa02(%rbp)
	cmpb   $0x0,-0xa02(%rbp)
	jne    <read_core_chunk+0x10da3>
	addl   $0x2,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10ddc>
	cmpb   $0x8,-0xa02(%rbp)
	jne    <read_core_chunk+0x10db5>
	addl   $0x3,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10ddc>
	call   <abort@plt>
	movzbl -0xa03(%rbp),%eax
	mov    %eax,%esi
	lea    0x27a12(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x10e4d>
	movzbl -0xa03(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x10df4>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x10dfd>
	jmp    <read_core_chunk+0x10e13>
	addl   $0x2,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10e13>
	movzbl -0xa03(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10e4d>
	addl   $0x2,-0x78c(%rbp)
	jmp    <read_core_chunk+0x10e4d>
	movzbl -0xa03(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x38491(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x279ba(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x78c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x788(%rbp)
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9f9(%rbp)
	movzbl -0x9f9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10eb0>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x10f11>
	test   %eax,%eax
	je     <read_core_chunk+0x10eb0>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x10ecc>
	jmp    <read_core_chunk+0x10f11>
	movzbl -0x9f9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5f0(%rbp)
	addl   $0x1,-0x788(%rbp)
	jmp    <read_core_chunk+0x10f3b>
	movzbl -0x9f9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5f0(%rbp)
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x10f3b>
	movzbl -0x9f9(%rbp),%edx
	mov    0x383a3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27814(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9f8(%rbp)
	movzbl -0x9f8(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x11114>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x28b7c(%rip),%rax        # <_IO_stdin_used+0x38bc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x28b70(%rip),%rdx        # <_IO_stdin_used+0x38bc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9f8(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x10fb9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x11017>
	test   %eax,%eax
	je     <read_core_chunk+0x10fb9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x10fdd>
	jmp    <read_core_chunk+0x11017>
	movzbl -0x9f8(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x280(%rbp)
	addl   $0x1,-0x788(%rbp)
	jmp    <read_core_chunk+0x11041>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x280(%rbp)
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x11041>
	movzbl -0x9f8(%rbp),%edx
	mov    0x3829d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2777e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x11143>
	addl   $0x1,-0x788(%rbp)
	jmp    <read_core_chunk+0x11143>
	movzbl -0x9f8(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x110b0>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9f7(%rbp)
	cmpb   $0x0,-0x9f7(%rbp)
	jne    <read_core_chunk+0x11099>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x110d2>
	cmpb   $0x8,-0x9f7(%rbp)
	jne    <read_core_chunk+0x110ab>
	addl   $0x3,-0x788(%rbp)
	jmp    <read_core_chunk+0x110d2>
	call   <abort@plt>
	movzbl -0x9f8(%rbp),%eax
	mov    %eax,%esi
	lea    0x2771c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x11143>
	movzbl -0x9f8(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x110ea>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x110f3>
	jmp    <read_core_chunk+0x11109>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x11109>
	movzbl -0x9f8(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x788(%rbp)
	jmp    <read_core_chunk+0x11143>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x11143>
	movzbl -0x9f8(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3819b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x276c4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9f6(%rbp)
	movzbl -0x9f6(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1131c>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x289a8(%rip),%rax        # <_IO_stdin_used+0x38f0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2899c(%rip),%rdx        # <_IO_stdin_used+0x38f0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9f6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x111c1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1121f>
	test   %eax,%eax
	je     <read_core_chunk+0x111c1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x111e5>
	jmp    <read_core_chunk+0x1121f>
	movzbl -0x9f6(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x278(%rbp)
	addl   $0x1,-0x788(%rbp)
	jmp    <read_core_chunk+0x11249>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x278(%rbp)
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x11249>
	movzbl -0x9f6(%rbp),%edx
	mov    0x38095(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27576(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1134b>
	addl   $0x1,-0x788(%rbp)
	jmp    <read_core_chunk+0x1134b>
	movzbl -0x9f6(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x112b8>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9f5(%rbp)
	cmpb   $0x0,-0x9f5(%rbp)
	jne    <read_core_chunk+0x112a1>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x112da>
	cmpb   $0x8,-0x9f5(%rbp)
	jne    <read_core_chunk+0x112b3>
	addl   $0x3,-0x788(%rbp)
	jmp    <read_core_chunk+0x112da>
	call   <abort@plt>
	movzbl -0x9f6(%rbp),%eax
	mov    %eax,%esi
	lea    0x27514(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1134b>
	movzbl -0x9f6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x112f2>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x112fb>
	jmp    <read_core_chunk+0x11311>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x11311>
	movzbl -0x9f6(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x788(%rbp)
	jmp    <read_core_chunk+0x1134b>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x1134b>
	movzbl -0x9f6(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x37f93(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x274bc(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9f4(%rbp)
	movzbl -0x9f4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x11393>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x113f8>
	test   %eax,%eax
	je     <read_core_chunk+0x11393>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x113b0>
	jmp    <read_core_chunk+0x113f8>
	movzbl -0x9f4(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x270(%rbp)
	addl   $0x1,-0x788(%rbp)
	jmp    <read_core_chunk+0x11422>
	movzbl -0x9f4(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x270(%rbp)
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x11422>
	movzbl -0x9f4(%rbp),%edx
	mov    0x37ebc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27365(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9f3(%rbp)
	movzbl -0x9f3(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x115fb>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x286fd(%rip),%rax        # <_IO_stdin_used+0x3924>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x286f1(%rip),%rdx        # <_IO_stdin_used+0x3924>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9f3(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x114a0>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x114fe>
	test   %eax,%eax
	je     <read_core_chunk+0x114a0>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x114c4>
	jmp    <read_core_chunk+0x114fe>
	movzbl -0x9f3(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x268(%rbp)
	addl   $0x1,-0x788(%rbp)
	jmp    <read_core_chunk+0x11528>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x268(%rbp)
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x11528>
	movzbl -0x9f3(%rbp),%edx
	mov    0x37db6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27297(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1162a>
	addl   $0x1,-0x788(%rbp)
	jmp    <read_core_chunk+0x1162a>
	movzbl -0x9f3(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x11597>
	mov    -0x788(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9f2(%rbp)
	cmpb   $0x0,-0x9f2(%rbp)
	jne    <read_core_chunk+0x11580>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x115b9>
	cmpb   $0x8,-0x9f2(%rbp)
	jne    <read_core_chunk+0x11592>
	addl   $0x3,-0x788(%rbp)
	jmp    <read_core_chunk+0x115b9>
	call   <abort@plt>
	movzbl -0x9f3(%rbp),%eax
	mov    %eax,%esi
	lea    0x27235(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1162a>
	movzbl -0x9f3(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x115d1>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x115da>
	jmp    <read_core_chunk+0x115f0>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x115f0>
	movzbl -0x9f3(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x788(%rbp)
	jmp    <read_core_chunk+0x1162a>
	addl   $0x2,-0x788(%rbp)
	jmp    <read_core_chunk+0x1162a>
	movzbl -0x9f3(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x37cb4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x271dd(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x788(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x784(%rbp)
	mov    -0x784(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa1e(%rbp)
	movzbl -0xa1e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1168d>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x116ee>
	test   %eax,%eax
	je     <read_core_chunk+0x1168d>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x116a9>
	jmp    <read_core_chunk+0x116ee>
	movzbl -0xa1e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x620(%rbp)
	addl   $0x1,-0x784(%rbp)
	jmp    <read_core_chunk+0x11718>
	movzbl -0xa1e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x784(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x620(%rbp)
	addl   $0x2,-0x784(%rbp)
	jmp    <read_core_chunk+0x11718>
	movzbl -0xa1e(%rbp),%edx
	mov    0x37bc6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x27037(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x784(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa1d(%rbp)
	movzbl -0xa1d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x118f1>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2843b(%rip),%rax        # <_IO_stdin_used+0x3958>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2842f(%rip),%rdx        # <_IO_stdin_used+0x3958>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa1d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x11796>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x117f4>
	test   %eax,%eax
	je     <read_core_chunk+0x11796>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x117ba>
	jmp    <read_core_chunk+0x117f4>
	movzbl -0xa1d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2e0(%rbp)
	addl   $0x1,-0x784(%rbp)
	jmp    <read_core_chunk+0x1181e>
	mov    -0x784(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2e0(%rbp)
	addl   $0x2,-0x784(%rbp)
	jmp    <read_core_chunk+0x1181e>
	movzbl -0xa1d(%rbp),%edx
	mov    0x37ac0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26fa1(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x11920>
	addl   $0x1,-0x784(%rbp)
	jmp    <read_core_chunk+0x11920>
	movzbl -0xa1d(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x1188d>
	mov    -0x784(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa1c(%rbp)
	cmpb   $0x0,-0xa1c(%rbp)
	jne    <read_core_chunk+0x11876>
	addl   $0x2,-0x784(%rbp)
	jmp    <read_core_chunk+0x118af>
	cmpb   $0x8,-0xa1c(%rbp)
	jne    <read_core_chunk+0x11888>
	addl   $0x3,-0x784(%rbp)
	jmp    <read_core_chunk+0x118af>
	call   <abort@plt>
	movzbl -0xa1d(%rbp),%eax
	mov    %eax,%esi
	lea    0x26f3f(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x11920>
	movzbl -0xa1d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x118c7>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x118d0>
	jmp    <read_core_chunk+0x118e6>
	addl   $0x2,-0x784(%rbp)
	jmp    <read_core_chunk+0x118e6>
	movzbl -0xa1d(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x784(%rbp)
	jmp    <read_core_chunk+0x11920>
	addl   $0x2,-0x784(%rbp)
	jmp    <read_core_chunk+0x11920>
	movzbl -0xa1d(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x379be(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26ee7(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x784(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa1b(%rbp)
	movzbl -0xa1b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x11968>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x119cd>
	test   %eax,%eax
	je     <read_core_chunk+0x11968>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x11985>
	jmp    <read_core_chunk+0x119cd>
	movzbl -0xa1b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x2d8(%rbp)
	addl   $0x1,-0x784(%rbp)
	jmp    <read_core_chunk+0x119f7>
	movzbl -0xa1b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x784(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x2d8(%rbp)
	addl   $0x2,-0x784(%rbp)
	jmp    <read_core_chunk+0x119f7>
	movzbl -0xa1b(%rbp),%edx
	mov    0x378e7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26d90(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x784(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x780(%rbp)
	mov    -0x780(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9fd(%rbp)
	movzbl -0x9fd(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x11a5a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x11abb>
	test   %eax,%eax
	je     <read_core_chunk+0x11a5a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x11a76>
	jmp    <read_core_chunk+0x11abb>
	movzbl -0x9fd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5f4(%rbp)
	addl   $0x1,-0x780(%rbp)
	jmp    <read_core_chunk+0x11ae5>
	movzbl -0x9fd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x780(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5f4(%rbp)
	addl   $0x2,-0x780(%rbp)
	jmp    <read_core_chunk+0x11ae5>
	movzbl -0x9fd(%rbp),%edx
	mov    0x377f9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26c6a(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x780(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9fc(%rbp)
	movzbl -0x9fc(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x11cbe>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x280a2(%rip),%rax        # <_IO_stdin_used+0x398c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x28096(%rip),%rdx        # <_IO_stdin_used+0x398c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9fc(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x11b63>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x11bc1>
	test   %eax,%eax
	je     <read_core_chunk+0x11b63>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x11b87>
	jmp    <read_core_chunk+0x11bc1>
	movzbl -0x9fc(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x290(%rbp)
	addl   $0x1,-0x780(%rbp)
	jmp    <read_core_chunk+0x11beb>
	mov    -0x780(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x290(%rbp)
	addl   $0x2,-0x780(%rbp)
	jmp    <read_core_chunk+0x11beb>
	movzbl -0x9fc(%rbp),%edx
	mov    0x376f3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26bd4(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x11ced>
	addl   $0x1,-0x780(%rbp)
	jmp    <read_core_chunk+0x11ced>
	movzbl -0x9fc(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x11c5a>
	mov    -0x780(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9fb(%rbp)
	cmpb   $0x0,-0x9fb(%rbp)
	jne    <read_core_chunk+0x11c43>
	addl   $0x2,-0x780(%rbp)
	jmp    <read_core_chunk+0x11c7c>
	cmpb   $0x8,-0x9fb(%rbp)
	jne    <read_core_chunk+0x11c55>
	addl   $0x3,-0x780(%rbp)
	jmp    <read_core_chunk+0x11c7c>
	call   <abort@plt>
	movzbl -0x9fc(%rbp),%eax
	mov    %eax,%esi
	lea    0x26b72(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x11ced>
	movzbl -0x9fc(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x11c94>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x11c9d>
	jmp    <read_core_chunk+0x11cb3>
	addl   $0x2,-0x780(%rbp)
	jmp    <read_core_chunk+0x11cb3>
	movzbl -0x9fc(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x780(%rbp)
	jmp    <read_core_chunk+0x11ced>
	addl   $0x2,-0x780(%rbp)
	jmp    <read_core_chunk+0x11ced>
	movzbl -0x9fc(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x375f1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26b1a(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x780(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9fa(%rbp)
	movzbl -0x9fa(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x11d35>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x11d9a>
	test   %eax,%eax
	je     <read_core_chunk+0x11d35>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x11d52>
	jmp    <read_core_chunk+0x11d9a>
	movzbl -0x9fa(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x288(%rbp)
	addl   $0x1,-0x780(%rbp)
	jmp    <read_core_chunk+0x11dc4>
	movzbl -0x9fa(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x780(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x288(%rbp)
	addl   $0x2,-0x780(%rbp)
	jmp    <read_core_chunk+0x11dc4>
	movzbl -0x9fa(%rbp),%edx
	mov    0x3751a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x269c3(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x780(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x77c(%rbp)
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9e5(%rbp)
	movzbl -0x9e5(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x11e27>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x11e88>
	test   %eax,%eax
	je     <read_core_chunk+0x11e27>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x11e43>
	jmp    <read_core_chunk+0x11e88>
	movzbl -0x9e5(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5e0(%rbp)
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x11eb2>
	movzbl -0x9e5(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5e0(%rbp)
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x11eb2>
	movzbl -0x9e5(%rbp),%edx
	mov    0x3742c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2689d(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9e4(%rbp)
	movzbl -0x9e4(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1208b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x27d09(%rip),%rax        # <_IO_stdin_used+0x39c0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x27cfd(%rip),%rdx        # <_IO_stdin_used+0x39c0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9e4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x11f30>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x11f8e>
	test   %eax,%eax
	je     <read_core_chunk+0x11f30>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x11f54>
	jmp    <read_core_chunk+0x11f8e>
	movzbl -0x9e4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x238(%rbp)
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x11fb8>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x238(%rbp)
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x11fb8>
	movzbl -0x9e4(%rbp),%edx
	mov    0x37326(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26807(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x120ba>
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x120ba>
	movzbl -0x9e4(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x12027>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9e3(%rbp)
	cmpb   $0x0,-0x9e3(%rbp)
	jne    <read_core_chunk+0x12010>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12049>
	cmpb   $0x8,-0x9e3(%rbp)
	jne    <read_core_chunk+0x12022>
	addl   $0x3,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12049>
	call   <abort@plt>
	movzbl -0x9e4(%rbp),%eax
	mov    %eax,%esi
	lea    0x267a5(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x120ba>
	movzbl -0x9e4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x12061>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1206a>
	jmp    <read_core_chunk+0x12080>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12080>
	movzbl -0x9e4(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x77c(%rbp)
	jmp    <read_core_chunk+0x120ba>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x120ba>
	movzbl -0x9e4(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x37224(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2674d(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9e2(%rbp)
	movzbl -0x9e2(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x12293>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x27b35(%rip),%rax        # <_IO_stdin_used+0x39f4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x27b29(%rip),%rdx        # <_IO_stdin_used+0x39f4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9e2(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x12138>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x12196>
	test   %eax,%eax
	je     <read_core_chunk+0x12138>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1215c>
	jmp    <read_core_chunk+0x12196>
	movzbl -0x9e2(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x230(%rbp)
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x121c0>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x230(%rbp)
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x121c0>
	movzbl -0x9e2(%rbp),%edx
	mov    0x3711e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x265ff(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x122c2>
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x122c2>
	movzbl -0x9e2(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x1222f>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9e1(%rbp)
	cmpb   $0x0,-0x9e1(%rbp)
	jne    <read_core_chunk+0x12218>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12251>
	cmpb   $0x8,-0x9e1(%rbp)
	jne    <read_core_chunk+0x1222a>
	addl   $0x3,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12251>
	call   <abort@plt>
	movzbl -0x9e2(%rbp),%eax
	mov    %eax,%esi
	lea    0x2659d(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x122c2>
	movzbl -0x9e2(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x12269>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x12272>
	jmp    <read_core_chunk+0x12288>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12288>
	movzbl -0x9e2(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x77c(%rbp)
	jmp    <read_core_chunk+0x122c2>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x122c2>
	movzbl -0x9e2(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3701c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26545(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9e0(%rbp)
	movzbl -0x9e0(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1249b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x27961(%rip),%rax        # <_IO_stdin_used+0x3a28>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x27955(%rip),%rdx        # <_IO_stdin_used+0x3a28>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9e0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x12340>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1239e>
	test   %eax,%eax
	je     <read_core_chunk+0x12340>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x12364>
	jmp    <read_core_chunk+0x1239e>
	movzbl -0x9e0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x228(%rbp)
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x123c8>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x228(%rbp)
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x123c8>
	movzbl -0x9e0(%rbp),%edx
	mov    0x36f16(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x263f7(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x124ca>
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x124ca>
	movzbl -0x9e0(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x12437>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9df(%rbp)
	cmpb   $0x0,-0x9df(%rbp)
	jne    <read_core_chunk+0x12420>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12459>
	cmpb   $0x8,-0x9df(%rbp)
	jne    <read_core_chunk+0x12432>
	addl   $0x3,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12459>
	call   <abort@plt>
	movzbl -0x9e0(%rbp),%eax
	mov    %eax,%esi
	lea    0x26395(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x124ca>
	movzbl -0x9e0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x12471>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1247a>
	jmp    <read_core_chunk+0x12490>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12490>
	movzbl -0x9e0(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x77c(%rbp)
	jmp    <read_core_chunk+0x124ca>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x124ca>
	movzbl -0x9e0(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x36e14(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2633d(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9de(%rbp)
	movzbl -0x9de(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x12512>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x12577>
	test   %eax,%eax
	je     <read_core_chunk+0x12512>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1252f>
	jmp    <read_core_chunk+0x12577>
	movzbl -0x9de(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x220(%rbp)
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x125a1>
	movzbl -0x9de(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x220(%rbp)
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x125a1>
	movzbl -0x9de(%rbp),%edx
	mov    0x36d3d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x261e6(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9dd(%rbp)
	movzbl -0x9dd(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1277a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x276b6(%rip),%rax        # <_IO_stdin_used+0x3a5c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x276aa(%rip),%rdx        # <_IO_stdin_used+0x3a5c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9dd(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1261f>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1267d>
	test   %eax,%eax
	je     <read_core_chunk+0x1261f>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x12643>
	jmp    <read_core_chunk+0x1267d>
	movzbl -0x9dd(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x218(%rbp)
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x126a7>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x218(%rbp)
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x126a7>
	movzbl -0x9dd(%rbp),%edx
	mov    0x36c37(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x26118(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x127a9>
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x127a9>
	movzbl -0x9dd(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x12716>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9dc(%rbp)
	cmpb   $0x0,-0x9dc(%rbp)
	jne    <read_core_chunk+0x126ff>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12738>
	cmpb   $0x8,-0x9dc(%rbp)
	jne    <read_core_chunk+0x12711>
	addl   $0x3,-0x77c(%rbp)
	jmp    <read_core_chunk+0x12738>
	call   <abort@plt>
	movzbl -0x9dd(%rbp),%eax
	mov    %eax,%esi
	lea    0x260b6(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x127a9>
	movzbl -0x9dd(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x12750>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x12759>
	jmp    <read_core_chunk+0x1276f>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x1276f>
	movzbl -0x9dd(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x77c(%rbp)
	jmp    <read_core_chunk+0x127a9>
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x127a9>
	movzbl -0x9dd(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x36b35(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2605e(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9db(%rbp)
	movzbl -0x9db(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x9da(%rbp)
	movzbl -0x9da(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x9da(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x127fc>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x12803>
	jmp    <read_core_chunk+0x1287a>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x12835>
	jmp    <read_core_chunk+0x1287a>
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5dc(%rbp)
	addl   $0x1,-0x77c(%rbp)
	jmp    <read_core_chunk+0x1287f>
	movzbl -0x9db(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x77c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5dc(%rbp)
	addl   $0x2,-0x77c(%rbp)
	jmp    <read_core_chunk+0x1287f>
	call   <abort@plt>
	mov    -0x77c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x778(%rbp)
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9f1(%rbp)
	movzbl -0x9f1(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x128e2>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x12943>
	test   %eax,%eax
	je     <read_core_chunk+0x128e2>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x128fe>
	jmp    <read_core_chunk+0x12943>
	movzbl -0x9f1(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5ec(%rbp)
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x1296d>
	movzbl -0x9f1(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5ec(%rbp)
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x1296d>
	movzbl -0x9f1(%rbp),%edx
	mov    0x36971(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25de2(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x778(%rbp),%eax
	mov    %eax,-0x5e8(%rbp)
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9f0(%rbp)
	movzbl -0x9f0(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x12b52>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x27312(%rip),%rax        # <_IO_stdin_used+0x3a90>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x27306(%rip),%rdx        # <_IO_stdin_used+0x3a90>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9f0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x129f7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x12a55>
	test   %eax,%eax
	je     <read_core_chunk+0x129f7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x12a1b>
	jmp    <read_core_chunk+0x12a55>
	movzbl -0x9f0(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x260(%rbp)
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x12a7f>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x260(%rbp)
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12a7f>
	movzbl -0x9f0(%rbp),%edx
	mov    0x3685f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25d40(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x12b81>
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x12b81>
	movzbl -0x9f0(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x12aee>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9ef(%rbp)
	cmpb   $0x0,-0x9ef(%rbp)
	jne    <read_core_chunk+0x12ad7>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12b10>
	cmpb   $0x8,-0x9ef(%rbp)
	jne    <read_core_chunk+0x12ae9>
	addl   $0x3,-0x778(%rbp)
	jmp    <read_core_chunk+0x12b10>
	call   <abort@plt>
	movzbl -0x9f0(%rbp),%eax
	mov    %eax,%esi
	lea    0x25cde(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x12b81>
	movzbl -0x9f0(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x12b28>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x12b31>
	jmp    <read_core_chunk+0x12b47>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12b47>
	movzbl -0x9f0(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x778(%rbp)
	jmp    <read_core_chunk+0x12b81>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12b81>
	movzbl -0x9f0(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3675d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25c86(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9ee(%rbp)
	movzbl -0x9ee(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x12d5a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2713e(%rip),%rax        # <_IO_stdin_used+0x3ac4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x27132(%rip),%rdx        # <_IO_stdin_used+0x3ac4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9ee(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x12bff>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x12c5d>
	test   %eax,%eax
	je     <read_core_chunk+0x12bff>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x12c23>
	jmp    <read_core_chunk+0x12c5d>
	movzbl -0x9ee(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x258(%rbp)
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x12c87>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x258(%rbp)
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12c87>
	movzbl -0x9ee(%rbp),%edx
	mov    0x36657(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25b38(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x12d89>
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x12d89>
	movzbl -0x9ee(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x12cf6>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9ed(%rbp)
	cmpb   $0x0,-0x9ed(%rbp)
	jne    <read_core_chunk+0x12cdf>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12d18>
	cmpb   $0x8,-0x9ed(%rbp)
	jne    <read_core_chunk+0x12cf1>
	addl   $0x3,-0x778(%rbp)
	jmp    <read_core_chunk+0x12d18>
	call   <abort@plt>
	movzbl -0x9ee(%rbp),%eax
	mov    %eax,%esi
	lea    0x25ad6(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x12d89>
	movzbl -0x9ee(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x12d30>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x12d39>
	jmp    <read_core_chunk+0x12d4f>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12d4f>
	movzbl -0x9ee(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x778(%rbp)
	jmp    <read_core_chunk+0x12d89>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12d89>
	movzbl -0x9ee(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x36555(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25a7e(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9ec(%rbp)
	movzbl -0x9ec(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x12f62>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x26f6a(%rip),%rax        # <_IO_stdin_used+0x3af8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x26f5e(%rip),%rdx        # <_IO_stdin_used+0x3af8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9ec(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x12e07>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x12e65>
	test   %eax,%eax
	je     <read_core_chunk+0x12e07>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x12e2b>
	jmp    <read_core_chunk+0x12e65>
	movzbl -0x9ec(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x250(%rbp)
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x12e8f>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x250(%rbp)
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12e8f>
	movzbl -0x9ec(%rbp),%edx
	mov    0x3644f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25930(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x12f91>
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x12f91>
	movzbl -0x9ec(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x12efe>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9eb(%rbp)
	cmpb   $0x0,-0x9eb(%rbp)
	jne    <read_core_chunk+0x12ee7>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12f20>
	cmpb   $0x8,-0x9eb(%rbp)
	jne    <read_core_chunk+0x12ef9>
	addl   $0x3,-0x778(%rbp)
	jmp    <read_core_chunk+0x12f20>
	call   <abort@plt>
	movzbl -0x9ec(%rbp),%eax
	mov    %eax,%esi
	lea    0x258ce(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x12f91>
	movzbl -0x9ec(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x12f38>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x12f41>
	jmp    <read_core_chunk+0x12f57>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12f57>
	movzbl -0x9ec(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x778(%rbp)
	jmp    <read_core_chunk+0x12f91>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x12f91>
	movzbl -0x9ec(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3634d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25876(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9ea(%rbp)
	movzbl -0x9ea(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x12fd9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1303e>
	test   %eax,%eax
	je     <read_core_chunk+0x12fd9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x12ff6>
	jmp    <read_core_chunk+0x1303e>
	movzbl -0x9ea(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %rax,-0x248(%rbp)
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x13068>
	movzbl -0x9ea(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	cltq   
	mov    %rax,-0x248(%rbp)
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x13068>
	movzbl -0x9ea(%rbp),%edx
	mov    0x36276(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2571f(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9e9(%rbp)
	movzbl -0x9e9(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x13241>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x26cbf(%rip),%rax        # <_IO_stdin_used+0x3b2c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x26cb3(%rip),%rdx        # <_IO_stdin_used+0x3b2c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9e9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x130e6>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x13144>
	test   %eax,%eax
	je     <read_core_chunk+0x130e6>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1310a>
	jmp    <read_core_chunk+0x13144>
	movzbl -0x9e9(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x240(%rbp)
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x1316e>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x240(%rbp)
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x1316e>
	movzbl -0x9e9(%rbp),%edx
	mov    0x36170(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25651(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x13270>
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x13270>
	movzbl -0x9e9(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x131dd>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9e8(%rbp)
	cmpb   $0x0,-0x9e8(%rbp)
	jne    <read_core_chunk+0x131c6>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x131ff>
	cmpb   $0x8,-0x9e8(%rbp)
	jne    <read_core_chunk+0x131d8>
	addl   $0x3,-0x778(%rbp)
	jmp    <read_core_chunk+0x131ff>
	call   <abort@plt>
	movzbl -0x9e9(%rbp),%eax
	mov    %eax,%esi
	lea    0x255ef(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x13270>
	movzbl -0x9e9(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x13217>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x13220>
	jmp    <read_core_chunk+0x13236>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x13236>
	movzbl -0x9e9(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x778(%rbp)
	jmp    <read_core_chunk+0x13270>
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x13270>
	movzbl -0x9e9(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3606e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25597(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9e7(%rbp)
	movzbl -0x9e7(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0x9e6(%rbp)
	movzbl -0x9e6(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0x9e6(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x132c3>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x132ca>
	jmp    <read_core_chunk+0x13341>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x132fc>
	jmp    <read_core_chunk+0x13341>
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5e4(%rbp)
	addl   $0x1,-0x778(%rbp)
	jmp    <read_core_chunk+0x13346>
	movzbl -0x9e7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x778(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5e4(%rbp)
	addl   $0x2,-0x778(%rbp)
	jmp    <read_core_chunk+0x13346>
	call   <abort@plt>
	mov    -0x778(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x774(%rbp)
	mov    -0x774(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa1a(%rbp)
	movzbl -0xa1a(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa19(%rbp)
	movzbl -0xa19(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa19(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x133b4>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x133bb>
	jmp    <read_core_chunk+0x13432>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x133ed>
	jmp    <read_core_chunk+0x13432>
	mov    -0x774(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x61c(%rbp)
	addl   $0x1,-0x774(%rbp)
	jmp    <read_core_chunk+0x13437>
	movzbl -0xa1a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x774(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x61c(%rbp)
	addl   $0x2,-0x774(%rbp)
	jmp    <read_core_chunk+0x13437>
	call   <abort@plt>
	mov    -0x774(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x770(%rbp)
	mov    -0x770(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9c7(%rbp)
	movzbl -0x9c7(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1349a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x134fb>
	test   %eax,%eax
	je     <read_core_chunk+0x1349a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x134b6>
	jmp    <read_core_chunk+0x134fb>
	movzbl -0x9c7(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5bc(%rbp)
	addl   $0x1,-0x770(%rbp)
	jmp    <read_core_chunk+0x13525>
	movzbl -0x9c7(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x770(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5bc(%rbp)
	addl   $0x2,-0x770(%rbp)
	jmp    <read_core_chunk+0x13525>
	movzbl -0x9c7(%rbp),%edx
	mov    0x35db9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25262(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x770(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x76c(%rbp)
	mov    -0x76c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9c9(%rbp)
	movzbl -0x9c9(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13588>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x135e9>
	test   %eax,%eax
	je     <read_core_chunk+0x13588>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x135a4>
	jmp    <read_core_chunk+0x135e9>
	movzbl -0x9c9(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5c4(%rbp)
	addl   $0x1,-0x76c(%rbp)
	jmp    <read_core_chunk+0x13613>
	movzbl -0x9c9(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x76c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5c4(%rbp)
	addl   $0x2,-0x76c(%rbp)
	jmp    <read_core_chunk+0x13613>
	movzbl -0x9c9(%rbp),%edx
	mov    0x35ccb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x25174(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x76c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9c8(%rbp)
	movzbl -0x9c8(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1365b>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x136bc>
	test   %eax,%eax
	je     <read_core_chunk+0x1365b>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13677>
	jmp    <read_core_chunk+0x136bc>
	movzbl -0x9c8(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5c0(%rbp)
	addl   $0x1,-0x76c(%rbp)
	jmp    <read_core_chunk+0x136e6>
	movzbl -0x9c8(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x76c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5c0(%rbp)
	addl   $0x2,-0x76c(%rbp)
	jmp    <read_core_chunk+0x136e6>
	movzbl -0x9c8(%rbp),%edx
	mov    0x35bf8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x250a1(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x76c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x768(%rbp)
	mov    -0x768(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9cc(%rbp)
	movzbl -0x9cc(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13749>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x137aa>
	test   %eax,%eax
	je     <read_core_chunk+0x13749>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13765>
	jmp    <read_core_chunk+0x137aa>
	movzbl -0x9cc(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5c8(%rbp)
	addl   $0x1,-0x768(%rbp)
	jmp    <read_core_chunk+0x137d4>
	movzbl -0x9cc(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x768(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5c8(%rbp)
	addl   $0x2,-0x768(%rbp)
	jmp    <read_core_chunk+0x137d4>
	movzbl -0x9cc(%rbp),%edx
	mov    0x35b0a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24f7b(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x768(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9cb(%rbp)
	movzbl -0x9cb(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x139ad>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x26587(%rip),%rax        # <_IO_stdin_used+0x3b60>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2657b(%rip),%rdx        # <_IO_stdin_used+0x3b60>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9cb(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13852>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x138b0>
	test   %eax,%eax
	je     <read_core_chunk+0x13852>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13876>
	jmp    <read_core_chunk+0x138b0>
	movzbl -0x9cb(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1f0(%rbp)
	addl   $0x1,-0x768(%rbp)
	jmp    <read_core_chunk+0x138da>
	mov    -0x768(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1f0(%rbp)
	addl   $0x2,-0x768(%rbp)
	jmp    <read_core_chunk+0x138da>
	movzbl -0x9cb(%rbp),%edx
	mov    0x35a04(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24ee5(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x139dc>
	addl   $0x1,-0x768(%rbp)
	jmp    <read_core_chunk+0x139dc>
	movzbl -0x9cb(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x13949>
	mov    -0x768(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9ca(%rbp)
	cmpb   $0x0,-0x9ca(%rbp)
	jne    <read_core_chunk+0x13932>
	addl   $0x2,-0x768(%rbp)
	jmp    <read_core_chunk+0x1396b>
	cmpb   $0x8,-0x9ca(%rbp)
	jne    <read_core_chunk+0x13944>
	addl   $0x3,-0x768(%rbp)
	jmp    <read_core_chunk+0x1396b>
	call   <abort@plt>
	movzbl -0x9cb(%rbp),%eax
	mov    %eax,%esi
	lea    0x24e83(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x139dc>
	movzbl -0x9cb(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x13983>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1398c>
	jmp    <read_core_chunk+0x139a2>
	addl   $0x2,-0x768(%rbp)
	jmp    <read_core_chunk+0x139a2>
	movzbl -0x9cb(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x768(%rbp)
	jmp    <read_core_chunk+0x139dc>
	addl   $0x2,-0x768(%rbp)
	jmp    <read_core_chunk+0x139dc>
	movzbl -0x9cb(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x35902(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24e2b(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x768(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x764(%rbp)
	mov    -0x764(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9d0(%rbp)
	movzbl -0x9d0(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13a3f>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x13aa0>
	test   %eax,%eax
	je     <read_core_chunk+0x13a3f>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13a5b>
	jmp    <read_core_chunk+0x13aa0>
	movzbl -0x9d0(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5d0(%rbp)
	addl   $0x1,-0x764(%rbp)
	jmp    <read_core_chunk+0x13aca>
	movzbl -0x9d0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x764(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5d0(%rbp)
	addl   $0x2,-0x764(%rbp)
	jmp    <read_core_chunk+0x13aca>
	movzbl -0x9d0(%rbp),%edx
	mov    0x35814(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24c85(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x764(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9cf(%rbp)
	movzbl -0x9cf(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x13ca3>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x262c5(%rip),%rax        # <_IO_stdin_used+0x3b94>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x262b9(%rip),%rdx        # <_IO_stdin_used+0x3b94>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0x9cf(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13b48>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x13ba6>
	test   %eax,%eax
	je     <read_core_chunk+0x13b48>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13b6c>
	jmp    <read_core_chunk+0x13ba6>
	movzbl -0x9cf(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1f8(%rbp)
	addl   $0x1,-0x764(%rbp)
	jmp    <read_core_chunk+0x13bd0>
	mov    -0x764(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x1f8(%rbp)
	addl   $0x2,-0x764(%rbp)
	jmp    <read_core_chunk+0x13bd0>
	movzbl -0x9cf(%rbp),%edx
	mov    0x3570e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24bef(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x13cd2>
	addl   $0x1,-0x764(%rbp)
	jmp    <read_core_chunk+0x13cd2>
	movzbl -0x9cf(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x13c3f>
	mov    -0x764(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0x9ce(%rbp)
	cmpb   $0x0,-0x9ce(%rbp)
	jne    <read_core_chunk+0x13c28>
	addl   $0x2,-0x764(%rbp)
	jmp    <read_core_chunk+0x13c61>
	cmpb   $0x8,-0x9ce(%rbp)
	jne    <read_core_chunk+0x13c3a>
	addl   $0x3,-0x764(%rbp)
	jmp    <read_core_chunk+0x13c61>
	call   <abort@plt>
	movzbl -0x9cf(%rbp),%eax
	mov    %eax,%esi
	lea    0x24b8d(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x13cd2>
	movzbl -0x9cf(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x13c79>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x13c82>
	jmp    <read_core_chunk+0x13c98>
	addl   $0x2,-0x764(%rbp)
	jmp    <read_core_chunk+0x13c98>
	movzbl -0x9cf(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x764(%rbp)
	jmp    <read_core_chunk+0x13cd2>
	addl   $0x2,-0x764(%rbp)
	jmp    <read_core_chunk+0x13cd2>
	movzbl -0x9cf(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3560c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24b35(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x764(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x9cd(%rbp)
	movzbl -0x9cd(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13d1a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x13d7b>
	test   %eax,%eax
	je     <read_core_chunk+0x13d1a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13d36>
	jmp    <read_core_chunk+0x13d7b>
	movzbl -0x9cd(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5cc(%rbp)
	addl   $0x1,-0x764(%rbp)
	jmp    <read_core_chunk+0x13da5>
	movzbl -0x9cd(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x764(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5cc(%rbp)
	addl   $0x2,-0x764(%rbp)
	jmp    <read_core_chunk+0x13da5>
	movzbl -0x9cd(%rbp),%edx
	mov    0x35539(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x249e2(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x764(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x760(%rbp)
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa0c(%rbp)
	movzbl -0xa0c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13e08>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x13e69>
	test   %eax,%eax
	je     <read_core_chunk+0x13e08>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13e24>
	jmp    <read_core_chunk+0x13e69>
	movzbl -0xa0c(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x604(%rbp)
	addl   $0x1,-0x760(%rbp)
	jmp    <read_core_chunk+0x13e93>
	movzbl -0xa0c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x604(%rbp)
	addl   $0x2,-0x760(%rbp)
	jmp    <read_core_chunk+0x13e93>
	movzbl -0xa0c(%rbp),%edx
	mov    0x3544b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x248bc(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa0b(%rbp)
	movzbl -0xa0b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13edb>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x13f3c>
	test   %eax,%eax
	je     <read_core_chunk+0x13edb>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13ef7>
	jmp    <read_core_chunk+0x13f3c>
	movzbl -0xa0b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x600(%rbp)
	addl   $0x1,-0x760(%rbp)
	jmp    <read_core_chunk+0x13f66>
	movzbl -0xa0b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x600(%rbp)
	addl   $0x2,-0x760(%rbp)
	jmp    <read_core_chunk+0x13f66>
	movzbl -0xa0b(%rbp),%edx
	mov    0x35378(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24821(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa0a(%rbp)
	movzbl -0xa0a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x13fae>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1400f>
	test   %eax,%eax
	je     <read_core_chunk+0x13fae>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x13fca>
	jmp    <read_core_chunk+0x1400f>
	movzbl -0xa0a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5fc(%rbp)
	addl   $0x1,-0x760(%rbp)
	jmp    <read_core_chunk+0x14039>
	movzbl -0xa0a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5fc(%rbp)
	addl   $0x2,-0x760(%rbp)
	jmp    <read_core_chunk+0x14039>
	movzbl -0xa0a(%rbp),%edx
	mov    0x352a5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2474e(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa09(%rbp)
	movzbl -0xa09(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x14212>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x25d8a(%rip),%rax        # <_IO_stdin_used+0x3bc8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x25d7e(%rip),%rdx        # <_IO_stdin_used+0x3bc8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa09(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x140b7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x14115>
	test   %eax,%eax
	je     <read_core_chunk+0x140b7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x140db>
	jmp    <read_core_chunk+0x14115>
	movzbl -0xa09(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2b8(%rbp)
	addl   $0x1,-0x760(%rbp)
	jmp    <read_core_chunk+0x1413f>
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2b8(%rbp)
	addl   $0x2,-0x760(%rbp)
	jmp    <read_core_chunk+0x1413f>
	movzbl -0xa09(%rbp),%edx
	mov    0x3519f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24680(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x14241>
	addl   $0x1,-0x760(%rbp)
	jmp    <read_core_chunk+0x14241>
	movzbl -0xa09(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x141ae>
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa08(%rbp)
	cmpb   $0x0,-0xa08(%rbp)
	jne    <read_core_chunk+0x14197>
	addl   $0x2,-0x760(%rbp)
	jmp    <read_core_chunk+0x141d0>
	cmpb   $0x8,-0xa08(%rbp)
	jne    <read_core_chunk+0x141a9>
	addl   $0x3,-0x760(%rbp)
	jmp    <read_core_chunk+0x141d0>
	call   <abort@plt>
	movzbl -0xa09(%rbp),%eax
	mov    %eax,%esi
	lea    0x2461e(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x14241>
	movzbl -0xa09(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x141e8>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x141f1>
	jmp    <read_core_chunk+0x14207>
	addl   $0x2,-0x760(%rbp)
	jmp    <read_core_chunk+0x14207>
	movzbl -0xa09(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x760(%rbp)
	jmp    <read_core_chunk+0x14241>
	addl   $0x2,-0x760(%rbp)
	jmp    <read_core_chunk+0x14241>
	movzbl -0xa09(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3509d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x245c6(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa07(%rbp)
	movzbl -0xa07(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa06(%rbp)
	movzbl -0xa06(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa06(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x14294>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x1429b>
	jmp    <read_core_chunk+0x14312>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x142cd>
	jmp    <read_core_chunk+0x14312>
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x5f8(%rbp)
	addl   $0x1,-0x760(%rbp)
	jmp    <read_core_chunk+0x14317>
	movzbl -0xa07(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x760(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x5f8(%rbp)
	addl   $0x2,-0x760(%rbp)
	jmp    <read_core_chunk+0x14317>
	call   <abort@plt>
	mov    -0x760(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x75c(%rbp)
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa15(%rbp)
	movzbl -0xa15(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1437a>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x143db>
	test   %eax,%eax
	je     <read_core_chunk+0x1437a>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x14396>
	jmp    <read_core_chunk+0x143db>
	movzbl -0xa15(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x614(%rbp)
	addl   $0x1,-0x75c(%rbp)
	jmp    <read_core_chunk+0x14405>
	movzbl -0xa15(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x614(%rbp)
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x14405>
	movzbl -0xa15(%rbp),%edx
	mov    0x34ed9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2434a(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa14(%rbp)
	movzbl -0xa14(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1444d>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x144ae>
	test   %eax,%eax
	je     <read_core_chunk+0x1444d>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x14469>
	jmp    <read_core_chunk+0x144ae>
	movzbl -0xa14(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x610(%rbp)
	addl   $0x1,-0x75c(%rbp)
	jmp    <read_core_chunk+0x144d8>
	movzbl -0xa14(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x610(%rbp)
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x144d8>
	movzbl -0xa14(%rbp),%edx
	mov    0x34e06(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x242af(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa13(%rbp)
	movzbl -0xa13(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x14520>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x14581>
	test   %eax,%eax
	je     <read_core_chunk+0x14520>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1453c>
	jmp    <read_core_chunk+0x14581>
	movzbl -0xa13(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x60c(%rbp)
	addl   $0x1,-0x75c(%rbp)
	jmp    <read_core_chunk+0x145ab>
	movzbl -0xa13(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x60c(%rbp)
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x145ab>
	movzbl -0xa13(%rbp),%edx
	mov    0x34d33(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x241dc(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa12(%rbp)
	movzbl -0xa12(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x14784>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2584c(%rip),%rax        # <_IO_stdin_used+0x3bfc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x25840(%rip),%rdx        # <_IO_stdin_used+0x3bfc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa12(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x14629>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x14687>
	test   %eax,%eax
	je     <read_core_chunk+0x14629>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1464d>
	jmp    <read_core_chunk+0x14687>
	movzbl -0xa12(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2c8(%rbp)
	addl   $0x1,-0x75c(%rbp)
	jmp    <read_core_chunk+0x146b1>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2c8(%rbp)
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x146b1>
	movzbl -0xa12(%rbp),%edx
	mov    0x34c2d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2410e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x147b3>
	addl   $0x1,-0x75c(%rbp)
	jmp    <read_core_chunk+0x147b3>
	movzbl -0xa12(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x14720>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa11(%rbp)
	cmpb   $0x0,-0xa11(%rbp)
	jne    <read_core_chunk+0x14709>
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x14742>
	cmpb   $0x8,-0xa11(%rbp)
	jne    <read_core_chunk+0x1471b>
	addl   $0x3,-0x75c(%rbp)
	jmp    <read_core_chunk+0x14742>
	call   <abort@plt>
	movzbl -0xa12(%rbp),%eax
	mov    %eax,%esi
	lea    0x240ac(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x147b3>
	movzbl -0xa12(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x1475a>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x14763>
	jmp    <read_core_chunk+0x14779>
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x14779>
	movzbl -0xa12(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x75c(%rbp)
	jmp    <read_core_chunk+0x147b3>
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x147b3>
	movzbl -0xa12(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x34b2b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x24054(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa10(%rbp)
	movzbl -0xa10(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1498c>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x25678(%rip),%rax        # <_IO_stdin_used+0x3c30>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x2566c(%rip),%rdx        # <_IO_stdin_used+0x3c30>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa10(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x14831>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1488f>
	test   %eax,%eax
	je     <read_core_chunk+0x14831>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x14855>
	jmp    <read_core_chunk+0x1488f>
	movzbl -0xa10(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2c0(%rbp)
	addl   $0x1,-0x75c(%rbp)
	jmp    <read_core_chunk+0x148b9>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2c0(%rbp)
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x148b9>
	movzbl -0xa10(%rbp),%edx
	mov    0x34a25(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x23f06(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x149bb>
	addl   $0x1,-0x75c(%rbp)
	jmp    <read_core_chunk+0x149bb>
	movzbl -0xa10(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x14928>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa0f(%rbp)
	cmpb   $0x0,-0xa0f(%rbp)
	jne    <read_core_chunk+0x14911>
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x1494a>
	cmpb   $0x8,-0xa0f(%rbp)
	jne    <read_core_chunk+0x14923>
	addl   $0x3,-0x75c(%rbp)
	jmp    <read_core_chunk+0x1494a>
	call   <abort@plt>
	movzbl -0xa10(%rbp),%eax
	mov    %eax,%esi
	lea    0x23ea4(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x149bb>
	movzbl -0xa10(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x14962>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1496b>
	jmp    <read_core_chunk+0x14981>
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x14981>
	movzbl -0xa10(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x75c(%rbp)
	jmp    <read_core_chunk+0x149bb>
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x149bb>
	movzbl -0xa10(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x34923(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x23e4c(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa0e(%rbp)
	movzbl -0xa0e(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa0d(%rbp)
	movzbl -0xa0d(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa0d(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x14a0e>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x14a15>
	jmp    <read_core_chunk+0x14a8c>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x14a47>
	jmp    <read_core_chunk+0x14a8c>
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x608(%rbp)
	addl   $0x1,-0x75c(%rbp)
	jmp    <read_core_chunk+0x14a91>
	movzbl -0xa0e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x75c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x608(%rbp)
	addl   $0x2,-0x75c(%rbp)
	jmp    <read_core_chunk+0x14a91>
	call   <abort@plt>
	mov    -0x75c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x758(%rbp)
	mov    -0x758(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa18(%rbp)
	movzbl -0xa18(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x14af4>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x14b55>
	test   %eax,%eax
	je     <read_core_chunk+0x14af4>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x14b10>
	jmp    <read_core_chunk+0x14b55>
	movzbl -0xa18(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x618(%rbp)
	addl   $0x1,-0x758(%rbp)
	jmp    <read_core_chunk+0x14b7f>
	movzbl -0xa18(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x758(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x618(%rbp)
	addl   $0x2,-0x758(%rbp)
	jmp    <read_core_chunk+0x14b7f>
	movzbl -0xa18(%rbp),%edx
	mov    0x3475f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x23bd0(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x758(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa17(%rbp)
	movzbl -0xa17(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x14d58>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x252e0(%rip),%rax        # <_IO_stdin_used+0x3c64>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x252d4(%rip),%rdx        # <_IO_stdin_used+0x3c64>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa17(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x14bfd>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x14c5b>
	test   %eax,%eax
	je     <read_core_chunk+0x14bfd>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x14c21>
	jmp    <read_core_chunk+0x14c5b>
	movzbl -0xa17(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2d0(%rbp)
	addl   $0x1,-0x758(%rbp)
	jmp    <read_core_chunk+0x14c85>
	mov    -0x758(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x2d0(%rbp)
	addl   $0x2,-0x758(%rbp)
	jmp    <read_core_chunk+0x14c85>
	movzbl -0xa17(%rbp),%edx
	mov    0x34659(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x23b3a(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x14d87>
	addl   $0x1,-0x758(%rbp)
	jmp    <read_core_chunk+0x14d87>
	movzbl -0xa17(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x14cf4>
	mov    -0x758(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa16(%rbp)
	cmpb   $0x0,-0xa16(%rbp)
	jne    <read_core_chunk+0x14cdd>
	addl   $0x2,-0x758(%rbp)
	jmp    <read_core_chunk+0x14d16>
	cmpb   $0x8,-0xa16(%rbp)
	jne    <read_core_chunk+0x14cef>
	addl   $0x3,-0x758(%rbp)
	jmp    <read_core_chunk+0x14d16>
	call   <abort@plt>
	movzbl -0xa17(%rbp),%eax
	mov    %eax,%esi
	lea    0x23ad8(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x14d87>
	movzbl -0xa17(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x14d2e>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x14d37>
	jmp    <read_core_chunk+0x14d4d>
	addl   $0x2,-0x758(%rbp)
	jmp    <read_core_chunk+0x14d4d>
	movzbl -0xa17(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x758(%rbp)
	jmp    <read_core_chunk+0x14d87>
	addl   $0x2,-0x758(%rbp)
	jmp    <read_core_chunk+0x14d87>
	movzbl -0xa17(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x34557(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x23a80(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x758(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x754(%rbp)
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa49(%rbp)
	movzbl -0xa49(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x14dea>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x14e4b>
	test   %eax,%eax
	je     <read_core_chunk+0x14dea>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x14e06>
	jmp    <read_core_chunk+0x14e4b>
	movzbl -0xa49(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x660(%rbp)
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x14e75>
	movzbl -0xa49(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x660(%rbp)
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x14e75>
	movzbl -0xa49(%rbp),%edx
	mov    0x34469(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x238da(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa48(%rbp)
	movzbl -0xa48(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x14ebd>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x14f1e>
	test   %eax,%eax
	je     <read_core_chunk+0x14ebd>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x14ed9>
	jmp    <read_core_chunk+0x14f1e>
	movzbl -0xa48(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x65c(%rbp)
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x14f48>
	movzbl -0xa48(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x65c(%rbp)
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x14f48>
	movzbl -0xa48(%rbp),%edx
	mov    0x34396(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2383f(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa47(%rbp)
	movzbl -0xa47(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x14f90>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x14ff1>
	test   %eax,%eax
	je     <read_core_chunk+0x14f90>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x14fac>
	jmp    <read_core_chunk+0x14ff1>
	movzbl -0xa47(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x658(%rbp)
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x1501b>
	movzbl -0xa47(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x658(%rbp)
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x1501b>
	movzbl -0xa47(%rbp),%edx
	mov    0x342c3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2376c(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa46(%rbp)
	movzbl -0xa46(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x151f4>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x24e78(%rip),%rax        # <_IO_stdin_used+0x3c98>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x24e6c(%rip),%rdx        # <_IO_stdin_used+0x3c98>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa46(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x15099>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x150f7>
	test   %eax,%eax
	je     <read_core_chunk+0x15099>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x150bd>
	jmp    <read_core_chunk+0x150f7>
	movzbl -0xa46(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x350(%rbp)
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x15121>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x350(%rbp)
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x15121>
	movzbl -0xa46(%rbp),%edx
	mov    0x341bd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2369e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x15223>
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x15223>
	movzbl -0xa46(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x15190>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa45(%rbp)
	cmpb   $0x0,-0xa45(%rbp)
	jne    <read_core_chunk+0x15179>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x151b2>
	cmpb   $0x8,-0xa45(%rbp)
	jne    <read_core_chunk+0x1518b>
	addl   $0x3,-0x754(%rbp)
	jmp    <read_core_chunk+0x151b2>
	call   <abort@plt>
	movzbl -0xa46(%rbp),%eax
	mov    %eax,%esi
	lea    0x2363c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x15223>
	movzbl -0xa46(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x151ca>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x151d3>
	jmp    <read_core_chunk+0x151e9>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x151e9>
	movzbl -0xa46(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x754(%rbp)
	jmp    <read_core_chunk+0x15223>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x15223>
	movzbl -0xa46(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x340bb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x235e4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa44(%rbp)
	movzbl -0xa44(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x153fc>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x24ca4(%rip),%rax        # <_IO_stdin_used+0x3ccc>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x24c98(%rip),%rdx        # <_IO_stdin_used+0x3ccc>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa44(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x152a1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x152ff>
	test   %eax,%eax
	je     <read_core_chunk+0x152a1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x152c5>
	jmp    <read_core_chunk+0x152ff>
	movzbl -0xa44(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x348(%rbp)
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x15329>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x348(%rbp)
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x15329>
	movzbl -0xa44(%rbp),%edx
	mov    0x33fb5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x23496(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1542b>
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x1542b>
	movzbl -0xa44(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x15398>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa43(%rbp)
	cmpb   $0x0,-0xa43(%rbp)
	jne    <read_core_chunk+0x15381>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x153ba>
	cmpb   $0x8,-0xa43(%rbp)
	jne    <read_core_chunk+0x15393>
	addl   $0x3,-0x754(%rbp)
	jmp    <read_core_chunk+0x153ba>
	call   <abort@plt>
	movzbl -0xa44(%rbp),%eax
	mov    %eax,%esi
	lea    0x23434(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1542b>
	movzbl -0xa44(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x153d2>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x153db>
	jmp    <read_core_chunk+0x153f1>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x153f1>
	movzbl -0xa44(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x754(%rbp)
	jmp    <read_core_chunk+0x1542b>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x1542b>
	movzbl -0xa44(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x33eb3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x233dc(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa42(%rbp)
	movzbl -0xa42(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x15604>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x24ad0(%rip),%rax        # <_IO_stdin_used+0x3d00>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x24ac4(%rip),%rdx        # <_IO_stdin_used+0x3d00>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa42(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x154a9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x15507>
	test   %eax,%eax
	je     <read_core_chunk+0x154a9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x154cd>
	jmp    <read_core_chunk+0x15507>
	movzbl -0xa42(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x340(%rbp)
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x15531>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x340(%rbp)
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x15531>
	movzbl -0xa42(%rbp),%edx
	mov    0x33dad(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2328e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x15633>
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x15633>
	movzbl -0xa42(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x155a0>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa41(%rbp)
	cmpb   $0x0,-0xa41(%rbp)
	jne    <read_core_chunk+0x15589>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x155c2>
	cmpb   $0x8,-0xa41(%rbp)
	jne    <read_core_chunk+0x1559b>
	addl   $0x3,-0x754(%rbp)
	jmp    <read_core_chunk+0x155c2>
	call   <abort@plt>
	movzbl -0xa42(%rbp),%eax
	mov    %eax,%esi
	lea    0x2322c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x15633>
	movzbl -0xa42(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x155da>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x155e3>
	jmp    <read_core_chunk+0x155f9>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x155f9>
	movzbl -0xa42(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x754(%rbp)
	jmp    <read_core_chunk+0x15633>
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x15633>
	movzbl -0xa42(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x33cab(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x231d4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa40(%rbp)
	movzbl -0xa40(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa3f(%rbp)
	movzbl -0xa3f(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa3f(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x15686>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x1568d>
	jmp    <read_core_chunk+0x15704>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x156bf>
	jmp    <read_core_chunk+0x15704>
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x654(%rbp)
	addl   $0x1,-0x754(%rbp)
	jmp    <read_core_chunk+0x15709>
	movzbl -0xa40(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x754(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x654(%rbp)
	addl   $0x2,-0x754(%rbp)
	jmp    <read_core_chunk+0x15709>
	call   <abort@plt>
	mov    -0x754(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x750(%rbp)
	mov    -0x750(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa33(%rbp)
	movzbl -0xa33(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1576c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x157cd>
	test   %eax,%eax
	je     <read_core_chunk+0x1576c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x15788>
	jmp    <read_core_chunk+0x157cd>
	movzbl -0xa33(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x638(%rbp)
	addl   $0x1,-0x750(%rbp)
	jmp    <read_core_chunk+0x157f7>
	movzbl -0xa33(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x750(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x638(%rbp)
	addl   $0x2,-0x750(%rbp)
	jmp    <read_core_chunk+0x157f7>
	movzbl -0xa33(%rbp),%edx
	mov    0x33ae7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22f90(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x750(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa32(%rbp)
	movzbl -0xa32(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1583f>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x158a0>
	test   %eax,%eax
	je     <read_core_chunk+0x1583f>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1585b>
	jmp    <read_core_chunk+0x158a0>
	movzbl -0xa32(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x634(%rbp)
	addl   $0x1,-0x750(%rbp)
	jmp    <read_core_chunk+0x158ca>
	movzbl -0xa32(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x750(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x634(%rbp)
	addl   $0x2,-0x750(%rbp)
	jmp    <read_core_chunk+0x158ca>
	movzbl -0xa32(%rbp),%edx
	mov    0x33a14(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22ebd(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x750(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x74c(%rbp)
	mov    -0x74c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa3d(%rbp)
	movzbl -0xa3d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1592d>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1598e>
	test   %eax,%eax
	je     <read_core_chunk+0x1592d>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x15949>
	jmp    <read_core_chunk+0x1598e>
	movzbl -0xa3d(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x64c(%rbp)
	addl   $0x1,-0x74c(%rbp)
	jmp    <read_core_chunk+0x159b8>
	movzbl -0xa3d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x74c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x64c(%rbp)
	addl   $0x2,-0x74c(%rbp)
	jmp    <read_core_chunk+0x159b8>
	movzbl -0xa3d(%rbp),%edx
	mov    0x33926(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22d97(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x74c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x748(%rbp)
	mov    -0x748(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa3e(%rbp)
	movzbl -0xa3e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x15a1b>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x15a7c>
	test   %eax,%eax
	je     <read_core_chunk+0x15a1b>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x15a37>
	jmp    <read_core_chunk+0x15a7c>
	movzbl -0xa3e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x650(%rbp)
	addl   $0x1,-0x748(%rbp)
	jmp    <read_core_chunk+0x15aa6>
	movzbl -0xa3e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x748(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x650(%rbp)
	addl   $0x2,-0x748(%rbp)
	jmp    <read_core_chunk+0x15aa6>
	movzbl -0xa3e(%rbp),%edx
	mov    0x33838(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22ca9(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x748(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x744(%rbp)
	mov    -0x744(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa4a(%rbp)
	movzbl -0xa4a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x15b09>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x15b6a>
	test   %eax,%eax
	je     <read_core_chunk+0x15b09>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x15b25>
	jmp    <read_core_chunk+0x15b6a>
	movzbl -0xa4a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x664(%rbp)
	addl   $0x1,-0x744(%rbp)
	jmp    <read_core_chunk+0x15b94>
	movzbl -0xa4a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x744(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x664(%rbp)
	addl   $0x2,-0x744(%rbp)
	jmp    <read_core_chunk+0x15b94>
	movzbl -0xa4a(%rbp),%edx
	mov    0x3374a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22bf3(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x744(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x740(%rbp)
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa55(%rbp)
	movzbl -0xa55(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x15bf7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x15c58>
	test   %eax,%eax
	je     <read_core_chunk+0x15bf7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x15c13>
	jmp    <read_core_chunk+0x15c58>
	movzbl -0xa55(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x680(%rbp)
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x15c82>
	movzbl -0xa55(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x680(%rbp)
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x15c82>
	movzbl -0xa55(%rbp),%edx
	mov    0x3365c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22acd(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x740(%rbp),%eax
	mov    %eax,-0x67c(%rbp)
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa54(%rbp)
	movzbl -0xa54(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x15e67>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x242a1(%rip),%rax        # <_IO_stdin_used+0x3d34>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x24295(%rip),%rdx        # <_IO_stdin_used+0x3d34>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa54(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x15d0c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x15d6a>
	test   %eax,%eax
	je     <read_core_chunk+0x15d0c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x15d30>
	jmp    <read_core_chunk+0x15d6a>
	movzbl -0xa54(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x368(%rbp)
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x15d94>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x368(%rbp)
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x15d94>
	movzbl -0xa54(%rbp),%edx
	mov    0x3354a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22a2b(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x15e96>
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x15e96>
	movzbl -0xa54(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x15e03>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa53(%rbp)
	cmpb   $0x0,-0xa53(%rbp)
	jne    <read_core_chunk+0x15dec>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x15e25>
	cmpb   $0x8,-0xa53(%rbp)
	jne    <read_core_chunk+0x15dfe>
	addl   $0x3,-0x740(%rbp)
	jmp    <read_core_chunk+0x15e25>
	call   <abort@plt>
	movzbl -0xa54(%rbp),%eax
	mov    %eax,%esi
	lea    0x229c9(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x15e96>
	movzbl -0xa54(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x15e3d>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x15e46>
	jmp    <read_core_chunk+0x15e5c>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x15e5c>
	movzbl -0xa54(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x740(%rbp)
	jmp    <read_core_chunk+0x15e96>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x15e96>
	movzbl -0xa54(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x33448(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22971(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa52(%rbp)
	movzbl -0xa52(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa51(%rbp)
	movzbl -0xa51(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa51(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x15ee9>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x15ef0>
	jmp    <read_core_chunk+0x15f67>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x15f22>
	jmp    <read_core_chunk+0x15f67>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x678(%rbp)
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x15f6c>
	movzbl -0xa52(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x678(%rbp)
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x15f6c>
	call   <abort@plt>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa50(%rbp)
	movzbl -0xa50(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x15fb4>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x16015>
	test   %eax,%eax
	je     <read_core_chunk+0x15fb4>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x15fd0>
	jmp    <read_core_chunk+0x16015>
	movzbl -0xa50(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x674(%rbp)
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x1603f>
	movzbl -0xa50(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x674(%rbp)
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x1603f>
	movzbl -0xa50(%rbp),%edx
	mov    0x3329f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22748(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x740(%rbp)
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa4f(%rbp)
	movzbl -0xa4f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1608e>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x160ef>
	test   %eax,%eax
	je     <read_core_chunk+0x1608e>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x160aa>
	jmp    <read_core_chunk+0x160ef>
	movzbl -0xa4f(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x73c(%rbp)
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x16119>
	movzbl -0xa4f(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x73c(%rbp)
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x16119>
	movzbl -0xa4f(%rbp),%edx
	mov    0x331c5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2266e(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x740(%rbp),%eax
	mov    %eax,-0x670(%rbp)
	mov    -0x73c(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	mov    %eax,-0x66c(%rbp)
	movl   $0x0,-0x668(%rbp)
	movl   $0x0,-0x738(%rbp)
	jmp    <read_core_chunk+0x1656a>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa4e(%rbp)
	movzbl -0xa4e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1632c>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x23e10(%rip),%rax        # <_IO_stdin_used+0x3d68>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x23e04(%rip),%rdx        # <_IO_stdin_used+0x3d68>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa4e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x161d1>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1622f>
	test   %eax,%eax
	je     <read_core_chunk+0x161d1>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x161f5>
	jmp    <read_core_chunk+0x1622f>
	movzbl -0xa4e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x360(%rbp)
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x16259>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x360(%rbp)
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x16259>
	movzbl -0xa4e(%rbp),%edx
	mov    0x33085(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22566(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1635b>
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x1635b>
	movzbl -0xa4e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x162c8>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa4d(%rbp)
	cmpb   $0x0,-0xa4d(%rbp)
	jne    <read_core_chunk+0x162b1>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x162ea>
	cmpb   $0x8,-0xa4d(%rbp)
	jne    <read_core_chunk+0x162c3>
	addl   $0x3,-0x740(%rbp)
	jmp    <read_core_chunk+0x162ea>
	call   <abort@plt>
	movzbl -0xa4e(%rbp),%eax
	mov    %eax,%esi
	lea    0x22504(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1635b>
	movzbl -0xa4e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x16302>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1630b>
	jmp    <read_core_chunk+0x16321>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x16321>
	movzbl -0xa4e(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x740(%rbp)
	jmp    <read_core_chunk+0x1635b>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x1635b>
	movzbl -0xa4e(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x32f83(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x224ac(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa4c(%rbp)
	movzbl -0xa4c(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x16534>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x23c3c(%rip),%rax        # <_IO_stdin_used+0x3d9c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x23c30(%rip),%rdx        # <_IO_stdin_used+0x3d9c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa4c(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x163d9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x16437>
	test   %eax,%eax
	je     <read_core_chunk+0x163d9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x163fd>
	jmp    <read_core_chunk+0x16437>
	movzbl -0xa4c(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x358(%rbp)
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x16461>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x358(%rbp)
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x16461>
	movzbl -0xa4c(%rbp),%edx
	mov    0x32e7d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2235e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x16563>
	addl   $0x1,-0x740(%rbp)
	jmp    <read_core_chunk+0x16563>
	movzbl -0xa4c(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x164d0>
	mov    -0x740(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa4b(%rbp)
	cmpb   $0x0,-0xa4b(%rbp)
	jne    <read_core_chunk+0x164b9>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x164f2>
	cmpb   $0x8,-0xa4b(%rbp)
	jne    <read_core_chunk+0x164cb>
	addl   $0x3,-0x740(%rbp)
	jmp    <read_core_chunk+0x164f2>
	call   <abort@plt>
	movzbl -0xa4c(%rbp),%eax
	mov    %eax,%esi
	lea    0x222fc(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x16563>
	movzbl -0xa4c(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x1650a>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x16513>
	jmp    <read_core_chunk+0x16529>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x16529>
	movzbl -0xa4c(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x740(%rbp)
	jmp    <read_core_chunk+0x16563>
	addl   $0x2,-0x740(%rbp)
	jmp    <read_core_chunk+0x16563>
	movzbl -0xa4c(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x32d7b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x222a4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x738(%rbp)
	mov    -0x738(%rbp),%eax
	cmp    -0x66c(%rbp),%eax
	jl     <read_core_chunk+0x16153>
	mov    -0x740(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x734(%rbp)
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa60(%rbp)
	movzbl -0xa60(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x165df>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x16640>
	test   %eax,%eax
	je     <read_core_chunk+0x165df>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x165fb>
	jmp    <read_core_chunk+0x16640>
	movzbl -0xa60(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x698(%rbp)
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x1666a>
	movzbl -0xa60(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x698(%rbp)
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x1666a>
	movzbl -0xa60(%rbp),%edx
	mov    0x32c74(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x220e5(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x734(%rbp),%eax
	mov    %eax,-0x694(%rbp)
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa5f(%rbp)
	movzbl -0xa5f(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1684f>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x23955(%rip),%rax        # <_IO_stdin_used+0x3dd0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x23949(%rip),%rdx        # <_IO_stdin_used+0x3dd0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa5f(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x166f4>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x16752>
	test   %eax,%eax
	je     <read_core_chunk+0x166f4>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x16718>
	jmp    <read_core_chunk+0x16752>
	movzbl -0xa5f(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x380(%rbp)
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x1677c>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x380(%rbp)
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x1677c>
	movzbl -0xa5f(%rbp),%edx
	mov    0x32b62(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x22043(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1687e>
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x1687e>
	movzbl -0xa5f(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x167eb>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa5e(%rbp)
	cmpb   $0x0,-0xa5e(%rbp)
	jne    <read_core_chunk+0x167d4>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x1680d>
	cmpb   $0x8,-0xa5e(%rbp)
	jne    <read_core_chunk+0x167e6>
	addl   $0x3,-0x734(%rbp)
	jmp    <read_core_chunk+0x1680d>
	call   <abort@plt>
	movzbl -0xa5f(%rbp),%eax
	mov    %eax,%esi
	lea    0x21fe1(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1687e>
	movzbl -0xa5f(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x16825>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1682e>
	jmp    <read_core_chunk+0x16844>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16844>
	movzbl -0xa5f(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x734(%rbp)
	jmp    <read_core_chunk+0x1687e>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x1687e>
	movzbl -0xa5f(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x32a60(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21f89(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa5d(%rbp)
	movzbl -0xa5d(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa5c(%rbp)
	movzbl -0xa5c(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa5c(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x168d1>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x168d8>
	jmp    <read_core_chunk+0x1694f>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x1690a>
	jmp    <read_core_chunk+0x1694f>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x690(%rbp)
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x16954>
	movzbl -0xa5d(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x690(%rbp)
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16954>
	call   <abort@plt>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa5b(%rbp)
	movzbl -0xa5b(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1699c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x169fd>
	test   %eax,%eax
	je     <read_core_chunk+0x1699c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x169b8>
	jmp    <read_core_chunk+0x169fd>
	movzbl -0xa5b(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x68c(%rbp)
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x16a27>
	movzbl -0xa5b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x68c(%rbp)
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16a27>
	movzbl -0xa5b(%rbp),%edx
	mov    0x328b7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21d60(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x734(%rbp)
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa5a(%rbp)
	movzbl -0xa5a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x16a76>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x16ad7>
	test   %eax,%eax
	je     <read_core_chunk+0x16a76>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x16a92>
	jmp    <read_core_chunk+0x16ad7>
	movzbl -0xa5a(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x730(%rbp)
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x16b01>
	movzbl -0xa5a(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x730(%rbp)
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16b01>
	movzbl -0xa5a(%rbp),%edx
	mov    0x327dd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21c86(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x734(%rbp),%eax
	mov    %eax,-0x688(%rbp)
	mov    -0x730(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	mov    %eax,-0x684(%rbp)
	movl   $0x0,-0x72c(%rbp)
	jmp    <read_core_chunk+0x16f48>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa59(%rbp)
	movzbl -0xa59(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x16d0a>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x234ce(%rip),%rax        # <_IO_stdin_used+0x3e04>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x234c2(%rip),%rdx        # <_IO_stdin_used+0x3e04>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa59(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x16baf>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x16c0d>
	test   %eax,%eax
	je     <read_core_chunk+0x16baf>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x16bd3>
	jmp    <read_core_chunk+0x16c0d>
	movzbl -0xa59(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x378(%rbp)
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x16c37>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x378(%rbp)
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16c37>
	movzbl -0xa59(%rbp),%edx
	mov    0x326a7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21b88(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x16d39>
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x16d39>
	movzbl -0xa59(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x16ca6>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa58(%rbp)
	cmpb   $0x0,-0xa58(%rbp)
	jne    <read_core_chunk+0x16c8f>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16cc8>
	cmpb   $0x8,-0xa58(%rbp)
	jne    <read_core_chunk+0x16ca1>
	addl   $0x3,-0x734(%rbp)
	jmp    <read_core_chunk+0x16cc8>
	call   <abort@plt>
	movzbl -0xa59(%rbp),%eax
	mov    %eax,%esi
	lea    0x21b26(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x16d39>
	movzbl -0xa59(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x16ce0>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x16ce9>
	jmp    <read_core_chunk+0x16cff>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16cff>
	movzbl -0xa59(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x734(%rbp)
	jmp    <read_core_chunk+0x16d39>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16d39>
	movzbl -0xa59(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x325a5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21ace(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa57(%rbp)
	movzbl -0xa57(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x16f12>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x232fa(%rip),%rax        # <_IO_stdin_used+0x3e38>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x232ee(%rip),%rdx        # <_IO_stdin_used+0x3e38>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa57(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x16db7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x16e15>
	test   %eax,%eax
	je     <read_core_chunk+0x16db7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x16ddb>
	jmp    <read_core_chunk+0x16e15>
	movzbl -0xa57(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x370(%rbp)
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x16e3f>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x370(%rbp)
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16e3f>
	movzbl -0xa57(%rbp),%edx
	mov    0x3249f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21980(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x16f41>
	addl   $0x1,-0x734(%rbp)
	jmp    <read_core_chunk+0x16f41>
	movzbl -0xa57(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x16eae>
	mov    -0x734(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa56(%rbp)
	cmpb   $0x0,-0xa56(%rbp)
	jne    <read_core_chunk+0x16e97>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16ed0>
	cmpb   $0x8,-0xa56(%rbp)
	jne    <read_core_chunk+0x16ea9>
	addl   $0x3,-0x734(%rbp)
	jmp    <read_core_chunk+0x16ed0>
	call   <abort@plt>
	movzbl -0xa57(%rbp),%eax
	mov    %eax,%esi
	lea    0x2191e(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x16f41>
	movzbl -0xa57(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x16ee8>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x16ef1>
	jmp    <read_core_chunk+0x16f07>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16f07>
	movzbl -0xa57(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x734(%rbp)
	jmp    <read_core_chunk+0x16f41>
	addl   $0x2,-0x734(%rbp)
	jmp    <read_core_chunk+0x16f41>
	movzbl -0xa57(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3239d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x218c6(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x72c(%rbp)
	mov    -0x72c(%rbp),%eax
	cmp    -0x684(%rbp),%eax
	jl     <read_core_chunk+0x16b31>
	mov    -0x734(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x728(%rbp)
	mov    -0x728(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa63(%rbp)
	movzbl -0xa63(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x16fbd>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1701e>
	test   %eax,%eax
	je     <read_core_chunk+0x16fbd>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x16fd9>
	jmp    <read_core_chunk+0x1701e>
	movzbl -0xa63(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x69c(%rbp)
	addl   $0x1,-0x728(%rbp)
	jmp    <read_core_chunk+0x17048>
	movzbl -0xa63(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x728(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x69c(%rbp)
	addl   $0x2,-0x728(%rbp)
	jmp    <read_core_chunk+0x17048>
	movzbl -0xa63(%rbp),%edx
	mov    0x32296(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21707(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x728(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa62(%rbp)
	movzbl -0xa62(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x17221>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x2301f(%rip),%rax        # <_IO_stdin_used+0x3e6c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x23013(%rip),%rdx        # <_IO_stdin_used+0x3e6c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa62(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x170c6>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x17124>
	test   %eax,%eax
	je     <read_core_chunk+0x170c6>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x170ea>
	jmp    <read_core_chunk+0x17124>
	movzbl -0xa62(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x388(%rbp)
	addl   $0x1,-0x728(%rbp)
	jmp    <read_core_chunk+0x1714e>
	mov    -0x728(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x388(%rbp)
	addl   $0x2,-0x728(%rbp)
	jmp    <read_core_chunk+0x1714e>
	movzbl -0xa62(%rbp),%edx
	mov    0x32190(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21671(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17250>
	addl   $0x1,-0x728(%rbp)
	jmp    <read_core_chunk+0x17250>
	movzbl -0xa62(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x171bd>
	mov    -0x728(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa61(%rbp)
	cmpb   $0x0,-0xa61(%rbp)
	jne    <read_core_chunk+0x171a6>
	addl   $0x2,-0x728(%rbp)
	jmp    <read_core_chunk+0x171df>
	cmpb   $0x8,-0xa61(%rbp)
	jne    <read_core_chunk+0x171b8>
	addl   $0x3,-0x728(%rbp)
	jmp    <read_core_chunk+0x171df>
	call   <abort@plt>
	movzbl -0xa62(%rbp),%eax
	mov    %eax,%esi
	lea    0x2160f(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17250>
	movzbl -0xa62(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x171f7>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x17200>
	jmp    <read_core_chunk+0x17216>
	addl   $0x2,-0x728(%rbp)
	jmp    <read_core_chunk+0x17216>
	movzbl -0xa62(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x728(%rbp)
	jmp    <read_core_chunk+0x17250>
	addl   $0x2,-0x728(%rbp)
	jmp    <read_core_chunk+0x17250>
	movzbl -0xa62(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3208e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x215b7(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x728(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x724(%rbp)
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa69(%rbp)
	movzbl -0xa69(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x172b3>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x17314>
	test   %eax,%eax
	je     <read_core_chunk+0x172b3>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x172cf>
	jmp    <read_core_chunk+0x17314>
	movzbl -0xa69(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6a4(%rbp)
	addl   $0x1,-0x724(%rbp)
	jmp    <read_core_chunk+0x1733e>
	movzbl -0xa69(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6a4(%rbp)
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x1733e>
	movzbl -0xa69(%rbp),%edx
	mov    0x31fa0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21411(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa68(%rbp)
	movzbl -0xa68(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x17517>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x22d5d(%rip),%rax        # <_IO_stdin_used+0x3ea0>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x22d51(%rip),%rdx        # <_IO_stdin_used+0x3ea0>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa68(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x173bc>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1741a>
	test   %eax,%eax
	je     <read_core_chunk+0x173bc>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x173e0>
	jmp    <read_core_chunk+0x1741a>
	movzbl -0xa68(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x398(%rbp)
	addl   $0x1,-0x724(%rbp)
	jmp    <read_core_chunk+0x17444>
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x398(%rbp)
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x17444>
	movzbl -0xa68(%rbp),%edx
	mov    0x31e9a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x2137b(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17546>
	addl   $0x1,-0x724(%rbp)
	jmp    <read_core_chunk+0x17546>
	movzbl -0xa68(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x174b3>
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa67(%rbp)
	cmpb   $0x0,-0xa67(%rbp)
	jne    <read_core_chunk+0x1749c>
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x174d5>
	cmpb   $0x8,-0xa67(%rbp)
	jne    <read_core_chunk+0x174ae>
	addl   $0x3,-0x724(%rbp)
	jmp    <read_core_chunk+0x174d5>
	call   <abort@plt>
	movzbl -0xa68(%rbp),%eax
	mov    %eax,%esi
	lea    0x21319(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17546>
	movzbl -0xa68(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x174ed>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x174f6>
	jmp    <read_core_chunk+0x1750c>
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x1750c>
	movzbl -0xa68(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x724(%rbp)
	jmp    <read_core_chunk+0x17546>
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x17546>
	movzbl -0xa68(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x31d98(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x212c1(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x724(%rbp)
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa66(%rbp)
	movzbl -0xa66(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x17595>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x175f6>
	test   %eax,%eax
	je     <read_core_chunk+0x17595>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x175b1>
	jmp    <read_core_chunk+0x175f6>
	movzbl -0xa66(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x720(%rbp)
	addl   $0x1,-0x724(%rbp)
	jmp    <read_core_chunk+0x17620>
	movzbl -0xa66(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x720(%rbp)
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x17620>
	movzbl -0xa66(%rbp),%edx
	mov    0x31cbe(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21167(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movl   $0x0,-0x6a0(%rbp)
	movl   $0x0,-0x71c(%rbp)
	jmp    <read_core_chunk+0x17848>
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa65(%rbp)
	movzbl -0xa65(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x17812>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x22a96(%rip),%rax        # <_IO_stdin_used+0x3ed4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x22a8a(%rip),%rdx        # <_IO_stdin_used+0x3ed4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa65(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x176b7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x17715>
	test   %eax,%eax
	je     <read_core_chunk+0x176b7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x176db>
	jmp    <read_core_chunk+0x17715>
	movzbl -0xa65(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x390(%rbp)
	addl   $0x1,-0x724(%rbp)
	jmp    <read_core_chunk+0x1773f>
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x390(%rbp)
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x1773f>
	movzbl -0xa65(%rbp),%edx
	mov    0x31b9f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x21080(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17841>
	addl   $0x1,-0x724(%rbp)
	jmp    <read_core_chunk+0x17841>
	movzbl -0xa65(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x177ae>
	mov    -0x724(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa64(%rbp)
	cmpb   $0x0,-0xa64(%rbp)
	jne    <read_core_chunk+0x17797>
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x177d0>
	cmpb   $0x8,-0xa64(%rbp)
	jne    <read_core_chunk+0x177a9>
	addl   $0x3,-0x724(%rbp)
	jmp    <read_core_chunk+0x177d0>
	call   <abort@plt>
	movzbl -0xa65(%rbp),%eax
	mov    %eax,%esi
	lea    0x2101e(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17841>
	movzbl -0xa65(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x177e8>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x177f1>
	jmp    <read_core_chunk+0x17807>
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x17807>
	movzbl -0xa65(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x724(%rbp)
	jmp    <read_core_chunk+0x17841>
	addl   $0x2,-0x724(%rbp)
	jmp    <read_core_chunk+0x17841>
	movzbl -0xa65(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x31a9d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20fc6(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x71c(%rbp)
	mov    -0x71c(%rbp),%eax
	cmp    -0x720(%rbp),%eax
	jge    <read_core_chunk+0x17863>
	cmpl   $0x0,-0x6a0(%rbp)
	je     <read_core_chunk+0x17639>
	cmpl   $0x0,-0x6a0(%rbp)
	jne    <read_core_chunk+0x19713>
	mov    -0x724(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19713>
	movl   $0x1,-0x718(%rbp)
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa71(%rbp)
	movzbl -0xa71(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x178d3>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x17934>
	test   %eax,%eax
	je     <read_core_chunk+0x178d3>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x178ef>
	jmp    <read_core_chunk+0x17934>
	movzbl -0xa71(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6b4(%rbp)
	addl   $0x1,-0x718(%rbp)
	jmp    <read_core_chunk+0x1795e>
	movzbl -0xa71(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6b4(%rbp)
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x1795e>
	movzbl -0xa71(%rbp),%edx
	mov    0x31980(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20df1(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa70(%rbp)
	movzbl -0xa70(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x17b37>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x227a5(%rip),%rax        # <_IO_stdin_used+0x3f08>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x22799(%rip),%rdx        # <_IO_stdin_used+0x3f08>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa70(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x179dc>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x17a3a>
	test   %eax,%eax
	je     <read_core_chunk+0x179dc>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x17a00>
	jmp    <read_core_chunk+0x17a3a>
	movzbl -0xa70(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3a8(%rbp)
	addl   $0x1,-0x718(%rbp)
	jmp    <read_core_chunk+0x17a64>
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3a8(%rbp)
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17a64>
	movzbl -0xa70(%rbp),%edx
	mov    0x3187a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20d5b(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17b66>
	addl   $0x1,-0x718(%rbp)
	jmp    <read_core_chunk+0x17b66>
	movzbl -0xa70(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x17ad3>
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa6f(%rbp)
	cmpb   $0x0,-0xa6f(%rbp)
	jne    <read_core_chunk+0x17abc>
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17af5>
	cmpb   $0x8,-0xa6f(%rbp)
	jne    <read_core_chunk+0x17ace>
	addl   $0x3,-0x718(%rbp)
	jmp    <read_core_chunk+0x17af5>
	call   <abort@plt>
	movzbl -0xa70(%rbp),%eax
	mov    %eax,%esi
	lea    0x20cf9(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17b66>
	movzbl -0xa70(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x17b0d>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x17b16>
	jmp    <read_core_chunk+0x17b2c>
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17b2c>
	movzbl -0xa70(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x718(%rbp)
	jmp    <read_core_chunk+0x17b66>
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17b66>
	movzbl -0xa70(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x31778(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20ca1(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x718(%rbp)
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa6e(%rbp)
	movzbl -0xa6e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x17bb5>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x17c16>
	test   %eax,%eax
	je     <read_core_chunk+0x17bb5>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x17bd1>
	jmp    <read_core_chunk+0x17c16>
	movzbl -0xa6e(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x714(%rbp)
	addl   $0x1,-0x718(%rbp)
	jmp    <read_core_chunk+0x17c40>
	movzbl -0xa6e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x714(%rbp)
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17c40>
	movzbl -0xa6e(%rbp),%edx
	mov    0x3169e(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20b47(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x714(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	mov    %eax,-0x6b0(%rbp)
	movl   $0x0,-0x6ac(%rbp)
	movl   $0x0,-0x710(%rbp)
	jmp    <read_core_chunk+0x17f53>
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa6d(%rbp)
	movzbl -0xa6d(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x17e47>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x224c9(%rip),%rax        # <_IO_stdin_used+0x3f3c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x224bd(%rip),%rdx        # <_IO_stdin_used+0x3f3c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa6d(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x17cec>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x17d4a>
	test   %eax,%eax
	je     <read_core_chunk+0x17cec>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x17d10>
	jmp    <read_core_chunk+0x17d4a>
	movzbl -0xa6d(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3a0(%rbp)
	addl   $0x1,-0x718(%rbp)
	jmp    <read_core_chunk+0x17d74>
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3a0(%rbp)
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17d74>
	movzbl -0xa6d(%rbp),%edx
	mov    0x3156a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20a4b(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17e76>
	addl   $0x1,-0x718(%rbp)
	jmp    <read_core_chunk+0x17e76>
	movzbl -0xa6d(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x17de3>
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa6c(%rbp)
	cmpb   $0x0,-0xa6c(%rbp)
	jne    <read_core_chunk+0x17dcc>
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17e05>
	cmpb   $0x8,-0xa6c(%rbp)
	jne    <read_core_chunk+0x17dde>
	addl   $0x3,-0x718(%rbp)
	jmp    <read_core_chunk+0x17e05>
	call   <abort@plt>
	movzbl -0xa6d(%rbp),%eax
	mov    %eax,%esi
	lea    0x209e9(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x17e76>
	movzbl -0xa6d(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x17e1d>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x17e26>
	jmp    <read_core_chunk+0x17e3c>
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17e3c>
	movzbl -0xa6d(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x718(%rbp)
	jmp    <read_core_chunk+0x17e76>
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17e76>
	movzbl -0xa6d(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x31468(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20991(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa6b(%rbp)
	movzbl -0xa6b(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa6a(%rbp)
	movzbl -0xa6a(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa6a(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x17ec9>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x17ed0>
	jmp    <read_core_chunk+0x17f47>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x17f02>
	jmp    <read_core_chunk+0x17f47>
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6a8(%rbp)
	addl   $0x1,-0x718(%rbp)
	jmp    <read_core_chunk+0x17f4c>
	movzbl -0xa6b(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x718(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6a8(%rbp)
	addl   $0x2,-0x718(%rbp)
	jmp    <read_core_chunk+0x17f4c>
	call   <abort@plt>
	addl   $0x1,-0x710(%rbp)
	mov    -0x710(%rbp),%eax
	cmp    -0x6b0(%rbp),%eax
	jge    <read_core_chunk+0x17f6e>
	cmpl   $0x0,-0x6ac(%rbp)
	je     <read_core_chunk+0x17c6e>
	cmpl   $0x0,-0x6ac(%rbp)
	jne    <read_core_chunk+0x19716>
	mov    -0x718(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19716>
	movl   $0x1,-0x70c(%rbp)
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa76(%rbp)
	movzbl -0xa76(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x17fde>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1803f>
	test   %eax,%eax
	je     <read_core_chunk+0x17fde>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x17ffa>
	jmp    <read_core_chunk+0x1803f>
	movzbl -0xa76(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6c0(%rbp)
	addl   $0x1,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18069>
	movzbl -0xa76(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6c0(%rbp)
	addl   $0x2,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18069>
	movzbl -0xa76(%rbp),%edx
	mov    0x31275(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x206e6(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa75(%rbp)
	movzbl -0xa75(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x18242>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x22102(%rip),%rax        # <_IO_stdin_used+0x3f70>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x220f6(%rip),%rdx        # <_IO_stdin_used+0x3f70>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa75(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x180e7>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x18145>
	test   %eax,%eax
	je     <read_core_chunk+0x180e7>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x1810b>
	jmp    <read_core_chunk+0x18145>
	movzbl -0xa75(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3b0(%rbp)
	addl   $0x1,-0x70c(%rbp)
	jmp    <read_core_chunk+0x1816f>
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3b0(%rbp)
	addl   $0x2,-0x70c(%rbp)
	jmp    <read_core_chunk+0x1816f>
	movzbl -0xa75(%rbp),%edx
	mov    0x3116f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20650(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x18271>
	addl   $0x1,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18271>
	movzbl -0xa75(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x181de>
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa74(%rbp)
	cmpb   $0x0,-0xa74(%rbp)
	jne    <read_core_chunk+0x181c7>
	addl   $0x2,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18200>
	cmpb   $0x8,-0xa74(%rbp)
	jne    <read_core_chunk+0x181d9>
	addl   $0x3,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18200>
	call   <abort@plt>
	movzbl -0xa75(%rbp),%eax
	mov    %eax,%esi
	lea    0x205ee(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x18271>
	movzbl -0xa75(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x18218>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x18221>
	jmp    <read_core_chunk+0x18237>
	addl   $0x2,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18237>
	movzbl -0xa75(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18271>
	addl   $0x2,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18271>
	movzbl -0xa75(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x3106d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20596(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa73(%rbp)
	movzbl -0xa73(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x182b9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1831a>
	test   %eax,%eax
	je     <read_core_chunk+0x182b9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x182d5>
	jmp    <read_core_chunk+0x1831a>
	movzbl -0xa73(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6bc(%rbp)
	addl   $0x1,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18344>
	movzbl -0xa73(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6bc(%rbp)
	addl   $0x2,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18344>
	movzbl -0xa73(%rbp),%edx
	mov    0x30f9a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20443(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa72(%rbp)
	movzbl -0xa72(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1838c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x183ed>
	test   %eax,%eax
	je     <read_core_chunk+0x1838c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x183a8>
	jmp    <read_core_chunk+0x183ed>
	movzbl -0xa72(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6b8(%rbp)
	addl   $0x1,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18417>
	movzbl -0xa72(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x70c(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6b8(%rbp)
	addl   $0x2,-0x70c(%rbp)
	jmp    <read_core_chunk+0x18417>
	movzbl -0xa72(%rbp),%edx
	mov    0x30ec7(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20338(%rip),%rcx        # <_IO_stdin_used+0x24f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x70c(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x708(%rbp)
	mov    -0x708(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa7a(%rbp)
	movzbl -0xa7a(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x1860b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x21d6d(%rip),%rax        # <_IO_stdin_used+0x3fa4>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x21d61(%rip),%rdx        # <_IO_stdin_used+0x3fa4>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa7a(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x184b0>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x1850e>
	test   %eax,%eax
	je     <read_core_chunk+0x184b0>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x184d4>
	jmp    <read_core_chunk+0x1850e>
	movzbl -0xa7a(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3b8(%rbp)
	addl   $0x1,-0x708(%rbp)
	jmp    <read_core_chunk+0x18538>
	mov    -0x708(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3b8(%rbp)
	addl   $0x2,-0x708(%rbp)
	jmp    <read_core_chunk+0x18538>
	movzbl -0xa7a(%rbp),%edx
	mov    0x30da6(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x20287(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1863a>
	addl   $0x1,-0x708(%rbp)
	jmp    <read_core_chunk+0x1863a>
	movzbl -0xa7a(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x185a7>
	mov    -0x708(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa79(%rbp)
	cmpb   $0x0,-0xa79(%rbp)
	jne    <read_core_chunk+0x18590>
	addl   $0x2,-0x708(%rbp)
	jmp    <read_core_chunk+0x185c9>
	cmpb   $0x8,-0xa79(%rbp)
	jne    <read_core_chunk+0x185a2>
	addl   $0x3,-0x708(%rbp)
	jmp    <read_core_chunk+0x185c9>
	call   <abort@plt>
	movzbl -0xa7a(%rbp),%eax
	mov    %eax,%esi
	lea    0x20225(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x1863a>
	movzbl -0xa7a(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x185e1>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x185ea>
	jmp    <read_core_chunk+0x18600>
	addl   $0x2,-0x708(%rbp)
	jmp    <read_core_chunk+0x18600>
	movzbl -0xa7a(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x708(%rbp)
	jmp    <read_core_chunk+0x1863a>
	addl   $0x2,-0x708(%rbp)
	jmp    <read_core_chunk+0x1863a>
	movzbl -0xa7a(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x30ca4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x201cd(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x708(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa78(%rbp)
	movzbl -0xa78(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa77(%rbp)
	movzbl -0xa77(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa77(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x1868d>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x18694>
	jmp    <read_core_chunk+0x1870b>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x186c6>
	jmp    <read_core_chunk+0x1870b>
	mov    -0x708(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6c4(%rbp)
	addl   $0x1,-0x708(%rbp)
	jmp    <read_core_chunk+0x18710>
	movzbl -0xa78(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x708(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6c4(%rbp)
	addl   $0x2,-0x708(%rbp)
	jmp    <read_core_chunk+0x18710>
	call   <abort@plt>
	mov    -0x708(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x704(%rbp)
	mov    -0x704(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa7e(%rbp)
	movzbl -0xa7e(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x18904>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x21aa8(%rip),%rax        # <_IO_stdin_used+0x3fd8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x21a9c(%rip),%rdx        # <_IO_stdin_used+0x3fd8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa7e(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x187a9>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x18807>
	test   %eax,%eax
	je     <read_core_chunk+0x187a9>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x187cd>
	jmp    <read_core_chunk+0x18807>
	movzbl -0xa7e(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3c0(%rbp)
	addl   $0x1,-0x704(%rbp)
	jmp    <read_core_chunk+0x18831>
	mov    -0x704(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3c0(%rbp)
	addl   $0x2,-0x704(%rbp)
	jmp    <read_core_chunk+0x18831>
	movzbl -0xa7e(%rbp),%edx
	mov    0x30aad(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1ff8e(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x18933>
	addl   $0x1,-0x704(%rbp)
	jmp    <read_core_chunk+0x18933>
	movzbl -0xa7e(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x188a0>
	mov    -0x704(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa7d(%rbp)
	cmpb   $0x0,-0xa7d(%rbp)
	jne    <read_core_chunk+0x18889>
	addl   $0x2,-0x704(%rbp)
	jmp    <read_core_chunk+0x188c2>
	cmpb   $0x8,-0xa7d(%rbp)
	jne    <read_core_chunk+0x1889b>
	addl   $0x3,-0x704(%rbp)
	jmp    <read_core_chunk+0x188c2>
	call   <abort@plt>
	movzbl -0xa7e(%rbp),%eax
	mov    %eax,%esi
	lea    0x1ff2c(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x18933>
	movzbl -0xa7e(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x188da>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x188e3>
	jmp    <read_core_chunk+0x188f9>
	addl   $0x2,-0x704(%rbp)
	jmp    <read_core_chunk+0x188f9>
	movzbl -0xa7e(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x704(%rbp)
	jmp    <read_core_chunk+0x18933>
	addl   $0x2,-0x704(%rbp)
	jmp    <read_core_chunk+0x18933>
	movzbl -0xa7e(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x309ab(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1fed4(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x704(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa7c(%rbp)
	movzbl -0xa7c(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa7b(%rbp)
	movzbl -0xa7b(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa7b(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x18986>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x1898d>
	jmp    <read_core_chunk+0x18a04>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x189bf>
	jmp    <read_core_chunk+0x18a04>
	mov    -0x704(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6c8(%rbp)
	addl   $0x1,-0x704(%rbp)
	jmp    <read_core_chunk+0x18a09>
	movzbl -0xa7c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x704(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6c8(%rbp)
	addl   $0x2,-0x704(%rbp)
	jmp    <read_core_chunk+0x18a09>
	call   <abort@plt>
	mov    -0x704(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x700(%rbp)
	mov    -0x700(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa83(%rbp)
	movzbl -0xa83(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa82(%rbp)
	movzbl -0xa82(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa82(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x18a77>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x18a7e>
	jmp    <read_core_chunk+0x18af5>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x18ab0>
	jmp    <read_core_chunk+0x18af5>
	mov    -0x700(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6cc(%rbp)
	addl   $0x1,-0x700(%rbp)
	jmp    <read_core_chunk+0x18afa>
	movzbl -0xa83(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x700(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6cc(%rbp)
	addl   $0x2,-0x700(%rbp)
	jmp    <read_core_chunk+0x18afa>
	call   <abort@plt>
	addl   $0x1,-0x700(%rbp)
	mov    -0x700(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa81(%rbp)
	movzbl -0xa81(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x18b49>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x18baa>
	test   %eax,%eax
	je     <read_core_chunk+0x18b49>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x18b65>
	jmp    <read_core_chunk+0x18baa>
	movzbl -0xa81(%rbp),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6fc(%rbp)
	addl   $0x1,-0x700(%rbp)
	jmp    <read_core_chunk+0x18bd4>
	movzbl -0xa81(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x700(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6fc(%rbp)
	addl   $0x2,-0x700(%rbp)
	jmp    <read_core_chunk+0x18bd4>
	movzbl -0xa81(%rbp),%edx
	mov    0x3070a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1fbb3(%rip),%rcx        # <_IO_stdin_used+0x2530>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movl   $0x0,-0x6f8(%rbp)
	jmp    <read_core_chunk+0x18df2>
	mov    -0x700(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa80(%rbp)
	movzbl -0xa80(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x18dbc>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x21624(%rip),%rax        # <_IO_stdin_used+0x400c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x21618(%rip),%rdx        # <_IO_stdin_used+0x400c>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xa80(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x18c61>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x18cbf>
	test   %eax,%eax
	je     <read_core_chunk+0x18c61>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x18c85>
	jmp    <read_core_chunk+0x18cbf>
	movzbl -0xa80(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3c8(%rbp)
	addl   $0x1,-0x700(%rbp)
	jmp    <read_core_chunk+0x18ce9>
	mov    -0x700(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x3c8(%rbp)
	addl   $0x2,-0x700(%rbp)
	jmp    <read_core_chunk+0x18ce9>
	movzbl -0xa80(%rbp),%edx
	mov    0x305f5(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1fad6(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x18deb>
	addl   $0x1,-0x700(%rbp)
	jmp    <read_core_chunk+0x18deb>
	movzbl -0xa80(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x18d58>
	mov    -0x700(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xa7f(%rbp)
	cmpb   $0x0,-0xa7f(%rbp)
	jne    <read_core_chunk+0x18d41>
	addl   $0x2,-0x700(%rbp)
	jmp    <read_core_chunk+0x18d7a>
	cmpb   $0x8,-0xa7f(%rbp)
	jne    <read_core_chunk+0x18d53>
	addl   $0x3,-0x700(%rbp)
	jmp    <read_core_chunk+0x18d7a>
	call   <abort@plt>
	movzbl -0xa80(%rbp),%eax
	mov    %eax,%esi
	lea    0x1fa74(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x18deb>
	movzbl -0xa80(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x18d92>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x18d9b>
	jmp    <read_core_chunk+0x18db1>
	addl   $0x2,-0x700(%rbp)
	jmp    <read_core_chunk+0x18db1>
	movzbl -0xa80(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x700(%rbp)
	jmp    <read_core_chunk+0x18deb>
	addl   $0x2,-0x700(%rbp)
	jmp    <read_core_chunk+0x18deb>
	movzbl -0xa80(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x304f3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1fa1c(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	addl   $0x1,-0x6f8(%rbp)
	mov    -0x6f8(%rbp),%eax
	cmp    -0x6fc(%rbp),%eax
	jl     <read_core_chunk+0x18be3>
	mov    -0x700(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x6f4(%rbp)
	mov    -0x6f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa9e(%rbp)
	movzbl -0xa9e(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa9d(%rbp)
	movzbl -0xa9d(%rbp),%eax
	mov    %eax,-0x438(%rbp)
	movzbl -0xa9d(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x18e72>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x18e79>
	jmp    <read_core_chunk+0x18ef0>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x18eab>
	jmp    <read_core_chunk+0x18ef0>
	mov    -0x6f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6e8(%rbp)
	addl   $0x1,-0x6f4(%rbp)
	jmp    <read_core_chunk+0x18ef5>
	movzbl -0xa9e(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x6f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6e8(%rbp)
	addl   $0x2,-0x6f4(%rbp)
	jmp    <read_core_chunk+0x18ef5>
	call   <abort@plt>
	mov    -0x6f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xa9c(%rbp)
	movzbl -0xa9c(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa9b(%rbp)
	movzbl -0xa9b(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa9b(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x18f48>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x18f4f>
	jmp    <read_core_chunk+0x18fc6>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x18f81>
	jmp    <read_core_chunk+0x18fc6>
	mov    -0x6f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6e4(%rbp)
	addl   $0x1,-0x6f4(%rbp)
	jmp    <read_core_chunk+0x18fcb>
	movzbl -0xa9c(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x6f4(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6e4(%rbp)
	addl   $0x2,-0x6f4(%rbp)
	jmp    <read_core_chunk+0x18fcb>
	call   <abort@plt>
	mov    -0x6f4(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	movl   $0x1,-0x6f0(%rbp)
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xaa6(%rbp)
	movzbl -0xaa6(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x191bf>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x21255(%rip),%rax        # <_IO_stdin_used+0x4040>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x21249(%rip),%rdx        # <_IO_stdin_used+0x4040>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xaa6(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x19064>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x190c2>
	test   %eax,%eax
	je     <read_core_chunk+0x19064>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x19088>
	jmp    <read_core_chunk+0x190c2>
	movzbl -0xaa6(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x420(%rbp)
	addl   $0x1,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x190ec>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x420(%rbp)
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x190ec>
	movzbl -0xaa6(%rbp),%edx
	mov    0x301f2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1f6d3(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x191ee>
	addl   $0x1,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x191ee>
	movzbl -0xaa6(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x1915b>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xaa5(%rbp)
	cmpb   $0x0,-0xaa5(%rbp)
	jne    <read_core_chunk+0x19144>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x1917d>
	cmpb   $0x8,-0xaa5(%rbp)
	jne    <read_core_chunk+0x19156>
	addl   $0x3,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x1917d>
	call   <abort@plt>
	movzbl -0xaa6(%rbp),%eax
	mov    %eax,%esi
	lea    0x1f671(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x191ee>
	movzbl -0xaa6(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x19195>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x1919e>
	jmp    <read_core_chunk+0x191b4>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x191b4>
	movzbl -0xaa6(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x191ee>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x191ee>
	movzbl -0xaa6(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x300f0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1f619(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xaa4(%rbp)
	movzbl -0xaa4(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x193c7>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x21081(%rip),%rax        # <_IO_stdin_used+0x4074>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x21075(%rip),%rdx        # <_IO_stdin_used+0x4074>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xaa4(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x1926c>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x192ca>
	test   %eax,%eax
	je     <read_core_chunk+0x1926c>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x19290>
	jmp    <read_core_chunk+0x192ca>
	movzbl -0xaa4(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x418(%rbp)
	addl   $0x1,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x192f4>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x418(%rbp)
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x192f4>
	movzbl -0xaa4(%rbp),%edx
	mov    0x2ffea(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1f4cb(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x193f6>
	addl   $0x1,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x193f6>
	movzbl -0xaa4(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x19363>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xaa3(%rbp)
	cmpb   $0x0,-0xaa3(%rbp)
	jne    <read_core_chunk+0x1934c>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x19385>
	cmpb   $0x8,-0xaa3(%rbp)
	jne    <read_core_chunk+0x1935e>
	addl   $0x3,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x19385>
	call   <abort@plt>
	movzbl -0xaa4(%rbp),%eax
	mov    %eax,%esi
	lea    0x1f469(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x193f6>
	movzbl -0xaa4(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x1939d>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x193a6>
	jmp    <read_core_chunk+0x193bc>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x193bc>
	movzbl -0xaa4(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x193f6>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x193f6>
	movzbl -0xaa4(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x2fee8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1f411(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xaa2(%rbp)
	movzbl -0xaa2(%rbp),%eax
	and    $0xf,%eax
	cmp    $0xc,%eax
	ja     <read_core_chunk+0x195cf>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0x20ead(%rip),%rax        # <_IO_stdin_used+0x40a8>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0x20ea1(%rip),%rdx        # <_IO_stdin_used+0x40a8>
	add    %rdx,%rax
	notrack jmp *%rax
	movzbl -0xaa2(%rbp),%eax
	shr    $0x3,%al
	movzbl %al,%eax
	and    $0x3,%eax
	cmp    $0x2,%eax
	je     <read_core_chunk+0x19474>
	cmp    $0x2,%eax
	jg     <read_core_chunk+0x194d2>
	test   %eax,%eax
	je     <read_core_chunk+0x19474>
	cmp    $0x1,%eax
	je     <read_core_chunk+0x19498>
	jmp    <read_core_chunk+0x194d2>
	movzbl -0xaa2(%rbp),%eax
	shr    $0x4,%al
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x410(%rbp)
	addl   $0x1,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x194fc>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int4>
	mov    %rax,-0x410(%rbp)
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x194fc>
	movzbl -0xaa2(%rbp),%edx
	mov    0x2fde2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1f2c3(%rip),%rcx        # <_IO_stdin_used+0x2568>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x195fe>
	addl   $0x1,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x195fe>
	movzbl -0xaa2(%rbp),%eax
	cmp    $0x47,%eax
	jne    <read_core_chunk+0x1956b>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	and    $0xf,%eax
	mov    %al,-0xaa1(%rbp)
	cmpb   $0x0,-0xaa1(%rbp)
	jne    <read_core_chunk+0x19554>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x1958d>
	cmpb   $0x8,-0xaa1(%rbp)
	jne    <read_core_chunk+0x19566>
	addl   $0x3,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x1958d>
	call   <abort@plt>
	movzbl -0xaa2(%rbp),%eax
	mov    %eax,%esi
	lea    0x1f261(%rip),%rax        # <_IO_stdin_used+0x259a>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	jmp    <read_core_chunk+0x195fe>
	movzbl -0xaa2(%rbp),%eax
	and    $0x18,%eax
	cmp    $0x8,%eax
	je     <read_core_chunk+0x195a5>
	cmp    $0x18,%eax
	je     <read_core_chunk+0x195ae>
	jmp    <read_core_chunk+0x195c4>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x195c4>
	movzbl -0xaa2(%rbp),%eax
	shr    $0x5,%al
	movzbl %al,%eax
	add    $0x3,%eax
	add    %eax,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x195fe>
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x195fe>
	movzbl -0xaa2(%rbp),%eax
	and    $0xf,%eax
	mov    %eax,%edx
	mov    0x2fce0(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0x1f209(%rip),%rcx        # <_IO_stdin_used+0x25b0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xaa0(%rbp)
	movzbl -0xaa0(%rbp),%eax
	and    $0xf,%eax
	mov    %al,-0xa9f(%rbp)
	movzbl -0xa9f(%rbp),%eax
	mov    %eax,-0x430(%rbp)
	movzbl -0xa9f(%rbp),%eax
	cmp    $0x4,%eax
	jg     <read_core_chunk+0x19651>
	cmp    $0x3,%eax
	jge    <read_core_chunk+0x19658>
	jmp    <read_core_chunk+0x196cf>
	cmp    $0xc,%eax
	je     <read_core_chunk+0x1968a>
	jmp    <read_core_chunk+0x196cf>
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	movzbl %al,%eax
	mov    %eax,-0x6ec(%rbp)
	addl   $0x1,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x196d4>
	movzbl -0xaa0(%rbp),%eax
	shl    $0x3,%eax
	and    $0x700,%eax
	mov    %eax,%ecx
	mov    -0x6f0(%rbp),%edx
	mov    -0x8dc(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	or     %ecx,%eax
	mov    %eax,-0x6ec(%rbp)
	addl   $0x2,-0x6f0(%rbp)
	jmp    <read_core_chunk+0x196d4>
	call   <abort@plt>
	mov    -0x6f0(%rbp),%eax
	add    %eax,-0x8dc(%rbp)
	jmp    <read_core_chunk+0x19717>
	mov    -0x8dc(%rbp),%edx
	mov    -0x428(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    %eax,%esi
	lea    0x1f12e(%rip),%rax        # <_IO_stdin_used+0x25ed>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	call   <abort@plt>
	nop
	jmp    <read_core_chunk+0x19717>
	nop
	nop
	jmp    <read_core_chunk+0x36>
	leave  
	ret    

<module_populate_atoms_table>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x1c(%rbp)
	mov    -0x30(%rbp),%rax
	add    $0xc,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <calloc@plt>
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,0x58(%rax)
	mov    -0x28(%rbp),%rax
	mov    0x58(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_populate_atoms_table+0x92>
	mov    0x2fb37(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x3d,%edx
	lea    0x20b8b(%rip),%rcx        # <_IO_stdin_used+0x40e0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x1,%eax
	jmp    <module_populate_atoms_table+0x147>
	movq   $0x0,-0x8(%rbp)
	movl   $0x1,-0x20(%rbp)
	jmp    <module_populate_atoms_table+0x136>
	mov    -0x10(%rbp),%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,-0x18(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	shr    $0x1f,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_populate_atoms_table+0x10c>
	mov    0x2faba(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x48,%edx
	lea    0x20b0e(%rip),%rcx        # <_IO_stdin_used+0x40e0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x1,%eax
	jmp    <module_populate_atoms_table+0x147>
	mov    -0x28(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x20(%rbp),%eax
	cltq   
	shl    $0x2,%rax
	add    %rax,%rdx
	mov    -0x14(%rbp),%eax
	mov    %eax,(%rdx)
	mov    -0x18(%rbp),%eax
	cltq   
	add    $0x1,%rax
	add    %rax,-0x10(%rbp)
	addl   $0x1,-0x20(%rbp)
	mov    -0x20(%rbp),%eax
	cmp    -0x1c(%rbp),%eax
	jle    <module_populate_atoms_table+0xa6>
	mov    $0x0,%eax
	leave  
	ret    

<module_build_imported_functions_table>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x30(%rbp)
	mov    -0x30(%rbp),%eax
	cltq   
	mov    $0x8,%esi
	mov    %rax,%rdi
	call   <calloc@plt>
	mov    %rax,%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,0x38(%rax)
	mov    -0x48(%rbp),%rax
	mov    0x38(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_build_imported_functions_table+0x83>
	mov    0x2f9fd(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x5a,%edx
	lea    0x20a51(%rip),%rcx        # <_IO_stdin_used+0x40e0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x1,%eax
	jmp    <module_build_imported_functions_table+0x26b>
	movl   $0x0,-0x34(%rbp)
	jmp    <module_build_imported_functions_table+0x25a>
	mov    -0x34(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x2,%eax
	cltq   
	lea    0xc(%rax),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x2c(%rbp)
	mov    -0x34(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x2,%eax
	cltq   
	lea    0x10(%rax),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x28(%rbp)
	mov    -0x2c(%rbp),%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_string_by_id>
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_string_by_id>
	mov    %rax,-0x18(%rbp)
	mov    -0x34(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x2,%eax
	cltq   
	lea    0x14(%rax),%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x24(%rbp)
	mov    -0x24(%rbp),%edx
	mov    -0x18(%rbp),%rcx
	mov    -0x20(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <bif_registry_get_handler>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	je     <module_build_imported_functions_table+0x157>
	mov    -0x48(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0x34(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	jmp    <module_build_imported_functions_table+0x185>
	mov    -0x24(%rbp),%edx
	mov    -0x18(%rbp),%rcx
	mov    -0x20(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <nifs_get>
	mov    -0x48(%rbp),%rdx
	mov    0x38(%rdx),%rcx
	mov    -0x34(%rbp),%edx
	movslq %edx,%rdx
	shl    $0x3,%rdx
	add    %rcx,%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0x34(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	test   %rax,%rax
	jne    <module_build_imported_functions_table+0x256>
	mov    $0x10,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_build_imported_functions_table+0x1ed>
	mov    0x2f890(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x70,%edx
	lea    0x208e4(%rip),%rcx        # <_IO_stdin_used+0x40e0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x1,%eax
	jmp    <module_build_imported_functions_table+0x26b>
	mov    -0x8(%rbp),%rax
	movl   $0x3,(%rax)
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x2c(%rbp),%eax
	cltq   
	shl    $0x2,%rax
	add    %rdx,%rax
	mov    (%rax),%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0x4(%rax)
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rdx
	mov    -0x28(%rbp),%eax
	cltq   
	shl    $0x2,%rax
	add    %rdx,%rax
	mov    (%rax),%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0x8(%rax)
	mov    -0x24(%rbp),%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0xc(%rax)
	mov    -0x48(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0x34(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rax,(%rdx)
	addl   $0x1,-0x34(%rbp)
	mov    -0x34(%rbp),%eax
	cmp    -0x30(%rbp),%eax
	jl     <module_build_imported_functions_table+0x8f>
	mov    $0x0,%eax
	leave  
	ret    

<module_search_exported_function>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %edx,-0x34(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x1c(%rbp)
	movl   $0x0,-0x20(%rbp)
	jmp    <module_search_exported_function+0xd7>
	mov    -0x20(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x2,%eax
	cltq   
	lea    0xc(%rax),%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_get_atom_string_by_id>
	mov    %rax,-0x8(%rbp)
	mov    -0x20(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x2,%eax
	cltq   
	lea    0x10(%rax),%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x18(%rbp)
	mov    -0x34(%rbp),%eax
	cmp    -0x18(%rbp),%eax
	jne    <module_search_exported_function+0xd3>
	mov    -0x8(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <atom_are_equals>
	test   %eax,%eax
	je     <module_search_exported_function+0xd3>
	mov    -0x20(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x2,%eax
	cltq   
	lea    0x14(%rax),%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	jmp    <module_search_exported_function+0xe8>
	addl   $0x1,-0x20(%rbp)
	mov    -0x20(%rbp),%eax
	cmp    -0x1c(%rbp),%eax
	jl     <module_search_exported_function+0x3e>
	mov    $0x0,%eax
	leave  
	ret    

<module_add_label>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xc(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	pop    %rbp
	ret    

<module_new_from_iff_binary>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xd0,%rsp
	mov    %rdi,-0xb8(%rbp)
	mov    %rsi,-0xc0(%rbp)
	mov    %rdx,-0xc8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0xc0(%rbp),%rax
	mov    %rax,-0xb0(%rbp)
	mov    -0xc8(%rbp),%rax
	mov    %eax,%esi
	lea    -0x50(%rbp),%rcx
	lea    -0xa0(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <scan_iff>
	mov    $0x78,%edi
	call   <malloc@plt>
	mov    %rax,-0xa8(%rbp)
	cmpq   $0x0,-0xa8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_new_from_iff_binary+0xb9>
	mov    0x2f643(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0xaf,%ecx
	lea    0x206d7(%rip),%rdx        # <_IO_stdin_used+0x4120>
	lea    0x20708(%rip),%rsi        # <_IO_stdin_used+0x4158>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	jmp    <module_new_from_iff_binary+0x42b>
	mov    -0xa8(%rbp),%rax
	mov    $0x78,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <memset@plt>
	mov    -0xa8(%rbp),%rax
	movl   $0xffffffff,0x68(%rax)
	mov    -0xa8(%rbp),%rax
	mov    -0xb8(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0xa0(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <module_populate_atoms_table>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_new_from_iff_binary+0x161>
	mov    0x2f5aa(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0xb8,%ecx
	lea    0x2063e(%rip),%rdx        # <_IO_stdin_used+0x4120>
	lea    0x2069f(%rip),%rsi        # <_IO_stdin_used+0x4188>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <module_destroy>
	mov    $0x0,%eax
	jmp    <module_new_from_iff_binary+0x42b>
	mov    -0x80(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <module_build_imported_functions_table>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_new_from_iff_binary+0x1ce>
	mov    0x2f53d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0xbe,%ecx
	lea    0x205d1(%rip),%rdx        # <_IO_stdin_used+0x4120>
	lea    0x20662(%rip),%rsi        # <_IO_stdin_used+0x41b8>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <module_destroy>
	mov    $0x0,%eax
	jmp    <module_new_from_iff_binary+0x42b>
	mov    -0x98(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x90(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x10(%rax)
	mov    -0xa0(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x18(%rax)
	mov    -0x68(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x20(%rax)
	mov    -0x60(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x28(%rax)
	mov    -0x10(%rbp),%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x30(%rax)
	mov    -0xa8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    0x14(%rax),%eax
	bswap  %eax
	mov    %eax,%eax
	mov    $0x8,%esi
	mov    %rax,%rdi
	call   <calloc@plt>
	mov    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x40(%rax)
	mov    -0xa8(%rbp),%rax
	mov    0x40(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_new_from_iff_binary+0x2e9>
	mov    0x2f422(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0xce,%ecx
	lea    0x204b6(%rip),%rdx        # <_IO_stdin_used+0x4120>
	lea    0x20587(%rip),%rsi        # <_IO_stdin_used+0x41f8>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <module_destroy>
	mov    $0x0,%eax
	jmp    <module_new_from_iff_binary+0x42b>
	mov    -0x78(%rbp),%rax
	test   %rax,%rax
	je     <module_new_from_iff_binary+0x385>
	mov    -0x28(%rbp),%rax
	mov    %eax,%edx
	mov    -0x78(%rbp),%rcx
	mov    -0xb0(%rbp),%rax
	add    %rcx,%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <module_uncompress_literals>
	mov    -0xa8(%rbp),%rdx
	mov    %rax,0x48(%rdx)
	mov    -0xa8(%rbp),%rax
	mov    0x48(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_new_from_iff_binary+0x351>
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <module_destroy>
	mov    $0x0,%eax
	jmp    <module_new_from_iff_binary+0x42b>
	mov    -0xa8(%rbp),%rax
	mov    0x48(%rax),%rax
	mov    %rax,%rdi
	call   <module_build_literals_table>
	mov    -0xa8(%rbp),%rdx
	mov    %rax,0x50(%rdx)
	mov    -0xa8(%rbp),%rax
	movzbl 0x70(%rax),%edx
	or     $0x1,%edx
	mov    %dl,0x70(%rax)
	jmp    <module_new_from_iff_binary+0x40b>
	mov    -0x70(%rbp),%rax
	test   %rax,%rax
	je     <module_new_from_iff_binary+0x3dc>
	mov    -0x70(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0xb0(%rbp),%rax
	add    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x48(%rax)
	mov    -0xa8(%rbp),%rax
	mov    0x48(%rax),%rax
	mov    %rax,%rdi
	call   <module_build_literals_table>
	mov    -0xa8(%rbp),%rdx
	mov    %rax,0x50(%rdx)
	mov    -0xa8(%rbp),%rax
	movzbl 0x70(%rax),%edx
	and    $0xfffffffe,%edx
	mov    %dl,0x70(%rax)
	jmp    <module_new_from_iff_binary+0x40b>
	mov    -0xa8(%rbp),%rax
	movq   $0x0,0x48(%rax)
	mov    -0xa8(%rbp),%rax
	movq   $0x0,0x50(%rax)
	mov    -0xa8(%rbp),%rax
	movzbl 0x70(%rax),%edx
	and    $0xfffffffe,%edx
	mov    %dl,0x70(%rax)
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <read_core_chunk>
	mov    -0xa8(%rbp),%rdx
	mov    %eax,0x6c(%rdx)
	mov    -0xa8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <module_new_from_iff_binary+0x43f>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<module_destroy>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x40(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    0x38(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    0x50(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	movzbl 0x70(%rax),%eax
	and    $0x1,%eax
	test   %al,%al
	je     <module_destroy+0x5f>
	mov    -0x8(%rbp),%rax
	mov    0x48(%rax),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<module_uncompress_literals>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xa0,%rsp
	mov    %rdi,-0x98(%rbp)
	mov    %esi,-0x9c(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x98(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x90(%rbp)
	mov    -0x90(%rbp),%eax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x88(%rbp)
	cmpq   $0x0,-0x88(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_uncompress_literals+0x99>
	mov    0x2f1b4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x105,%ecx
	lea    0x20248(%rip),%rdx        # <_IO_stdin_used+0x4120>
	lea    0x20341(%rip),%rsi        # <_IO_stdin_used+0x4220>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	jmp    <module_uncompress_literals+0x191>
	movq   $0x0,-0x40(%rbp)
	movq   $0x0,-0x38(%rbp)
	movq   $0x0,-0x30(%rbp)
	mov    -0x9c(%rbp),%eax
	sub    $0x8,%eax
	mov    %eax,-0x78(%rbp)
	mov    -0x98(%rbp),%rax
	add    $0xc,%rax
	mov    %rax,-0x80(%rbp)
	mov    -0x90(%rbp),%eax
	mov    %eax,-0x60(%rbp)
	mov    -0x88(%rbp),%rax
	mov    %rax,-0x68(%rbp)
	lea    -0x80(%rbp),%rax
	mov    $0x70,%edx
	lea    0x202f6(%rip),%rcx        # <_IO_stdin_used+0x4243>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <inflateInit_@plt>
	mov    %eax,-0x8c(%rbp)
	cmpl   $0x0,-0x8c(%rbp)
	je     <module_uncompress_literals+0x134>
	mov    0x2f112(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x13,%edx
	mov    $0x1,%esi
	lea    0x202c8(%rip),%rax        # <_IO_stdin_used+0x424a>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    $0x0,%eax
	jmp    <module_uncompress_literals+0x191>
	lea    -0x80(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <inflate@plt>
	mov    %eax,-0x8c(%rbp)
	cmpl   $0x0,-0x8c(%rbp)
	je     <module_uncompress_literals+0x17e>
	mov    0x2f0c8(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0xf,%edx
	mov    $0x1,%esi
	lea    0x20292(%rip),%rax        # <_IO_stdin_used+0x425e>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    $0x0,%eax
	jmp    <module_uncompress_literals+0x191>
	lea    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <inflateEnd@plt>
	mov    -0x88(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <module_uncompress_literals+0x1a5>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<module_build_literals_table>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	add    $0x4,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%eax
	mov    $0x10,%esi
	mov    %rax,%rdi
	call   <calloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_build_literals_table+0x79>
	mov    0x2f02a(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x12a,%ecx
	lea    0x200be(%rip),%rdx        # <_IO_stdin_used+0x4120>
	lea    0x201b7(%rip),%rsi        # <_IO_stdin_used+0x4220>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	jmp    <module_build_literals_table+0xdb>
	movl   $0x0,-0x1c(%rbp)
	jmp    <module_build_literals_table+0xcf>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x14(%rbp)
	mov    -0x1c(%rbp),%eax
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x14(%rbp),%eax
	mov    %eax,(%rdx)
	mov    -0x1c(%rbp),%eax
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    -0x10(%rbp),%rdx
	add    $0x4,%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x14(%rbp),%eax
	add    $0x4,%rax
	add    %rax,-0x10(%rbp)
	addl   $0x1,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	cmp    -0x18(%rbp),%eax
	jb     <module_build_literals_table+0x82>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<module_load_literal>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x50(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	mov    %eax,%esi
	mov    -0x18(%rbp),%rax
	mov    0x50(%rax),%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	add    %rdx,%rax
	mov    0x8(%rax),%rax
	mov    -0x28(%rbp),%rdx
	mov    $0x1,%ecx
	mov    %rax,%rdi
	call   <externalterm_to_term>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <module_load_literal+0x92>
	mov    0x2ef2c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x1c(%rbp),%edx
	lea    0x20112(%rip),%rcx        # <_IO_stdin_used+0x4270>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<module_resolve_function>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x160,%rsp
	mov    %rdi,-0x158(%rbp)
	mov    %esi,-0x15c(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x158(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0x15c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x140(%rbp)
	mov    -0x140(%rbp),%rax
	mov    %rax,-0x138(%rbp)
	mov    -0x138(%rbp),%rax
	mov    0x4(%rax),%eax
	movslq %eax,%rcx
	mov    -0x158(%rbp),%rax
	mov    (%rax),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x130(%rbp)
	mov    -0x138(%rbp),%rax
	mov    0x8(%rax),%eax
	movslq %eax,%rcx
	mov    -0x158(%rbp),%rax
	mov    (%rax),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x128(%rbp)
	mov    -0x138(%rbp),%rax
	mov    0xc(%rax),%eax
	mov    %eax,-0x148(%rbp)
	mov    -0x158(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x130(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_get_module>
	mov    %rax,-0x120(%rbp)
	cmpq   $0x0,-0x120(%rbp)
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_resolve_function+0x253>
	mov    -0x148(%rbp),%edx
	mov    -0x128(%rbp),%rcx
	mov    -0x120(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_search_exported_function>
	mov    %eax,-0x144(%rbp)
	cmpl   $0x0,-0x144(%rbp)
	jne    <module_resolve_function+0x193>
	mov    -0x148(%rbp),%esi
	mov    -0x128(%rbp),%rcx
	mov    -0x130(%rbp),%rdx
	lea    -0x110(%rbp),%rax
	mov    %esi,%r8d
	mov    $0x100,%esi
	mov    %rax,%rdi
	call   <atom_write_mfa>
	mov    0x2ed9c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    -0x110(%rbp),%rdx
	lea    0x1ffb6(%rip),%rcx        # <_IO_stdin_used+0x42a8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	jmp    <module_resolve_function+0x29b>
	mov    $0x18,%edi
	call   <malloc@plt>
	mov    %rax,-0x118(%rbp)
	cmpq   $0x0,-0x118(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_resolve_function+0x1e8>
	mov    0x2ed49(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x157,%ecx
	lea    0x1fddd(%rip),%rdx        # <_IO_stdin_used+0x4120>
	lea    0x1fed6(%rip),%rsi        # <_IO_stdin_used+0x4220>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	jmp    <module_resolve_function+0x29b>
	mov    -0x118(%rbp),%rax
	movl   $0x4,(%rax)
	mov    -0x118(%rbp),%rax
	mov    -0x120(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x118(%rbp),%rax
	mov    -0x144(%rbp),%edx
	mov    %edx,0x10(%rax)
	mov    -0x138(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x158(%rbp),%rax
	mov    0x38(%rax),%rdx
	mov    -0x15c(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x118(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x118(%rbp),%rax
	jmp    <module_resolve_function+0x29b>
	lea    -0x110(%rbp),%rcx
	mov    -0x130(%rbp),%rax
	mov    $0x100,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atom_string_to_c>
	mov    0x2ec8f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    -0x110(%rbp),%rdx
	lea    0x1fed9(%rip),%rcx        # <_IO_stdin_used+0x42d8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <module_resolve_function+0x2af>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<atom_string_len>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	pop    %rbp
	ret    

<atom_string_data>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x1,%rax
	pop    %rbp
	ret    

<list_is_empty>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jne    <list_is_empty+0x2a>
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jne    <list_is_empty+0x2a>
	mov    $0x1,%eax
	jmp    <list_is_empty+0x2f>
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_atom>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0xb,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nonempty_list>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x1,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_list>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_is_list+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_is_list+0x33>
	mov    $0x1,%eax
	jmp    <term_is_list+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_get_size_from_boxed_header>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_boxed_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_is_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	jne    <term_is_binary+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    $0x28,%eax
	seta   %dl
	test   %dl,%dl
	jne    <term_is_binary+0x69>
	movabs $0x11100000000,%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	test   %al,%al
	je     <term_is_binary+0x69>
	mov    $0x1,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_refc_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_refc_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x20,-0xc(%rbp)
	sete   %al
	jmp    <term_is_refc_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_refc_binary_is_const>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	leave  
	ret    

<term_is_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_sub_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x28,-0xc(%rbp)
	sete   %al
	jmp    <term_is_sub_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_boxed_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_boxed_integer+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x8,%rax
	jne    <term_is_boxed_integer+0x43>
	mov    $0x1,%eax
	jmp    <term_is_boxed_integer+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_any_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <term_is_any_integer+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <term_is_any_integer+0x33>
	mov    $0x1,%eax
	jmp    <term_is_any_integer+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_pid>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0x3,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_reference>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_reference+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x10,%rax
	jne    <term_is_reference+0x43>
	mov    $0x1,%eax
	jmp    <term_is_reference+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_function>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_function+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x14,%rax
	jne    <term_is_function+0x43>
	mov    $0x1,%eax
	jmp    <term_is_function+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x3b,%eax
	pop    %rbp
	ret    

<term_to_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<term_to_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%eax
	pop    %rbp
	ret    

<term_to_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%rax
	pop    %rbp
	ret    

<term_to_local_process_id>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x4,%rax
	pop    %rbp
	ret    

<term_from_int11>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,%eax
	mov    %ax,-0x4(%rbp)
	movswl -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_from_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_from_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shl    $0x4,%rax
	or     $0xf,%rax
	pop    %rbp
	ret    

<term_unbox_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_unbox_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_maybe_unbox_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_maybe_unbox_int64+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	cmp    $0x1,%eax
	jne    <term_maybe_unbox_int64+0x3b>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	jmp    <term_maybe_unbox_int64+0x55>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int64>
	jmp    <term_maybe_unbox_int64+0x55>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	leave  
	ret    

<term_put_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x48,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	pop    %rbp
	ret    

<term_make_boxed_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_put_int>
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_from_local_process_id>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0x3,%eax
	mov    %eax,%eax
	pop    %rbp
	ret    

<term_binary_size_is_heap_binary>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	cmpl   $0x3f,-0x4(%rbp)
	setbe  %al
	pop    %rbp
	ret    

<term_binary_data_size_in_terms>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_binary_data_size_in_terms+0x27>
	mov    -0x4(%rbp),%eax
	add    $0x7,%eax
	shr    $0x3,%eax
	add    $0x1,%eax
	jmp    <term_binary_data_size_in_terms+0x2c>
	mov    $0x6,%eax
	leave  
	ret    

<term_binary_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_binary_data+0x5e>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	test   %al,%al
	je     <term_binary_data+0x49>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <refc_binary_get_data>
	jmp    <term_binary_data+0x9c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	je     <term_binary_data+0x94>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	add    %rdx,%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	leave  
	ret    

<term_create_uninitialized_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_create_uninitialized_binary+0x6f>
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0xc(%rbp),%eax
	shl    $0x6,%eax
	or     $0x24,%eax
	movslq %eax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x14(%rbp),%eax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	jmp    <term_create_uninitialized_binary+0x86>
	mov    -0x14(%rbp),%ecx
	mov    -0x20(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_refc_binary>
	leave  
	ret    

<term_from_literal_binary>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x2c(%rbp),%eax
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_create_uninitialized_binary>
	mov    %rax,-0x18(%rbp)
	mov    -0x2c(%rbp),%ebx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_sub_binary_heap_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_sub_binary_heap_size+0x2e>
	cmpq   $0xf,-0x10(%rbp)
	jbe    <term_sub_binary_heap_size+0x2e>
	mov    $0x4,%eax
	jmp    <term_sub_binary_heap_size+0x3e>
	mov    -0x10(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	cltq   
	leave  
	ret    

<term_maybe_create_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_maybe_create_sub_binary+0x49>
	cmpq   $0xf,-0x28(%rbp)
	jbe    <term_maybe_create_sub_binary+0x49>
	mov    -0x30(%rbp),%rcx
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rsi
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_alloc_sub_binary>
	jmp    <term_maybe_create_sub_binary+0x7a>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %eax,%esi
	mov    -0x8(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdx
	mov    %rcx,%rdi
	call   <term_from_literal_binary>
	leave  
	ret    

<term_set_refc_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_from_const_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x1c(%rbp),%ecx
	mov    -0x28(%rbp),%rax
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_refc_binary>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_set_refc_binary_data>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<term_create_empty_binary>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x28,%rsp
	mov    %edi,-0x24(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x24(%rbp),%eax
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_create_uninitialized_binary>
	mov    %rax,-0x18(%rbp)
	mov    -0x24(%rbp),%ebx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rbx,%rdx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <memset@plt>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_from_ref_ticks>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x50,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_to_ref_ticks>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_alloc_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x14(%rbp),%eax
	shl    $0x6,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_put_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_arity>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_from_string>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,%eax
	mov    %rdx,-0x38(%rbp)
	mov    %ax,-0x2c(%rbp)
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x18(%rbp)
	movl   $0x0,-0x1c(%rbp)
	jmp    <term_from_string+0xb4>
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x2,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    -0x18(%rbp),%rax
	add    %rcx,%rax
	or     $0x1,%rdx
	mov    %rdx,(%rax)
	mov    -0x1c(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	movslq %eax,%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    -0x1c(%rbp),%edx
	movslq %edx,%rdx
	add    $0x1,%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x18(%rbp),%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,(%rbx)
	addl   $0x2,-0x1c(%rbp)
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	cmp    %eax,-0x1c(%rbp)
	jl     <term_from_string+0x3a>
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	cltq   
	shl    $0x3,%rax
	lea    -0x10(%rax),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	movq   $0x3b,(%rax)
	mov    -0x18(%rbp),%rax
	or     $0x1,%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffe,%rax
	pop    %rbp
	ret    

<term_list_from_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	or     $0x1,%rax
	pop    %rbp
	ret    

<term_get_list_head>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	leave  
	ret    

<term_get_list_tail>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_list_alloc>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	leave  
	ret    

<term_list_init_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x1,%rax
	pop    %rbp
	ret    

<term_list_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x20(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_list_init_prepend>
	leave  
	ret    

<term_list_length>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	movl   $0x0,-0x4(%rbp)
	jmp    <term_list_length+0x2d>
	addl   $0x1,-0x4(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_list_length+0x19>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	mov    -0x20(%rbp),%rdx
	mov    %eax,(%rdx)
	mov    -0x4(%rbp),%eax
	leave  
	ret    

<term_equals>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jne    <term_equals+0x25>
	mov    $0x1,%eax
	jmp    <term_equals+0x44>
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	leave  
	ret    

<term_is_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_float+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x18,%rax
	sete   %al
	movzbl %al,%eax
	jmp    <term_is_float+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_from_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	movsd  %xmm0,-0x18(%rbp)
	mov    %rdi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	movq   $0x58,(%rax)
	mov    -0x10(%rbp),%rax
	add    $0x8,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movsd  -0x18(%rbp),%xmm0
	movsd  %xmm0,(%rax)
	mov    -0x10(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_to_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	add    $0x8,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movsd  (%rax),%xmm0
	movq   %xmm0,%rax
	movq   %rax,%xmm0
	leave  
	ret    

<term_list_member>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <term_list_member+0x60>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	je     <term_list_member+0x50>
	mov    $0x1,%eax
	jmp    <term_list_member+0x75>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_list_member+0x1e>
	mov    $0x0,%eax
	leave  
	ret    

<term_make_function_reference>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <term_make_function_reference+0x39>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <term_make_function_reference+0x8e>
	mov    -0x30(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0xd4,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	lea    0x10(%rax),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_is_map>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_map+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x3c,%rax
	jne    <term_is_map+0x43>
	mov    $0x1,%eax
	jmp    <term_is_map+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_map_keys_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	pop    %rbp
	ret    

<term_get_map_value_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	pop    %rbp
	ret    

<term_get_map_keys>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_map_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	leave  
	ret    

<term_get_map_key>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x10,%rsp
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %eax,%ebx
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %ebx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_map_value>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x20(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<globalcontext_get_ref_ticks>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xa0(%rax),%rax
	lea    0x1(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0xa0(%rax)
	mov    -0x8(%rbp),%rax
	mov    0xa0(%rax),%rax
	pop    %rbp
	ret    

<context_avail_free_memory>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xf0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<context_memory_size>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xe8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<context_heap_size>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xf0(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xe0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<context_stack_size>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xe8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xf8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<context_make_atom>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x20(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	mov    %eax,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_atom_index>
	leave  
	ret    

<module_address>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    %esi,-0x8(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x18,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%eax
	shl    $0x2,%eax
	or     %edx,%eax
	mov    %eax,%eax
	pop    %rbp
	ret    

<module_get_fun>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    %r8,-0x38(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0xc(%rbp)
	mov    -0x1c(%rbp),%eax
	cmp    -0xc(%rbp),%eax
	setge  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <module_get_fun+0x4c>
	call   <abort@plt>
	mov    -0x1c(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x3,%eax
	cltq   
	lea    0x10(%rax),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x1c(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x3,%eax
	cltq   
	lea    0x14(%rax),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x1c(%rbp),%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %edx,%eax
	shl    $0x3,%eax
	cltq   
	lea    0x1c(%rax),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	nop
	leave  
	ret    

<hash>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	mov    %rdi,%rax
	mov    %rsi,%rdx
	mov    %edx,%ebx
	cmp    $0x9,%ebx
	ja     <hash+0x19>
	cmp    $0x8,%ebx
	jae    <hash+0x5b>
	jmp    <hash+0x21>
	lea    -0xa(%rbx),%ecx
	cmp    $0x7,%ecx
	jbe    <hash+0x3e>
	lea    0x11(%rax),%rcx
	movzbl (%rcx),%ecx
	movzbl %cl,%ecx
	movslq %ecx,%rcx
	lea    0x1f419(%rip),%rsi        # <asso_values.0>
	movzbl (%rcx,%rsi,1),%ecx
	movzbl %cl,%ecx
	add    %ecx,%ebx
	lea    0x9(%rax),%rcx
	movzbl (%rcx),%ecx
	movzbl %cl,%ecx
	movslq %ecx,%rcx
	lea    0x1f3fc(%rip),%rsi        # <asso_values.0>
	movzbl (%rcx,%rsi,1),%ecx
	movzbl %cl,%ecx
	add    %ecx,%ebx
	lea    0x7(%rax),%rcx
	movzbl (%rcx),%ecx
	movzbl %cl,%ecx
	movslq %ecx,%rcx
	lea    0x1f3df(%rip),%rsi        # <asso_values.0>
	movzbl (%rcx,%rsi,1),%ecx
	movzbl %cl,%ecx
	add    %ecx,%ebx
	nop
	sub    $0x1,%rdx
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	cltq   
	lea    0x1f3bf(%rip),%rdx        # <asso_values.0>
	movzbl (%rax,%rdx,1),%eax
	movzbl %al,%eax
	add    %ebx,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_in_word_set>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %r13
	push   %r12
	push   %rbx
	sub    $0x8,%rsp
	mov    %rdi,%rbx
	mov    %rsi,%rax
	cmp    $0x20,%rax
	ja     <nif_in_word_set+0x88>
	cmp    $0x9,%rax
	jbe    <nif_in_word_set+0x88>
	mov    %rax,%rsi
	mov    %rbx,%rdi
	call   <hash>
	mov    %eax,%r12d
	cmp    $0xc9,%r12d
	ja     <nif_in_word_set+0x88>
	mov    %r12d,%eax
	shl    $0x4,%rax
	mov    %rax,%rdx
	lea    0x2b6e5(%rip),%rax        # <wordlist.1>
	mov    (%rdx,%rax,1),%r13
	movzbl (%rbx),%edx
	movzbl 0x0(%r13),%eax
	cmp    %al,%dl
	jne    <nif_in_word_set+0x88>
	lea    0x1(%r13),%rdx
	lea    0x1(%rbx),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <nif_in_word_set+0x88>
	mov    %r12d,%eax
	shl    $0x4,%rax
	mov    %rax,%rdx
	lea    0x2b6ad(%rip),%rax        # <wordlist.1>
	add    %rdx,%rax
	jmp    <nif_in_word_set+0x8d>
	mov    $0x0,%eax
	add    $0x8,%rsp
	pop    %rbx
	pop    %r12
	pop    %r13
	pop    %rbp
	ret    

<nifs_get>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x148,%rsp
	mov    %rdi,-0x138(%rbp)
	mov    %rsi,-0x140(%rbp)
	mov    %edx,-0x144(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x138(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0x130(%rbp)
	mov    -0x130(%rbp),%eax
	movslq %eax,%rbx
	mov    -0x138(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,%rcx
	lea    -0x120(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x130(%rbp),%eax
	cltq   
	movb   $0x3a,-0x120(%rbp,%rax,1)
	mov    -0x140(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0x12c(%rbp)
	cmpl   $0x9,-0x144(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <nifs_get+0xcd>
	mov    -0x130(%rbp),%edx
	mov    -0x12c(%rbp),%eax
	add    %edx,%eax
	cmp    $0x100,%eax
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nifs_get+0xd2>
	call   <abort@plt>
	mov    -0x12c(%rbp),%eax
	movslq %eax,%rbx
	mov    -0x140(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,%rcx
	mov    -0x130(%rbp),%eax
	cltq   
	lea    0x1(%rax),%rdx
	lea    -0x120(%rbp),%rax
	add    %rdx,%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x130(%rbp),%edx
	mov    -0x12c(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	cltq   
	movb   $0x2f,-0x120(%rbp,%rax,1)
	mov    -0x144(%rbp),%eax
	lea    0x30(%rax),%ecx
	mov    -0x130(%rbp),%edx
	mov    -0x12c(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %ecx,%edx
	cltq   
	mov    %dl,-0x120(%rbp,%rax,1)
	mov    -0x130(%rbp),%edx
	mov    -0x12c(%rbp),%eax
	add    %edx,%eax
	add    $0x3,%eax
	cltq   
	movb   $0x0,-0x120(%rbp,%rax,1)
	lea    -0x120(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %rax,%rdx
	lea    -0x120(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <nif_in_word_set>
	mov    %rax,-0x128(%rbp)
	cmpq   $0x0,-0x128(%rbp)
	jne    <nifs_get+0x1b2>
	lea    -0x120(%rbp),%rax
	mov    %rax,%rdi
	call   <platform_nifs_get_nif>
	jmp    <nifs_get+0x1bd>
	mov    -0x128(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nifs_get+0x1d1>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<make_maybe_boxed_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	movabs $0xf800000000000000,%rax
	cmp    %rax,-0x10(%rbp)
	jl     <make_maybe_boxed_int64+0x30>
	movabs $0x7ffffffffffffff,%rax
	cmp    %rax,-0x10(%rbp)
	jle    <make_maybe_boxed_int64+0x93>
	mov    -0x8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <make_maybe_boxed_int64+0x7e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <make_maybe_boxed_int64+0x9f>
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_make_boxed_int>
	jmp    <make_maybe_boxed_int64+0x9f>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	leave  
	ret    

<nif_erlang_iolist_size_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	lea    -0x14(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_iolist_size>
	cltq   
	mov    %rax,-0x10(%rbp)
	mov    -0x14(%rbp),%eax
	test   %eax,%eax
	je     <nif_erlang_iolist_size_1+0x57>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	jmp    <nif_erlang_iolist_size_1+0x85>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_iolist_size_1+0x99>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_iolist_to_binary_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <nif_erlang_iolist_to_binary_1+0x4a>
	mov    -0x20(%rbp),%rax
	jmp    <nif_erlang_iolist_to_binary_1+0x1c4>
	lea    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_iolist_size>
	mov    %eax,-0x24(%rbp)
	mov    -0x28(%rbp),%eax
	test   %eax,%eax
	jne    <nif_erlang_iolist_to_binary_1+0x9a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_iolist_to_binary_1+0x1c4>
	mov    -0x24(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_iolist_to_binary_1+0xee>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_iolist_to_binary_1+0x1c4>
	mov    -0x18(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_write_iolist>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_iolist_to_binary_1+0x141>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_iolist_to_binary_1+0x1c4>
	mov    -0x24(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_iolist_to_binary_1+0x19b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_iolist_to_binary_1+0x1c4>
	mov    -0x24(%rbp),%ecx
	mov    -0x38(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_iolist_to_binary_1+0x1d8>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_open_port_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %esi,-0x5c(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_open_port_2+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_open_port_2+0x2ba>
	mov    -0x68(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_open_port_2+0xda>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_open_port_2+0x2ba>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    $0x2,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_open_port_2+0x127>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_open_port_2+0x2ba>
	mov    -0x38(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x28(%rbp)
	lea    -0x44(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_term_to_string>
	mov    %rax,-0x20(%rbp)
	mov    -0x44(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_open_port_2+0x196>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_open_port_2+0x2ba>
	movq   $0x0,-0x40(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rsi
	lea    0x1e49f(%rip),%rax        # <_IO_stdin_used+0x4300>
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <nif_erlang_open_port_2+0x1e3>
	mov    -0x58(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <context_new>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	lea    0x2c5(%rip),%rdx        # <process_echo_mailbox>
	mov    %rdx,0x168(%rax)
	jmp    <nif_erlang_open_port_2+0x226>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rsi
	lea    0x1e45f(%rip),%rax        # <_IO_stdin_used+0x4305>
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <nif_erlang_open_port_2+0x226>
	mov    -0x58(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <context_new>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	lea    0x7e1(%rip),%rdx        # <process_console_mailbox>
	mov    %rdx,0x168(%rax)
	cmpq   $0x0,-0x40(%rbp)
	jne    <nif_erlang_open_port_2+0x24f>
	mov    -0x58(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x30(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <sys_create_port>
	mov    %rax,-0x40(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	cmpq   $0x0,-0x40(%rbp)
	jne    <nif_erlang_open_port_2+0x292>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_open_port_2+0x2ba>
	mov    -0x58(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x40(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_make_waiting>
	mov    -0x40(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_open_port_2+0x2ce>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_register_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_register_2+0x71>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_register_2+0x10b>
	mov    -0x48(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_register_2+0xc8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_register_2+0x10b>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x24(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x24(%rbp),%edx
	mov    -0x28(%rbp),%ecx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <globalcontext_register_process>
	mov    $0x0,%eax
	call   <term_nil>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_whereis_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_whereis_1+0x6e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x38(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_whereis_1+0xb4>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x20(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_registered_process>
	mov    %eax,-0x1c(%rbp)
	cmpl   $0x0,-0x1c(%rbp)
	je     <nif_erlang_whereis_1+0xaa>
	mov    -0x1c(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	jmp    <nif_erlang_whereis_1+0xb4>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<process_echo_mailbox>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_dequeue>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x24(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x24(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <mailbox_send>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<is_tagged_tuple>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %edx,-0x14(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <is_tagged_tuple+0x56>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    %eax,-0x14(%rbp)
	jne    <is_tagged_tuple+0x56>
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	cmp    %rax,-0x10(%rbp)
	jne    <is_tagged_tuple+0x56>
	mov    $0x1,%eax
	jmp    <is_tagged_tuple+0x5b>
	mov    $0x0,%eax
	and    $0x1,%eax
	leave  
	ret    

<process_console_message>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xa0,%rsp
	mov    %rdi,-0x98(%rbp)
	mov    %rsi,-0xa0(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x98(%rbp),%rax
	mov    $0xc,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0xa0(%rbp),%rax
	mov    $0x4,%edx
	mov    $0xdcb,%esi
	mov    %rax,%rdi
	call   <is_tagged_tuple>
	test   %al,%al
	je     <process_console_message+0x1d5>
	mov    -0xa0(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x48(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x40(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x38(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_ref_ticks>
	mov    %rax,-0x30(%rbp)
	mov    -0x38(%rbp),%rax
	mov    $0x3,%edx
	mov    $0xe4b,%esi
	mov    %rax,%rdi
	call   <is_tagged_tuple>
	test   %al,%al
	je     <process_console_message+0x44b>
	mov    -0x38(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x28(%rbp)
	lea    -0x84(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_term_to_string>
	mov    %rax,-0x20(%rbp)
	mov    -0x84(%rbp),%eax
	test   %eax,%eax
	je     <process_console_message+0x44b>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rsi
	lea    0x1df98(%rip),%rax        # <_IO_stdin_used+0x430d>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x98(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x18(%rbp)
	mov    -0x98(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x3,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    $0xe0b,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rdx
	mov    -0x48(%rbp),%rcx
	mov    -0x98(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_send_message>
	jmp    <process_console_message+0x44b>
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <port_is_standard_port_command>
	test   %eax,%eax
	je     <process_console_message+0x426>
	mov    -0xa0(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x80(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x78(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x70(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <process_console_message+0x28c>
	mov    $0xe,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x70(%rbp)
	jne    <process_console_message+0x28c>
	mov    0x2cbb2(%rip),%rax        # <stdout@GLIBC_2.2.5>
	mov    %rax,%rdi
	call   <fflush@plt>
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x78(%rbp),%rdx
	mov    -0x80(%rbp),%rsi
	mov    -0x98(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <process_console_message+0x44b>
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <process_console_message+0x3eb>
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    $0x2,%eax
	jne    <process_console_message+0x3eb>
	mov    -0x70(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x68(%rbp)
	mov    $0x14,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x68(%rbp)
	jne    <process_console_message+0x3ab>
	mov    -0x70(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdx
	lea    -0x84(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <interop_term_to_string>
	mov    %rax,-0x58(%rbp)
	mov    -0x84(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <process_console_message+0x35b>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x98(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rcx
	mov    -0x78(%rbp),%rdx
	mov    -0x80(%rbp),%rsi
	mov    -0x98(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <process_console_message+0x39a>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rsi
	lea    0x1dd51(%rip),%rax        # <_IO_stdin_used+0x430d>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <printf@plt>
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x78(%rbp),%rdx
	mov    -0x80(%rbp),%rsi
	mov    -0x98(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	jmp    <process_console_message+0x44b>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x98(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	mov    %rax,-0x60(%rbp)
	mov    -0x60(%rbp),%rcx
	mov    -0x78(%rbp),%rdx
	mov    -0x80(%rbp),%rsi
	mov    -0x98(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <process_console_message+0x44b>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x98(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	mov    %rax,%rcx
	mov    -0x78(%rbp),%rdx
	mov    -0x80(%rbp),%rsi
	mov    -0x98(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <process_console_message+0x44b>
	mov    0x2ca00(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x34,%edx
	mov    $0x1,%esi
	lea    0x1dc7c(%rip),%rax        # <_IO_stdin_used+0x4310>
	mov    %rax,%rdi
	call   <fwrite@plt>
	jmp    <process_console_message+0x44b>
	nop
	mov    -0x8(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <process_console_message+0x460>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<process_console_mailbox>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	jmp    <process_console_mailbox+0x4d>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_dequeue>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <process_console_message>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_destroy_message>
	mov    -0x18(%rbp),%rax
	add    $0x130,%rax
	mov    %rax,%rdi
	call   <list_is_empty>
	test   %eax,%eax
	je     <process_console_mailbox+0x12>
	nop
	nop
	leave  
	ret    

<nif_erlang_spawn_fun>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x88,%rsp
	mov    %rdi,-0x78(%rbp)
	mov    %esi,-0x7c(%rbp)
	mov    %rdx,-0x88(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x88(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0x88(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x50(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_function>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn_fun+0x9e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x88(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn_fun+0x35d>
	cmpl   $0x2,-0x7c(%rbp)
	jne    <nif_erlang_spawn_fun+0xf8>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn_fun+0x106>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x88(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn_fun+0x35d>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x50(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <context_new>
	mov    %rax,-0x40(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0x1a0(%rax),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rdx,0x1a0(%rax)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x38(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <nif_erlang_spawn_fun+0x176>
	call   <abort@plt>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int32>
	mov    %eax,-0x54(%rbp)
	mov    -0x54(%rbp),%esi
	lea    -0x64(%rbp),%rdi
	lea    -0x68(%rbp),%rcx
	lea    -0x6c(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <module_get_fun>
	movl   $0x0,-0x60(%rbp)
	movl   $0x0,-0x5c(%rbp)
	jmp    <nif_erlang_spawn_fun+0x1e3>
	mov    -0x5c(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x38(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <memory_estimate_usage>
	mov    %eax,%edx
	mov    -0x60(%rbp),%eax
	add    %edx,%eax
	mov    %eax,-0x60(%rbp)
	addl   $0x1,-0x5c(%rbp)
	mov    -0x64(%rbp),%eax
	cmp    %eax,-0x5c(%rbp)
	jb     <nif_erlang_spawn_fun+0x1b3>
	mov    -0x60(%rbp),%edx
	mov    -0x40(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn_fun+0x231>
	mov    0x2c754(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x37,%edx
	mov    $0x1,%esi
	lea    0x1da08(%rip),%rax        # <_IO_stdin_used+0x4348>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	movl   $0x0,-0x58(%rbp)
	jmp    <nif_erlang_spawn_fun+0x297>
	mov    -0x40(%rbp),%rax
	lea    0x1c0(%rax),%rdx
	mov    -0x58(%rbp),%eax
	add    $0x3,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rcx
	mov    -0x38(%rbp),%rax
	add    %rcx,%rax
	mov    (%rax),%rax
	mov    -0x40(%rbp),%rcx
	add    $0xf0,%rcx
	mov    -0x68(%rbp),%edi
	mov    -0x58(%rbp),%esi
	add    %edi,%esi
	mov    -0x64(%rbp),%edi
	mov    %esi,%ebx
	sub    %edi,%ebx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memory_copy_term_tree>
	mov    -0x40(%rbp),%rdx
	mov    %ebx,%ecx
	add    $0xa,%rcx
	mov    %rax,0x8(%rdx,%rcx,8)
	addl   $0x1,-0x58(%rbp)
	mov    -0x64(%rbp),%eax
	cmp    %eax,-0x58(%rbp)
	jb     <nif_erlang_spawn_fun+0x23a>
	mov    -0x40(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	mov    %rdx,0x118(%rax)
	mov    -0x30(%rbp),%rax
	mov    0x40(%rax),%rax
	mov    -0x6c(%rbp),%edx
	mov    %edx,%edx
	shl    $0x3,%rdx
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x30(%rbp),%rax
	mov    0x6c(%rax),%eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    0x68(%rax),%eax
	mov    %edx,%esi
	mov    %eax,%edi
	call   <module_address>
	mov    -0x40(%rbp),%rdx
	mov    %rax,0x110(%rdx)
	mov    $0x11,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x50(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x20(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	cmp    %rax,-0x20(%rbp)
	je     <nif_erlang_spawn_fun+0x34f>
	mov    -0x40(%rbp),%rax
	movzbl 0x178(%rax),%edx
	or     $0x4,%edx
	mov    %dl,0x178(%rax)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    -0x40(%rbp),%rdx
	mov    %rax,0x108(%rdx)
	mov    -0x40(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_spawn_fun+0x371>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_spawn>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xd8,%rsp
	mov    %rdi,-0xc8(%rbp)
	mov    %esi,-0xcc(%rbp)
	mov    %rdx,-0xd8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0xd8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x88(%rbp)
	mov    -0xd8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x80(%rbp)
	mov    -0xd8(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x78(%rbp)
	mov    -0xd8(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0xa8(%rbp)
	mov    -0x88(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0xcb>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xd8(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0xd8(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn+0x928>
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x11f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xd8(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0xd8(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn+0x928>
	mov    -0x78(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x173>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xd8(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0xd8(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn+0x928>
	cmpl   $0x4,-0xcc(%rbp)
	jne    <nif_erlang_spawn+0x1d3>
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x1e4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xd8(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0xd8(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn+0x928>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0xa8(%rbp)
	mov    -0xc8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <context_new>
	mov    %rax,-0x70(%rbp)
	mov    -0xc8(%rbp),%rax
	mov    0x1a0(%rax),%rdx
	mov    -0x70(%rbp),%rax
	mov    %rdx,0x1a0(%rax)
	mov    -0xd8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x68(%rbp)
	mov    -0xd8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rdx
	mov    -0xc8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x60(%rbp)
	mov    -0xc8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x68(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_get_module>
	mov    %rax,-0x58(%rbp)
	cmpq   $0x0,-0x58(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x2a9>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	jmp    <nif_erlang_spawn+0x928>
	mov    -0xd8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	lea    -0xc0(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_list_length>
	mov    %eax,-0xb8(%rbp)
	mov    -0xc0(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x31b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xc8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0xc8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn+0x928>
	mov    -0xb8(%rbp),%edx
	mov    -0x60(%rbp),%rcx
	mov    -0x58(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_search_exported_function>
	mov    %eax,-0xb4(%rbp)
	cmpl   $0x0,-0xb4(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x351>
	call   <abort@plt>
	mov    -0x70(%rbp),%rax
	mov    -0x58(%rbp),%rdx
	mov    %rdx,0x118(%rax)
	mov    -0x58(%rbp),%rax
	mov    0x40(%rax),%rdx
	mov    -0xb4(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x70(%rbp),%rax
	mov    %rdx,0x120(%rax)
	mov    -0x58(%rbp),%rax
	mov    0x6c(%rax),%eax
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    0x68(%rax),%eax
	mov    %edx,%esi
	mov    %eax,%edi
	call   <module_address>
	mov    -0x70(%rbp),%rdx
	mov    %rax,0x110(%rdx)
	mov    $0x16,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0xa0(%rbp)
	mov    $0x11,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x50(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    $0xa8b,%esi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x48(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    $0xacb,%esi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x40(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	cmp    %rax,-0xa0(%rbp)
	je     <nif_erlang_spawn+0x486>
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x456>
	call   <abort@plt>
	mov    -0x70(%rbp),%rax
	movzbl 0x178(%rax),%edx
	or     $0x2,%edx
	mov    %dl,0x178(%rax)
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    -0x70(%rbp),%rdx
	mov    %rax,0x100(%rdx)
	jmp    <nif_erlang_spawn+0x497>
	mov    $0x0,%edi
	call   <term_from_int>
	mov    %rax,-0xa0(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	cmp    %rax,-0x50(%rbp)
	je     <nif_erlang_spawn+0x4f0>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x4c5>
	call   <abort@plt>
	mov    -0x70(%rbp),%rax
	movzbl 0x178(%rax),%edx
	or     $0x4,%edx
	mov    %dl,0x178(%rax)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    -0x70(%rbp),%rdx
	mov    %rax,0x108(%rdx)
	mov    -0x70(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x2,%eax
	test   %al,%al
	je     <nif_erlang_spawn+0x570>
	mov    -0x70(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x4,%eax
	test   %al,%al
	je     <nif_erlang_spawn+0x570>
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,%rbx
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	cmp    %rax,%rbx
	jle    <nif_erlang_spawn+0x570>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xc8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0xc8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn+0x928>
	movq   $0x0,-0x98(%rbp)
	cmpq   $0x4b,-0x48(%rbp)
	jne    <nif_erlang_spawn+0x65a>
	mov    -0xc8(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <context_monitor>
	mov    %eax,-0xb0(%rbp)
	cmpl   $0x0,-0xb0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x5ee>
	mov    0x2c020(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x37,%edx
	mov    $0x1,%esi
	lea    0x1d2d4(%rip),%rax        # <_IO_stdin_used+0x4348>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0x70(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,%rcx
	mov    -0xc8(%rbp),%rax
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <context_monitor>
	mov    %eax,-0xb0(%rbp)
	cmpl   $0x0,-0xb0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x6cb>
	mov    0x2bfb4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x37,%edx
	mov    $0x1,%esi
	lea    0x1d268(%rip),%rax        # <_IO_stdin_used+0x4348>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	cmpq   $0x4b,-0x40(%rbp)
	jne    <nif_erlang_spawn+0x6cb>
	mov    -0xc8(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <context_monitor>
	mov    %rax,-0x98(%rbp)
	cmpq   $0x0,-0x98(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x6cb>
	mov    0x2bf43(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x37,%edx
	mov    $0x1,%esi
	lea    0x1d1f7(%rip),%rax        # <_IO_stdin_used+0x4348>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	movl   $0x0,-0xbc(%rbp)
	mov    -0xd8(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x90(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,%rbx
	mov    -0x90(%rbp),%rax
	mov    %rax,%rdi
	call   <memory_estimate_usage>
	cmp    %rax,%rbx
	jbe    <nif_erlang_spawn+0x71e>
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	jmp    <nif_erlang_spawn+0x72d>
	mov    -0x90(%rbp),%rax
	mov    %rax,%rdi
	call   <memory_estimate_usage>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %eax,%edx
	mov    -0x70(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x832>
	mov    0x2be90(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x37,%edx
	mov    $0x1,%esi
	lea    0x1d144(%rip),%rax        # <_IO_stdin_used+0x4348>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0x70(%rbp),%rax
	lea    0x1c0(%rax),%rbx
	mov    -0x90(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	add    $0xf0,%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memory_copy_term_tree>
	mov    -0x70(%rbp),%rdx
	mov    -0xbc(%rbp),%ecx
	movslq %ecx,%rcx
	add    $0xa,%rcx
	mov    %rax,0x8(%rdx,%rcx,8)
	addl   $0x1,-0xbc(%rbp)
	mov    -0x90(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x90(%rbp)
	mov    -0x90(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	jne    <nif_erlang_spawn+0x832>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xc8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0xc8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_spawn+0x928>
	mov    -0x90(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <nif_erlang_spawn+0x77e>
	mov    -0x70(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x30(%rbp)
	cmpq   $0x0,-0x98(%rbp)
	je     <nif_erlang_spawn+0x924>
	movl   $0x5,-0xac(%rbp)
	mov    -0xac(%rbp),%edx
	mov    -0xc8(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_spawn+0x8bf>
	mov    0x2bd4f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x37,%edx
	mov    $0x1,%esi
	lea    0x1d003(%rip),%rax        # <_IO_stdin_used+0x4348>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0xc8(%rbp),%rdx
	mov    -0x98(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x28(%rbp)
	mov    -0xc8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x20(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x20(%rbp),%rax
	jmp    <nif_erlang_spawn+0x928>
	mov    -0x30(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_spawn+0x93c>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_send_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_send_2+0x6e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_send_2+0xbb>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x24(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x24(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x18(%rbp)
	mov    -0x48(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <mailbox_send>
	mov    -0x48(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_is_process_alive_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0xc(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0xc(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	je     <nif_erlang_is_process_alive_1+0x53>
	mov    $0x4b,%eax
	jmp    <nif_erlang_is_process_alive_1+0x58>
	mov    $0xb,%eax
	leave  
	ret    

<nif_erlang_concat_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %esi,-0x5c(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_concat_2+0x9a>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <nif_erlang_concat_2+0x67>
	mov    -0x68(%rbp),%rax
	mov    0x8(%rax),%rax
	jmp    <nif_erlang_concat_2+0x21c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_concat_2+0x21c>
	lea    -0x48(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_list_length>
	mov    %eax,-0x44(%rbp)
	mov    -0x48(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_concat_2+0xf3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_concat_2+0x21c>
	mov    -0x44(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_concat_2+0x148>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_concat_2+0x21c>
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x68(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x40(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x38(%rbp)
	movq   $0x0,-0x30(%rbp)
	jmp    <nif_erlang_concat_2+0x1f2>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x18(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_alloc>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x30(%rbp)
	je     <nif_erlang_concat_2+0x1bb>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_from_list_ptr>
	mov    -0x30(%rbp),%rdx
	mov    %rax,(%rdx)
	jmp    <nif_erlang_concat_2+0x1cb>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_from_list_ptr>
	mov    %rax,-0x38(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x10(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <nif_erlang_concat_2+0x17f>
	cmpq   $0x0,-0x30(%rbp)
	je     <nif_erlang_concat_2+0x218>
	mov    -0x30(%rbp),%rax
	mov    -0x20(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x38(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_concat_2+0x230>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_make_ref_0>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_make_ref_0+0x65>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_make_ref_0+0x8f>
	mov    -0x18(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <globalcontext_get_ref_ticks>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	leave  
	ret    

<nif_erlang_system_time_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <sys_time>
	mov    -0x48(%rbp),%rax
	lea    0x1cb8f(%rip),%rdx        # <_IO_stdin_used+0x4380>
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	mov    %rax,-0x38(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	cmp    %rax,-0x38(%rbp)
	jne    <nif_erlang_system_time_1+0x72>
	mov    -0x30(%rbp),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int64>
	jmp    <nif_erlang_system_time_1+0x107>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rbx
	mov    -0x48(%rbp),%rax
	lea    0x1cb51(%rip),%rdx        # <_IO_stdin_used+0x4388>
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,%rbx
	jne    <nif_erlang_system_time_1+0xd9>
	mov    -0x30(%rbp),%rax
	imul   $0x3e8,%rax,%rsi
	mov    -0x28(%rbp),%rcx
	movabs $0x431bde82d7b634db,%rdx
	mov    %rcx,%rax
	imul   %rdx
	mov    %rdx,%rax
	sar    $0x12,%rax
	sar    $0x3f,%rcx
	mov    %rcx,%rdx
	sub    %rdx,%rax
	lea    (%rsi,%rax,1),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int64>
	jmp    <nif_erlang_system_time_1+0x107>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_system_time_1+0x11b>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_universaltime_0>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x90,%rsp
	mov    %rdi,-0x78(%rbp)
	mov    %esi,-0x7c(%rbp)
	mov    %rdx,-0x88(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x78(%rbp),%rax
	mov    $0xb,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_universaltime_0+0x7d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_universaltime_0+0x1c5>
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x3,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x68(%rbp)
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x3,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x60(%rbp)
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x58(%rbp)
	lea    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <sys_time>
	lea    -0x40(%rbp),%rdx
	lea    -0x50(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <gmtime_r@plt>
	mov    -0x2c(%rbp),%eax
	add    $0x76c,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x30(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x34(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x38(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x60(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x3c(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x60(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x40(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x60(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x68(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x60(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x58(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_universaltime_0+0x1d9>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_timestamp_0>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x38(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_timestamp_0+0x77>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_timestamp_0+0x169>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x3,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x28(%rbp)
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <sys_time>
	mov    -0x20(%rbp),%rcx
	movabs $0x431bde82d7b634db,%rdx
	mov    %rcx,%rax
	imul   %rdx
	mov    %rdx,%rax
	sar    $0x12,%rax
	sar    $0x3f,%rcx
	mov    %rcx,%rdx
	sub    %rdx,%rax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x20(%rbp),%rcx
	movabs $0x431bde82d7b634db,%rdx
	mov    %rcx,%rax
	imul   %rdx
	mov    %rdx,%rax
	sar    $0x12,%rax
	mov    %rcx,%rdx
	sar    $0x3f,%rdx
	sub    %rdx,%rax
	imul   $0xf4240,%rax,%rdx
	mov    %rcx,%rax
	sub    %rdx,%rax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x18(%rbp),%rcx
	movabs $0x20c49ba5e353f7cf,%rdx
	mov    %rcx,%rax
	imul   %rdx
	mov    %rdx,%rax
	sar    $0x7,%rax
	sar    $0x3f,%rcx
	mov    %rcx,%rdx
	sub    %rdx,%rax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_timestamp_0+0x17d>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_make_tuple_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_make_tuple_2+0x69>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_make_tuple_2+0x166>
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	shr    $0x3f,%rax
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_make_tuple_2+0xbf>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_make_tuple_2+0x166>
	mov    -0x28(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_make_tuple_2+0x111>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_make_tuple_2+0x166>
	mov    -0x28(%rbp),%rax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x20(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x18(%rbp)
	movl   $0x0,-0x2c(%rbp)
	jmp    <nif_erlang_make_tuple_2+0x157>
	mov    -0x2c(%rbp),%ecx
	mov    -0x18(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	addl   $0x1,-0x2c(%rbp)
	mov    -0x2c(%rbp),%eax
	cltq   
	cmp    %rax,-0x28(%rbp)
	jg     <nif_erlang_make_tuple_2+0x13e>
	mov    -0x20(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_insert_element_3>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_insert_element_3+0x69>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_insert_element_3+0x241>
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_insert_element_3+0xbe>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_insert_element_3+0x241>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	sub    $0x1,%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x38(%rbp)
	mov    -0x38(%rbp),%eax
	cltq   
	cmp    %rax,-0x30(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <nif_erlang_insert_element_3+0x10f>
	mov    -0x30(%rbp),%rax
	shr    $0x3f,%rax
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_insert_element_3+0x142>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_insert_element_3+0x241>
	mov    -0x38(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,-0x34(%rbp)
	mov    -0x34(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_insert_element_3+0x1a1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_insert_element_3+0x241>
	mov    -0x34(%rbp),%eax
	mov    -0x48(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x28(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x18(%rbp)
	movl   $0x0,-0x40(%rbp)
	movl   $0x0,-0x3c(%rbp)
	jmp    <nif_erlang_insert_element_3+0x235>
	mov    -0x3c(%rbp),%eax
	cltq   
	cmp    %rax,-0x30(%rbp)
	jne    <nif_erlang_insert_element_3+0x207>
	movl   $0x1,-0x40(%rbp)
	mov    -0x3c(%rbp),%ecx
	mov    -0x18(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	jmp    <nif_erlang_insert_element_3+0x231>
	mov    -0x3c(%rbp),%eax
	sub    -0x40(%rbp),%eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdx
	mov    -0x3c(%rbp),%ecx
	mov    -0x28(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	addl   $0x1,-0x3c(%rbp)
	mov    -0x3c(%rbp),%eax
	cmp    -0x34(%rbp),%eax
	jl     <nif_erlang_insert_element_3+0x1de>
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_delete_element_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_delete_element_2+0x69>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_delete_element_2+0x21b>
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_delete_element_2+0xbe>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_delete_element_2+0x21b>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	sub    $0x1,%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x30(%rbp)
	mov    -0x30(%rbp),%eax
	cltq   
	cmp    %rax,-0x28(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <nif_erlang_delete_element_2+0x10f>
	mov    -0x28(%rbp),%rax
	shr    $0x3f,%rax
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_delete_element_2+0x142>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_delete_element_2+0x21b>
	mov    -0x30(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x2c(%rbp)
	mov    -0x2c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_delete_element_2+0x19e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_delete_element_2+0x21b>
	mov    -0x2c(%rbp),%eax
	mov    -0x48(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x20(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x18(%rbp)
	movl   $0x0,-0x38(%rbp)
	movl   $0x0,-0x34(%rbp)
	jmp    <nif_erlang_delete_element_2+0x20f>
	mov    -0x34(%rbp),%eax
	cltq   
	cmp    %rax,-0x28(%rbp)
	jne    <nif_erlang_delete_element_2+0x1e1>
	movl   $0x1,-0x38(%rbp)
	mov    -0x34(%rbp),%edx
	mov    -0x38(%rbp),%eax
	add    %eax,%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdx
	mov    -0x34(%rbp),%ecx
	mov    -0x20(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	addl   $0x1,-0x34(%rbp)
	mov    -0x34(%rbp),%eax
	cmp    -0x2c(%rbp),%eax
	jl     <nif_erlang_delete_element_2+0x1cf>
	mov    -0x20(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_setelement_3>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_setelement_3+0x69>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_setelement_3+0x21b>
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_setelement_3+0xbe>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_setelement_3+0x21b>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	sub    $0x1,%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x34(%rbp)
	mov    -0x34(%rbp),%eax
	cltq   
	cmp    %rax,-0x30(%rbp)
	setge  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <nif_erlang_setelement_3+0x10f>
	mov    -0x30(%rbp),%rax
	shr    $0x3f,%rax
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_setelement_3+0x142>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_setelement_3+0x21b>
	mov    -0x34(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_setelement_3+0x198>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_setelement_3+0x21b>
	mov    -0x34(%rbp),%eax
	mov    -0x48(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x28(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	movl   $0x0,-0x38(%rbp)
	jmp    <nif_erlang_setelement_3+0x1eb>
	mov    -0x38(%rbp),%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdx
	mov    -0x38(%rbp),%ecx
	mov    -0x28(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	addl   $0x1,-0x38(%rbp)
	mov    -0x38(%rbp),%eax
	cmp    -0x34(%rbp),%eax
	jl     <nif_erlang_setelement_3+0x1c2>
	mov    -0x58(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %eax,%ecx
	mov    -0x18(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_tuple_to_list_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_tuple_to_list_1+0x69>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_tuple_to_list_1+0x12a>
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x24(%rbp)
	mov    -0x24(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_tuple_to_list_1+0xcd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_tuple_to_list_1+0x12a>
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x20(%rbp)
	mov    -0x24(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x28(%rbp)
	jmp    <nif_erlang_tuple_to_list_1+0x120>
	mov    -0x28(%rbp),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rcx
	mov    -0x38(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x20(%rbp)
	subl   $0x1,-0x28(%rbp)
	cmpl   $0x0,-0x28(%rbp)
	jns    <nif_erlang_tuple_to_list_1+0xf1>
	mov    -0x20(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_list_to_tuple_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_tuple_1+0x78>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_tuple_1+0x19d>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	lea    -0x40(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_list_length>
	cltq   
	mov    %rax,-0x30(%rbp)
	mov    -0x40(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_tuple_1+0xd7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_tuple_1+0x19d>
	mov    -0x30(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_tuple_1+0x129>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_tuple_1+0x19d>
	mov    -0x30(%rbp),%rax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x28(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x38(%rbp)
	movl   $0x0,-0x3c(%rbp)
	jmp    <nif_erlang_list_to_tuple_1+0x18e>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x20(%rbp)
	mov    -0x3c(%rbp),%ecx
	mov    -0x20(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x38(%rbp)
	addl   $0x1,-0x3c(%rbp)
	mov    -0x3c(%rbp),%eax
	cltq   
	cmp    %rax,-0x30(%rbp)
	jg     <nif_erlang_list_to_tuple_1+0x155>
	mov    -0x28(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_list_to_tuple_1+0x1b1>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_binary_to_atom_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	mov    $0x1,%ecx
	mov    %rax,%rdi
	call   <binary_to_atom>
	leave  
	ret    

<nif_erlang_binary_to_integer_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x78,%rsp
	mov    %rdi,-0x68(%rbp)
	mov    %esi,-0x6c(%rbp)
	mov    %rdx,-0x78(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x78(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_binary_to_integer_1+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x78(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_integer_1+0x17d>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x40(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x54(%rbp)
	cmpl   $0x0,-0x54(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <nif_erlang_binary_to_integer_1+0xbd>
	cmpl   $0x17,-0x54(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_binary_to_integer_1+0xf0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_integer_1+0x17d>
	mov    -0x54(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x40(%rbp),%rcx
	lea    -0x30(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x54(%rbp),%eax
	cltq   
	movb   $0x0,-0x30(%rbp,%rax,1)
	lea    -0x50(%rbp),%rcx
	lea    -0x30(%rbp),%rax
	mov    $0xa,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <strtoll@plt>
	mov    %rax,-0x38(%rbp)
	mov    -0x50(%rbp),%rax
	movzbl (%rax),%eax
	test   %al,%al
	je     <nif_erlang_binary_to_integer_1+0x16a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_integer_1+0x17d>
	mov    -0x38(%rbp),%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int64>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_binary_to_integer_1+0x191>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<is_valid_float_string>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	movl   $0x0,-0xc(%rbp)
	movl   $0x0,-0x8(%rbp)
	movl   $0x0,-0x4(%rbp)
	jmp    <is_valid_float_string+0x75>
	mov    -0x4(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	cmp    $0x2e,%eax
	je     <is_valid_float_string+0x45>
	cmp    $0x65,%eax
	je     <is_valid_float_string+0x5b>
	jmp    <is_valid_float_string+0x71>
	cmpl   $0x0,-0x8(%rbp)
	jne    <is_valid_float_string+0x54>
	movl   $0x1,-0xc(%rbp)
	jmp    <is_valid_float_string+0x71>
	mov    $0x0,%eax
	jmp    <is_valid_float_string+0x80>
	cmpl   $0x0,-0x8(%rbp)
	jne    <is_valid_float_string+0x6a>
	movl   $0x1,-0x8(%rbp)
	jmp    <is_valid_float_string+0x71>
	mov    $0x0,%eax
	jmp    <is_valid_float_string+0x80>
	addl   $0x1,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	cmp    -0x1c(%rbp),%eax
	jl     <is_valid_float_string+0x26>
	mov    -0xc(%rbp),%eax
	pop    %rbp
	ret    

<parse_float>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	add    $0xffffffffffffff80,%rsp
	mov    %rdi,-0x68(%rbp)
	mov    %rsi,-0x70(%rbp)
	mov    %edx,-0x74(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	cmpl   $0x0,-0x74(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <parse_float+0x44>
	cmpl   $0x3e,-0x74(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <parse_float+0x77>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <parse_float+0x1ab>
	mov    -0x74(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x70(%rbp),%rcx
	lea    -0x50(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x74(%rbp),%eax
	cltq   
	movb   $0x0,-0x50(%rbp,%rax,1)
	lea    -0x58(%rbp),%rdx
	lea    -0x50(%rbp),%rax
	lea    0x1b998(%rip),%rcx        # <_IO_stdin_used+0x4395>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <__isoc99_sscanf@plt>
	cmp    $0x1,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <parse_float+0xfa>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <parse_float+0x1ab>
	mov    -0x74(%rbp),%edx
	lea    -0x50(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <is_valid_float_string>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <parse_float+0x148>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <parse_float+0x1ab>
	mov    -0x68(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <parse_float+0x196>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <parse_float+0x1ab>
	mov    -0x58(%rbp),%rax
	mov    -0x68(%rbp),%rdx
	mov    %rdx,%rdi
	movq   %rax,%xmm0
	call   <term_from_float>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <parse_float+0x1bf>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_binary_to_float_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_binary_to_float_1+0x6e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_float_1+0xa3>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x24(%rbp)
	mov    -0x24(%rbp),%edx
	mov    -0x18(%rbp),%rcx
	mov    -0x38(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <parse_float>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_list_to_float_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_float_1+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_float_1+0x15d>
	lea    -0x3c(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_list_length>
	mov    %eax,-0x34(%rbp)
	mov    -0x3c(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_float_1+0xd9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_float_1+0x15d>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	lea    -0x38(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_list_to_string>
	mov    %rax,-0x28(%rbp)
	mov    -0x38(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_float_1+0x133>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_float_1+0x15d>
	mov    -0x34(%rbp),%edx
	mov    -0x28(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <parse_float>
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x20(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_list_to_float_1+0x171>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_binary_to_list_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_binary_to_list_1+0x71>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_list_1+0x140>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x2c(%rbp)
	mov    -0x2c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_binary_to_list_1+0xd2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_list_1+0x140>
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x18(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x28(%rbp)
	mov    -0x2c(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x30(%rbp)
	jmp    <nif_erlang_binary_to_list_1+0x136>
	mov    -0x30(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,%rcx
	mov    -0x38(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x28(%rbp)
	subl   $0x1,-0x30(%rbp)
	cmpl   $0x0,-0x30(%rbp)
	jns    <nif_erlang_binary_to_list_1+0xfe>
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_binary_to_existing_atom_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	mov    $0x0,%ecx
	mov    %rax,%rdi
	call   <binary_to_atom>
	leave  
	ret    

<binary_to_atom>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %ecx,-0x50(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <binary_to_atom+0x74>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <binary_to_atom+0x26c>
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rbx
	mov    $0x10,%edi
	call   <term_from_atom_index>
	cmp    %rax,%rbx
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <binary_to_atom+0xca>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <binary_to_atom+0x26c>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <interop_binary_to_string>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x20(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <binary_to_atom+0x112>
	mov    0x2a0e3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x21,%edx
	mov    $0x1,%esi
	lea    0x1b3ef(%rip),%rax        # <_IO_stdin_used+0x43a0>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %eax,-0x38(%rbp)
	cmpl   $0xff,-0x38(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <binary_to_atom+0x172>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xd,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <binary_to_atom+0x26c>
	mov    -0x38(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x18(%rbp)
	mov    -0x38(%rbp),%eax
	mov    %eax,%edx
	mov    -0x18(%rbp),%rax
	mov    %dl,(%rax)
	mov    -0x38(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	lea    0x1(%rax),%rcx
	mov    -0x20(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x48(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x50(%rax),%rax
	mov    -0x18(%rbp),%rcx
	mov    $0xffffffffffffffff,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atomshashtable_get_value>
	mov    %rax,-0x30(%rbp)
	cmpq   $0xffffffffffffffff,-0x30(%rbp)
	setne  %al
	movzbl %al,%eax
	mov    %eax,-0x34(%rbp)
	cmpl   $0x0,-0x50(%rbp)
	jne    <binary_to_atom+0x1f1>
	cmpl   $0x0,-0x34(%rbp)
	je     <binary_to_atom+0x232>
	cmpl   $0x0,-0x34(%rbp)
	jne    <binary_to_atom+0x219>
	mov    -0x48(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cltq   
	mov    %rax,-0x30(%rbp)
	jmp    <binary_to_atom+0x225>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x30(%rbp),%rax
	mov    %eax,%edi
	call   <term_from_atom_index>
	jmp    <binary_to_atom+0x26c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_list_to_atom_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	mov    $0x1,%ecx
	mov    %rax,%rdi
	call   <list_to_atom>
	leave  
	ret    

<nif_erlang_list_to_existing_atom_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	mov    $0x0,%ecx
	mov    %rax,%rdi
	call   <list_to_atom>
	leave  
	ret    

<list_to_atom>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %esi,-0x5c(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %ecx,-0x60(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <list_to_atom+0x83>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <list_to_atom+0x22c>
	lea    -0x44(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_list_to_string>
	mov    %rax,-0x28(%rbp)
	mov    -0x44(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <list_to_atom+0xd2>
	mov    0x29e4f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x21,%edx
	mov    $0x1,%esi
	lea    0x1b15b(%rip),%rax        # <_IO_stdin_used+0x43a0>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %eax,-0x40(%rbp)
	cmpl   $0xff,-0x40(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <list_to_atom+0x132>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xd,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <list_to_atom+0x22c>
	mov    -0x40(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x20(%rbp)
	mov    -0x40(%rbp),%eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	mov    %dl,(%rax)
	mov    -0x40(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x20(%rbp),%rax
	lea    0x1(%rax),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x58(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x50(%rax),%rax
	mov    -0x20(%rbp),%rcx
	mov    $0xffffffffffffffff,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <atomshashtable_get_value>
	mov    %rax,-0x38(%rbp)
	cmpq   $0xffffffffffffffff,-0x38(%rbp)
	setne  %al
	movzbl %al,%eax
	mov    %eax,-0x3c(%rbp)
	cmpl   $0x0,-0x60(%rbp)
	jne    <list_to_atom+0x1b1>
	cmpl   $0x0,-0x3c(%rbp)
	je     <list_to_atom+0x1f2>
	cmpl   $0x0,-0x3c(%rbp)
	jne    <list_to_atom+0x1d9>
	mov    -0x58(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x20(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cltq   
	mov    %rax,-0x38(%rbp)
	jmp    <list_to_atom+0x1e5>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x38(%rbp),%rax
	mov    %eax,%edi
	call   <term_from_atom_index>
	jmp    <list_to_atom+0x22c>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <list_to_atom+0x240>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_atom_to_binary_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_atom_to_binary_2+0x71>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_atom_to_binary_2+0x18d>
	mov    -0x48(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rbx
	mov    $0x10,%edi
	call   <term_from_atom_index>
	cmp    %rax,%rbx
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_atom_to_binary_2+0xc7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_atom_to_binary_2+0x18d>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0x30(%rbp)
	mov    -0x30(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0x2c(%rbp)
	mov    -0x2c(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_atom_to_binary_2+0x168>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_atom_to_binary_2+0x18d>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,-0x18(%rbp)
	mov    -0x2c(%rbp),%ecx
	mov    -0x38(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_atom_to_list_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_atom_to_list_1+0x71>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_atom_to_list_1+0x173>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0x30(%rbp)
	mov    -0x30(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x48(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0x2c(%rbp)
	mov    -0x2c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_atom_to_list_1+0x10a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_atom_to_list_1+0x173>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x28(%rbp)
	mov    -0x2c(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x34(%rbp)
	jmp    <nif_erlang_atom_to_list_1+0x169>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,%rdx
	mov    -0x34(%rbp),%eax
	cltq   
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0x35(%rbp)
	movsbl -0x35(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,%rcx
	mov    -0x48(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x28(%rbp)
	subl   $0x1,-0x34(%rbp)
	cmpl   $0x0,-0x34(%rbp)
	jns    <nif_erlang_atom_to_list_1+0x123>
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_integer_to_binary_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %esi,-0x5c(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_integer_to_binary_1+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_integer_to_binary_1+0x132>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rcx
	lea    0x1ac4e(%rip),%rdx        # <_IO_stdin_used+0x43c2>
	mov    $0x15,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %eax,-0x44(%rbp)
	mov    -0x44(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_integer_to_binary_1+0x11d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_integer_to_binary_1+0x132>
	mov    -0x44(%rbp),%ecx
	mov    -0x58(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_integer_to_binary_1+0x146>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_integer_to_list_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %esi,-0x5c(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_integer_to_list_1+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_integer_to_list_1+0x16a>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rcx
	lea    0x1ab02(%rip),%rdx        # <_IO_stdin_used+0x43c2>
	mov    $0x15,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %eax,-0x4c(%rbp)
	mov    -0x4c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_integer_to_list_1+0x115>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_integer_to_list_1+0x16a>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x48(%rbp)
	mov    -0x4c(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x50(%rbp)
	jmp    <nif_erlang_integer_to_list_1+0x160>
	mov    -0x50(%rbp),%eax
	cltq   
	movzbl -0x30(%rbp,%rax,1),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x48(%rbp)
	subl   $0x1,-0x50(%rbp)
	cmpl   $0x0,-0x50(%rbp)
	jns    <nif_erlang_integer_to_list_1+0x12e>
	mov    -0x48(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_integer_to_list_1+0x17e>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<format_float>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %edx,-0x40(%rbp)
	mov    %ecx,-0x44(%rbp)
	mov    %r8,-0x50(%rbp)
	mov    %r9d,-0x48(%rbp)
	cmpl   $0x0,-0x3c(%rbp)
	je     <format_float+0x34>
	lea    0x1a9f6(%rip),%rax        # <_IO_stdin_used+0x43c6>
	mov    %rax,-0x10(%rbp)
	jmp    <format_float+0x3f>
	lea    0x1a9ee(%rip),%rax        # <_IO_stdin_used+0x43cb>
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x48(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x8(%rbp),%rdi
	mov    -0x40(%rbp),%ecx
	mov    -0x10(%rbp),%rdx
	mov    -0x50(%rbp),%rax
	movq   %rdi,%xmm0
	mov    %rax,%rdi
	mov    $0x1,%eax
	call   <snprintf@plt>
	cmpl   $0x0,-0x44(%rbp)
	je     <format_float+0x13d>
	cmpl   $0x0,-0x3c(%rbp)
	jne    <format_float+0x13d>
	movl   $0x0,-0x24(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %eax,-0x14(%rbp)
	movl   $0x0,-0x20(%rbp)
	jmp    <format_float+0xd1>
	mov    -0x20(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	cmp    $0x2e,%al
	jne    <format_float+0xcd>
	mov    -0x20(%rbp),%eax
	add    $0x2,%eax
	mov    %eax,-0x24(%rbp)
	jmp    <format_float+0xd9>
	addl   $0x1,-0x20(%rbp)
	mov    -0x20(%rbp),%eax
	cmp    -0x14(%rbp),%eax
	jl     <format_float+0xae>
	cmpl   $0x1,-0x24(%rbp)
	jle    <format_float+0x13d>
	movl   $0x0,-0x1c(%rbp)
	mov    -0x24(%rbp),%eax
	mov    %eax,-0x18(%rbp)
	jmp    <format_float+0x11f>
	mov    -0x18(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	cmp    $0x30,%al
	jne    <format_float+0x114>
	cmpl   $0x0,-0x1c(%rbp)
	jne    <format_float+0x10e>
	mov    -0x18(%rbp),%eax
	mov    %eax,-0x24(%rbp)
	addl   $0x1,-0x1c(%rbp)
	jmp    <format_float+0x11b>
	movl   $0x0,-0x1c(%rbp)
	addl   $0x1,-0x18(%rbp)
	mov    -0x18(%rbp),%eax
	cmp    -0x14(%rbp),%eax
	jl     <format_float+0xee>
	cmpl   $0x0,-0x1c(%rbp)
	je     <format_float+0x13d>
	mov    -0x24(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	movb   $0x0,(%rax)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	leave  
	ret    

<get_float_format_opts>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <get_float_format_opts+0x14c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <get_float_format_opts+0x108>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    $0x2,%eax
	jne    <get_float_format_opts+0x108>
	mov    -0x10(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <get_float_format_opts+0x91>
	mov    $0x0,%eax
	jmp    <get_float_format_opts+0x165>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	test   %eax,%eax
	js     <get_float_format_opts+0xba>
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	cmp    $0x39,%eax
	jle    <get_float_format_opts+0xc4>
	mov    $0x0,%eax
	jmp    <get_float_format_opts+0x165>
	mov    -0x10(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	cmp    $0x70b,%rax
	je     <get_float_format_opts+0xe7>
	cmp    $0x74b,%rax
	je     <get_float_format_opts+0xf3>
	jmp    <get_float_format_opts+0xff>
	mov    -0x30(%rbp),%rax
	movl   $0x0,(%rax)
	jmp    <get_float_format_opts+0x106>
	mov    -0x30(%rbp),%rax
	movl   $0x1,(%rax)
	jmp    <get_float_format_opts+0x106>
	mov    $0x0,%eax
	jmp    <get_float_format_opts+0x165>
	jmp    <get_float_format_opts+0x125>
	cmpq   $0x78b,-0x10(%rbp)
	jne    <get_float_format_opts+0x11e>
	mov    -0x40(%rbp),%rax
	movl   $0x1,(%rax)
	jmp    <get_float_format_opts+0x125>
	mov    $0x0,%eax
	jmp    <get_float_format_opts+0x165>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	jne    <get_float_format_opts+0x14c>
	mov    $0x0,%eax
	jmp    <get_float_format_opts+0x165>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <get_float_format_opts+0x29>
	mov    $0x1,%eax
	leave  
	ret    

<nif_erlang_float_to_binary>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x98,%rsp
	mov    %rdi,-0x88(%rbp)
	mov    %esi,-0x8c(%rbp)
	mov    %rdx,-0x98(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x98(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x70(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_float_to_binary+0x95>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x98(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_binary+0x254>
	movl   $0x1,-0x80(%rbp)
	movl   $0x14,-0x7c(%rbp)
	movl   $0x0,-0x78(%rbp)
	mov    -0x98(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x68(%rbp)
	cmpl   $0x2,-0x8c(%rbp)
	jne    <nif_erlang_float_to_binary+0x178>
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_float_to_binary+0x11a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x98(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_binary+0x254>
	lea    -0x78(%rbp),%rcx
	lea    -0x7c(%rbp),%rdx
	lea    -0x80(%rbp),%rsi
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <get_float_format_opts>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_float_to_binary+0x178>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_binary+0x254>
	mov    -0x78(%rbp),%ecx
	mov    -0x7c(%rbp),%edx
	mov    -0x80(%rbp),%esi
	lea    -0x60(%rbp),%rdi
	mov    -0x70(%rbp),%rax
	mov    $0x40,%r9d
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <format_float>
	mov    %eax,-0x74(%rbp)
	cmpl   $0x40,-0x74(%rbp)
	jle    <nif_erlang_float_to_binary+0x1d9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_binary+0x254>
	mov    -0x74(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x88(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_float_to_binary+0x23c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_binary+0x254>
	mov    -0x74(%rbp),%ecx
	mov    -0x88(%rbp),%rdx
	lea    -0x60(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_float_to_binary+0x268>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_float_to_list>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xa8,%rsp
	mov    %rdi,-0x98(%rbp)
	mov    %esi,-0x9c(%rbp)
	mov    %rdx,-0xa8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x70(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_float_to_list+0x95>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xa8(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0xa8(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_list+0x2aa>
	movl   $0x1,-0x8c(%rbp)
	movl   $0x14,-0x88(%rbp)
	movl   $0x0,-0x84(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x68(%rbp)
	cmpl   $0x2,-0x9c(%rbp)
	jne    <nif_erlang_float_to_list+0x18a>
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_float_to_list+0x123>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xa8(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0xa8(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_list+0x2aa>
	lea    -0x84(%rbp),%rcx
	lea    -0x88(%rbp),%rdx
	lea    -0x8c(%rbp),%rsi
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <get_float_format_opts>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_float_to_list+0x18a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_list+0x2aa>
	mov    -0x84(%rbp),%ecx
	mov    -0x88(%rbp),%edx
	mov    -0x8c(%rbp),%esi
	lea    -0x60(%rbp),%rdi
	mov    -0x70(%rbp),%rax
	mov    $0x40,%r9d
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <format_float>
	mov    %eax,-0x7c(%rbp)
	cmpl   $0x40,-0x7c(%rbp)
	jle    <nif_erlang_float_to_list+0x1f7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_list+0x2aa>
	mov    -0x7c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x98(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_float_to_list+0x252>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_float_to_list+0x2aa>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x78(%rbp)
	mov    -0x7c(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x80(%rbp)
	jmp    <nif_erlang_float_to_list+0x2a0>
	mov    -0x80(%rbp),%eax
	cltq   
	movzbl -0x60(%rbp,%rax,1),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x78(%rbp)
	subl   $0x1,-0x80(%rbp)
	cmpl   $0x0,-0x80(%rbp)
	jns    <nif_erlang_float_to_list+0x26b>
	mov    -0x78(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_float_to_list+0x2be>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_list_to_binary_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_binary_1+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_binary_1+0x1b9>
	lea    -0x3c(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_list_length>
	mov    %eax,-0x34(%rbp)
	mov    -0x3c(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_binary_1+0xd9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_binary_1+0x1b9>
	mov    -0x34(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_binary_1+0x136>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_binary_1+0x1b9>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	lea    -0x38(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_list_to_string>
	mov    %rax,-0x28(%rbp)
	mov    -0x38(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_binary_1+0x190>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_binary_1+0x1b9>
	mov    -0x34(%rbp),%ecx
	mov    -0x48(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x20(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_list_to_binary_1+0x1cd>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_list_to_integer_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x38(%rbp)
	movq   $0x0,-0x30(%rbp)
	movl   $0x0,-0x40(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_integer_1+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_integer_1+0x2d7>
	movl   $0x0,-0x3c(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x28(%rbp)
	mov    $0x2d,%edi
	call   <term_from_int11>
	cmp    %rax,-0x28(%rbp)
	jne    <nif_erlang_list_to_integer_1+0xc3>
	movl   $0x1,-0x3c(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x38(%rbp)
	jmp    <nif_erlang_list_to_integer_1+0x267>
	mov    $0x2b,%edi
	call   <term_from_int11>
	cmp    %rax,-0x28(%rbp)
	jne    <nif_erlang_list_to_integer_1+0x267>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x38(%rbp)
	jmp    <nif_erlang_list_to_integer_1+0x267>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_integer_1+0x14a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_integer_1+0x2d7>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x2f,-0x18(%rbp)
	setle  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <nif_erlang_list_to_integer_1+0x17a>
	cmpq   $0x39,-0x18(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_integer_1+0x1ad>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_integer_1+0x2d7>
	movabs $0xccccccccccccccc,%rax
	cmp    %rax,-0x30(%rbp)
	jle    <nif_erlang_list_to_integer_1+0x1f0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_integer_1+0x2d7>
	mov    -0x30(%rbp),%rdx
	mov    %rdx,%rax
	shl    $0x2,%rax
	add    %rdx,%rax
	add    %rax,%rax
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	sub    $0x30,%rax
	add    %rdx,%rax
	mov    %rax,-0x30(%rbp)
	addl   $0x1,-0x40(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	jne    <nif_erlang_list_to_integer_1+0x267>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_integer_1+0x2d7>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <nif_erlang_list_to_integer_1+0xec>
	cmpl   $0x0,-0x3c(%rbp)
	je     <nif_erlang_list_to_integer_1+0x285>
	negq   -0x30(%rbp)
	cmpl   $0x0,-0x40(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_list_to_integer_1+0x2c4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_list_to_integer_1+0x2d7>
	mov    -0x30(%rbp),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int64>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_display_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rcx
	mov    0x28a05(%rip),%rax        # <stdout@GLIBC_2.2.5>
	mov    -0x8(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    $0xa,%edi
	call   <putchar@plt>
	mov    $0x4b,%eax
	leave  
	ret    

<nif_erlang_process_flag>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	cmpl   $0x2,-0x4c(%rbp)
	jne    <nif_erlang_process_flag+0x42>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	jmp    <nif_erlang_process_flag+0x12b>
	cmpl   $0x3,-0x4c(%rbp)
	jne    <nif_erlang_process_flag+0x12b>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_process_flag+0xbd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_process_flag+0x1fb>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x3c(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x3c(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x20(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_process_flag+0x12b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_process_flag+0x1fb>
	cmpq   $0xc8b,-0x38(%rbp)
	jne    <nif_erlang_process_flag+0x1cd>
	mov    -0x48(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x8,%eax
	test   %al,%al
	je     <nif_erlang_process_flag+0x152>
	mov    $0x4b,%eax
	jmp    <nif_erlang_process_flag+0x157>
	mov    $0xb,%eax
	mov    %rax,-0x18(%rbp)
	cmpq   $0xb,-0x30(%rbp)
	je     <nif_erlang_process_flag+0x16b>
	cmpq   $0x4b,-0x30(%rbp)
	je     <nif_erlang_process_flag+0x181>
	jmp    <nif_erlang_process_flag+0x197>
	mov    -0x48(%rbp),%rax
	movzbl 0x178(%rax),%edx
	and    $0xfffffff7,%edx
	mov    %dl,0x178(%rax)
	jmp    <nif_erlang_process_flag+0x1c7>
	mov    -0x48(%rbp),%rax
	movzbl 0x178(%rax),%edx
	or     $0x8,%edx
	mov    %dl,0x178(%rax)
	jmp    <nif_erlang_process_flag+0x1c7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_process_flag+0x1fb>
	mov    -0x18(%rbp),%rax
	jmp    <nif_erlang_process_flag+0x1fb>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_increment_context_count>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	add    $0x1,%rax
	pop    %rbp
	ret    

<nif_increment_port_count>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x168(%rax),%rax
	test   %rax,%rax
	je     <nif_increment_port_count+0x2a>
	mov    -0x10(%rbp),%rax
	add    $0x1,%rax
	jmp    <nif_increment_port_count+0x2e>
	mov    -0x10(%rbp),%rax
	pop    %rbp
	ret    

<nif_cons_context>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %r12
	push   %rbx
	sub    $0x20,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%r12
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rbx
	mov    -0x28(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %r12,%rdx
	mov    %rbx,%rsi
	mov    %rax,%rdi
	call   <term_list_prepend>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x8(%rdx)
	mov    -0x18(%rbp),%rax
	add    $0x20,%rsp
	pop    %rbx
	pop    %r12
	pop    %rbp
	ret    

<nif_iterate_processes>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x30(%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <nif_iterate_processes+0x55>
	mov    -0x10(%rbp),%rax
	sub    $0x10,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    -0x20(%rbp),%rcx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   *%rcx
	mov    %rax,-0x28(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x30,%rax
	cmp    %rax,-0x10(%rbp)
	jne    <nif_iterate_processes+0x26>
	mov    -0x28(%rbp),%rax
	leave  
	ret    

<nif_num_processes>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x0,%edx
	lea    -0x132(%rip),%rcx        # <nif_increment_context_count>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <nif_iterate_processes>
	leave  
	ret    

<nif_num_ports>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x0,%edx
	lea    -0x145(%rip),%rcx        # <nif_increment_port_count>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <nif_iterate_processes>
	leave  
	ret    

<nif_list_processes>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x160(%rax),%rax
	lea    -0x20(%rbp),%rdx
	lea    -0x16d(%rip),%rcx        # <nif_cons_context>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <nif_iterate_processes>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_list_processes+0x6e>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_processes>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <nif_num_processes>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	lea    (%rax,%rax,1),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <nif_erlang_processes+0x77>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_processes+0x83>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <nif_list_processes>
	leave  
	ret    

<nif_erlang_process_info>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	jne    <nif_erlang_process_info+0x71>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_process_info+0x29a>
	mov    -0x20(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x2c(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x2c(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <nif_erlang_process_info+0xec>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_process_info+0x29a>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x8(%rbp)
	mov    $0xf,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x18(%rbp)
	jne    <nif_erlang_process_info+0x15b>
	mov    $0xf,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <context_heap_size>
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	jmp    <nif_erlang_process_info+0x296>
	mov    $0x15,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x18(%rbp)
	jne    <nif_erlang_process_info+0x1b5>
	mov    $0x15,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <context_stack_size>
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	jmp    <nif_erlang_process_info+0x296>
	mov    $0x13,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x18(%rbp)
	jne    <nif_erlang_process_info+0x20f>
	mov    $0x13,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <context_message_queue_len>
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	jmp    <nif_erlang_process_info+0x296>
	mov    $0x12,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x18(%rbp)
	jne    <nif_erlang_process_info+0x266>
	mov    $0x12,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <context_size>
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	jmp    <nif_erlang_process_info+0x296>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_process_info+0x29a>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<nif_erlang_system_info>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xd0,%rsp
	mov    %rdi,-0xb8(%rbp)
	mov    %esi,-0xbc(%rbp)
	mov    %rdx,-0xc8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0xc8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0xa8(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	jne    <nif_erlang_system_info+0x8f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xb8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0xb8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_system_info+0x2cb>
	mov    $0x17,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0xa8(%rbp)
	jne    <nif_erlang_system_info+0xc4>
	mov    -0xb8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <nif_num_processes>
	mov    %eax,%edi
	call   <term_from_int32>
	jmp    <nif_erlang_system_info+0x2cb>
	mov    $0x18,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0xa8(%rbp)
	jne    <nif_erlang_system_info+0xf9>
	mov    -0xb8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,%rdi
	call   <nif_num_ports>
	mov    %eax,%edi
	call   <term_from_int32>
	jmp    <nif_erlang_system_info+0x2cb>
	mov    $0x19,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0xa8(%rbp)
	jne    <nif_erlang_system_info+0x12d>
	mov    -0xb8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x50(%rax),%rax
	mov    0x4(%rax),%eax
	mov    %eax,%edi
	call   <term_from_int32>
	jmp    <nif_erlang_system_info+0x2cb>
	mov    $0x1b,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0xa8(%rbp)
	jne    <nif_erlang_system_info+0x14f>
	mov    $0x8,%edi
	call   <term_from_int32>
	jmp    <nif_erlang_system_info+0x2cb>
	mov    $0x1a,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0xa8(%rbp)
	jne    <nif_erlang_system_info+0x23d>
	lea    -0x90(%rbp),%rax
	lea    0x194e3(%rip),%r9        # <_IO_stdin_used+0x43d0>
	lea    0x194e3(%rip),%r8        # <_IO_stdin_used+0x43d7>
	lea    0x194ee(%rip),%rdx        # <_IO_stdin_used+0x43e9>
	mov    %rdx,%rcx
	lea    0x194ea(%rip),%rdx        # <_IO_stdin_used+0x43ef>
	mov    $0x80,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	lea    -0x90(%rbp),%rax
	mov    $0x80,%esi
	mov    %rax,%rdi
	call   <strnlen@plt>
	mov    %rax,-0x98(%rbp)
	mov    -0x98(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	mov    %eax,%edx
	mov    -0xb8(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <nif_erlang_system_info+0x217>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xb8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0xb8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_system_info+0x2cb>
	mov    -0x98(%rbp),%rax
	mov    %eax,%ecx
	mov    -0xb8(%rbp),%rdx
	lea    -0x90(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	jmp    <nif_erlang_system_info+0x2cb>
	cmpq   $0xc0b,-0xa8(%rbp)
	jne    <nif_erlang_system_info+0x2b2>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <refc_binary_create_binary_info>
	mov    %rax,-0xa0(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <nif_erlang_system_info+0x2a9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xb8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0xb8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_system_info+0x2cb>
	mov    -0xa0(%rbp),%rax
	jmp    <nif_erlang_system_info+0x2cb>
	mov    -0xa8(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <sys_get_info>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_system_info+0x2df>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_binary_to_term>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	cmpl   $0x0,-0x4c(%rbp)
	jle    <nif_erlang_binary_to_term+0x32>
	cmpl   $0x2,-0x4c(%rbp)
	jle    <nif_erlang_binary_to_term+0x65>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_term+0x293>
	cmpl   $0x2,-0x4c(%rbp)
	jne    <nif_erlang_binary_to_term+0xb5>
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	jne    <nif_erlang_binary_to_term+0xb5>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_term+0x293>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	jne    <nif_erlang_binary_to_term+0x103>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_term+0x293>
	movb   $0x0,-0x35(%rbp)
	movq   $0x0,-0x20(%rbp)
	cmpl   $0x2,-0x4c(%rbp)
	jne    <nif_erlang_binary_to_term+0x141>
	mov    -0x58(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    -0x48(%rbp),%rdx
	mov    $0x94b,%esi
	mov    %rax,%rdi
	call   <term_list_member>
	test   %eax,%eax
	je     <nif_erlang_binary_to_term+0x141>
	movb   $0x1,-0x35(%rbp)
	movq   $0x3,-0x20(%rbp)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    %rax,-0x30(%rbp)
	movq   $0x0,-0x28(%rbp)
	mov    -0x20(%rbp),%rdi
	lea    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	lea    -0x30(%rbp),%rsi
	mov    -0x48(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <externalterm_from_binary>
	mov    %eax,-0x34(%rbp)
	cmpl   $0x1,-0x34(%rbp)
	je     <nif_erlang_binary_to_term+0x192>
	cmpl   $0x0,-0x34(%rbp)
	je     <nif_erlang_binary_to_term+0x1f8>
	mov    -0x34(%rbp),%eax
	sub    $0x2,%eax
	cmp    $0x1,%eax
	ja     <nif_erlang_binary_to_term+0x1f8>
	jmp    <nif_erlang_binary_to_term+0x1c5>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_term+0x293>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_term+0x293>
	nop
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <nif_erlang_binary_to_term+0x239>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_binary_to_term+0x293>
	cmpb   $0x0,-0x35(%rbp)
	je     <nif_erlang_binary_to_term+0x28f>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x10(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rax
	jmp    <nif_erlang_binary_to_term+0x293>
	mov    -0x30(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_binary_to_term+0x2a7>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_erlang_term_to_binary>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	cmpl   $0x1,-0x1c(%rbp)
	je     <nif_erlang_term_to_binary+0x4d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_term_to_binary+0xb3>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <externalterm_to_binary>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <nif_erlang_term_to_binary+0xaf>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_term_to_binary+0xb3>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<nif_binary_at_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_at_2+0x7d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_at_2+0x15e>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_at_2+0xcb>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_at_2+0x15e>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x2c(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	shr    $0x3f,%rax
	movzbl %al,%eax
	test   %rax,%rax
	jne    <nif_binary_at_2+0x10e>
	mov    -0x2c(%rbp),%eax
	cltq   
	cmp    %rax,-0x18(%rbp)
	setge  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_at_2+0x13e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_at_2+0x15e>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    -0x18(%rbp),%rdx
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_binary_first_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_first_1+0x6e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x38(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_first_1+0xd1>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_first_1+0xb8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_first_1+0xd1>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_binary_last_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_last_1+0x6e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x38(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_last_1+0xe4>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x1c(%rbp)
	cmpl   $0x0,-0x1c(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_last_1+0xbc>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_last_1+0xe4>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	sub    $0x1,%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_binary_part_3>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %esi,-0x5c(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x68(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x68(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_part_3+0x89>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_part_3+0x26f>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_part_3+0xd7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_part_3+0x26f>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_part_3+0x125>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_part_3+0x26f>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x44(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x40(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x38(%rbp)
	cmpq   $0x0,-0x38(%rbp)
	jns    <nif_binary_part_3+0x167>
	mov    -0x38(%rbp),%rax
	add    %rax,-0x40(%rbp)
	negq   -0x38(%rbp)
	mov    -0x40(%rbp),%rax
	shr    $0x3f,%rax
	movzbl %al,%eax
	test   %rax,%rax
	jne    <nif_binary_part_3+0x18b>
	mov    -0x44(%rbp),%eax
	cltq   
	cmp    %rax,-0x40(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_part_3+0x192>
	mov    $0x1,%eax
	jmp    <nif_binary_part_3+0x197>
	mov    $0x0,%eax
	test   %eax,%eax
	jne    <nif_binary_part_3+0x1b9>
	mov    -0x40(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	add    %rax,%rdx
	mov    -0x44(%rbp),%eax
	cltq   
	cmp    %rax,%rdx
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_part_3+0x1ec>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_part_3+0x26f>
	mov    -0x38(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_sub_binary_heap_size>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_part_3+0x254>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_part_3+0x26f>
	mov    -0x38(%rbp),%rdx
	mov    -0x40(%rbp),%rsi
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x58(%rbp),%rcx
	mov    %rax,%rdi
	call   <term_maybe_create_sub_binary>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_binary_split_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x98,%rsp
	mov    %rdi,-0x88(%rbp)
	mov    %esi,-0x8c(%rbp)
	mov    %rdx,-0x98(%rbp)
	mov    -0x98(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x98(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x58(%rbp)
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_split_2+0x95>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x98(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_split_2+0x375>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_split_2+0xe9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x98(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_split_2+0x375>
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x74(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x70(%rbp)
	cmpl   $0x0,-0x70(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_split_2+0x14f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_split_2+0x375>
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x50(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x48(%rbp)
	mov    -0x70(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x74(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x48(%rbp),%rdx
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <memmem@plt>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	sub    -0x50(%rbp),%rax
	mov    %eax,-0x6c(%rbp)
	cmpq   $0x0,-0x40(%rbp)
	je     <nif_binary_split_2+0x2f5>
	mov    -0x6c(%rbp),%eax
	mov    %eax,-0x68(%rbp)
	mov    -0x68(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x60(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_sub_binary_heap_size>
	mov    %rax,-0x38(%rbp)
	mov    -0x74(%rbp),%eax
	sub    -0x6c(%rbp),%eax
	sub    -0x70(%rbp),%eax
	mov    %eax,-0x64(%rbp)
	mov    -0x64(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x60(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_sub_binary_heap_size>
	mov    %rax,-0x30(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	add    %edx,%eax
	lea    0x2(%rax),%edx
	mov    -0x88(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_split_2+0x24f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_split_2+0x375>
	mov    -0x98(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x68(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x88(%rbp),%rcx
	mov    -0x60(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_maybe_create_sub_binary>
	mov    %rax,-0x28(%rbp)
	mov    -0x64(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x6c(%rbp),%ecx
	mov    -0x70(%rbp),%eax
	add    %ecx,%eax
	movslq %eax,%rsi
	mov    -0x88(%rbp),%rcx
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_create_sub_binary>
	mov    %rax,-0x20(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,%rcx
	mov    -0x88(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x18(%rbp)
	mov    -0x88(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	jmp    <nif_binary_split_2+0x375>
	mov    -0x88(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_binary_split_2+0x34c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_binary_split_2+0x375>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,%rcx
	mov    -0x98(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x88(%rbp),%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_list_prepend>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_throw>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	movq   $0x88b,0x58(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<nif_erts_debug_flat_size>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <memory_estimate_usage>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %eax,%edi
	call   <term_from_int32>
	leave  
	ret    

<nif_erlang_pid_to_list>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %esi,-0x5c(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_pid_to_list+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_pid_to_list+0x168>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,%edx
	lea    -0x30(%rbp),%rax
	mov    %edx,%ecx
	lea    0x18613(%rip),%rdx        # <_IO_stdin_used+0x43f8>
	mov    $0x11,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	lea    -0x30(%rbp),%rax
	mov    $0x11,%esi
	mov    %rax,%rdi
	call   <strnlen@plt>
	mov    %eax,-0x44(%rbp)
	mov    -0x44(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_pid_to_list+0x113>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_pid_to_list+0x168>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x40(%rbp)
	mov    -0x44(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x48(%rbp)
	jmp    <nif_erlang_pid_to_list+0x15e>
	mov    -0x48(%rbp),%eax
	cltq   
	movzbl -0x30(%rbp,%rax,1),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x40(%rbp)
	subl   $0x1,-0x48(%rbp)
	cmpl   $0x0,-0x48(%rbp)
	jns    <nif_erlang_pid_to_list+0x12c>
	mov    -0x40(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_pid_to_list+0x17c>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_ref_to_list>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x78,%rsp
	mov    %rdi,-0x68(%rbp)
	mov    %esi,-0x6c(%rbp)
	mov    %rdx,-0x78(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x78(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_ref_to_list+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x78(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_ref_to_list+0x16f>
	lea    0x184ae(%rip),%rax        # <_IO_stdin_used+0x4401>
	mov    %rax,-0x48(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_ref_ticks>
	mov    %rax,%rcx
	mov    -0x48(%rbp),%rdx
	lea    -0x40(%rbp),%rax
	mov    $0x21,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	lea    -0x40(%rbp),%rax
	mov    $0x21,%esi
	mov    %rax,%rdi
	call   <strnlen@plt>
	mov    %eax,-0x5c(%rbp)
	mov    -0x5c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x68(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_ref_to_list+0x11a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_ref_to_list+0x16f>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x58(%rbp)
	mov    -0x5c(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x60(%rbp)
	jmp    <nif_erlang_ref_to_list+0x165>
	mov    -0x60(%rbp),%eax
	cltq   
	movzbl -0x40(%rbp,%rax,1),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x58(%rbp)
	subl   $0x1,-0x60(%rbp)
	cmpl   $0x0,-0x60(%rbp)
	jns    <nif_erlang_ref_to_list+0x133>
	mov    -0x58(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_ref_to_list+0x183>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_fun_to_list>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xa8,%rsp
	mov    %rdi,-0x98(%rbp)
	mov    %esi,-0x9c(%rbp)
	mov    %rdx,-0xa8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x70(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_function>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_fun_to_list+0x95>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0xa8(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0xa8(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_fun_to_list+0x1c4>
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x68(%rbp)
	mov    -0x68(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x68(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	mov    %eax,-0x80(%rbp)
	lea    0x182f3(%rip),%rax        # <_IO_stdin_used+0x4411>
	mov    %rax,-0x58(%rbp)
	mov    -0x60(%rbp),%rsi
	mov    -0x80(%rbp),%ecx
	mov    -0x58(%rbp),%rdx
	lea    -0x50(%rbp),%rax
	mov    %rsi,%r8
	mov    $0x2f,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	lea    -0x50(%rbp),%rax
	mov    $0x2f,%esi
	mov    %rax,%rdi
	call   <strnlen@plt>
	mov    %eax,-0x7c(%rbp)
	mov    -0x7c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x98(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_fun_to_list+0x160>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_fun_to_list+0x1c4>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x78(%rbp)
	mov    -0x7c(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x84(%rbp)
	jmp    <nif_erlang_fun_to_list+0x1b7>
	mov    -0x84(%rbp),%eax
	cltq   
	movzbl -0x50(%rbp,%rax,1),%eax
	movsbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x78(%rbp)
	subl   $0x1,-0x84(%rbp)
	cmpl   $0x0,-0x84(%rbp)
	jns    <nif_erlang_fun_to_list+0x17c>
	mov    -0x78(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_erlang_fun_to_list+0x1d8>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_function_exported>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x78,%rsp
	mov    %rdi,-0x68(%rbp)
	mov    %esi,-0x6c(%rbp)
	mov    %rdx,-0x78(%rbp)
	mov    -0x78(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x58(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x50(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_function_exported+0x89>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x78(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_function_exported+0x22d>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_function_exported+0xd7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x78(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_function_exported+0x22d>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_function_exported+0x125>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x78(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_function_exported+0x22d>
	mov    -0x68(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x58(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x40(%rbp)
	mov    -0x68(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x50(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x38(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rcx
	mov    -0x40(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <bif_registry_get_handler>
	mov    %rax,-0x28(%rbp)
	cmpq   $0x0,-0x28(%rbp)
	je     <nif_erlang_function_exported+0x19f>
	mov    $0x4b,%eax
	jmp    <nif_erlang_function_exported+0x22d>
	mov    -0x30(%rbp),%rax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rcx
	mov    -0x40(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <nifs_get>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x20(%rbp)
	je     <nif_erlang_function_exported+0x1ca>
	mov    $0x4b,%eax
	jmp    <nif_erlang_function_exported+0x22d>
	mov    -0x68(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x40(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_get_module>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_function_exported+0x1ff>
	mov    $0xb,%eax
	jmp    <nif_erlang_function_exported+0x22d>
	mov    -0x30(%rbp),%rax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_search_exported_function>
	mov    %eax,-0x5c(%rbp)
	cmpl   $0x0,-0x5c(%rbp)
	jne    <nif_erlang_function_exported+0x228>
	mov    $0xb,%eax
	jmp    <nif_erlang_function_exported+0x22d>
	mov    $0x4b,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_garbage_collect>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,-0x38(%rbp)
	cmpl   $0x1,-0x4c(%rbp)
	jne    <nif_erlang_garbage_collect+0xc8>
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_garbage_collect+0x83>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_garbage_collect+0x1c5>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x3c(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x3c(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x38(%rbp)
	cmpq   $0x0,-0x38(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_garbage_collect+0xc8>
	mov    $0xb,%eax
	jmp    <nif_erlang_garbage_collect+0x1c5>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <context_memory_size>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	add    $0x10,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_gc>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_garbage_collect+0x12f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_garbage_collect+0x1c5>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <context_avail_free_memory>
	mov    %rax,-0x20(%rbp)
	movq   $0x20,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	cmp    -0x18(%rbp),%rax
	jbe    <nif_erlang_garbage_collect+0x1c0>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <context_memory_size>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	sub    %eax,%edx
	mov    -0x18(%rbp),%rax
	add    %edx,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_gc>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_garbage_collect+0x1c0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_garbage_collect+0x1c5>
	mov    $0x4b,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_error>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<nif_erlang_exit>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x1b8(%rax)
	mov    -0x18(%rbp),%rax
	movq   $0xe8b,0x58(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<nif_erlang_make_fun_3>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_make_fun_3+0x89>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_make_fun_3+0x137>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_make_fun_3+0xd4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_make_fun_3+0x137>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_make_fun_3+0x11f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_make_fun_3+0x137>
	mov    -0x38(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0x20(%rbp),%rsi
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_make_function_reference>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_put_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rcx
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	lea    0x150(%rax),%rdi
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	call   <dictionary_put>
	leave  
	ret    

<nif_erlang_erase_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	lea    0x150(%rax),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <dictionary_erase>
	leave  
	ret    

<nif_erlang_monitor>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	cmp    $0xb8b,%rax
	je     <nif_erlang_monitor+0x66>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_monitor+0x198>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_monitor+0xb4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_monitor+0x198>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x34(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x34(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x28(%rbp)
	cmpq   $0x0,-0x28(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_monitor+0x109>
	mov    -0x58(%rbp),%rdx
	mov    -0x4c(%rbp),%ecx
	mov    -0x48(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <nif_erlang_make_ref_0>
	jmp    <nif_erlang_monitor+0x198>
	mov    -0x48(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <context_monitor>
	mov    %rax,-0x18(%rbp)
	mov    -0x48(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_monitor+0x185>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_monitor+0x198>
	mov    -0x48(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_demonitor>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_demonitor+0x6e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x38(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_demonitor+0x9d>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_ref_ticks>
	mov    %rax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_demonitor>
	mov    $0x4b,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_link>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_link+0x71>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_link+0x1b5>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x34(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x34(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x28(%rbp)
	cmpq   $0x0,-0x28(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_link+0xd9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x48(%rbp),%rax
	movq   $0xc4b,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_link+0x1b5>
	mov    -0x48(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <context_monitor>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_link+0x147>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_link+0x1b5>
	mov    -0x28(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,%rcx
	mov    -0x48(%rbp),%rax
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <context_monitor>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_link+0x1b0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_link+0x1b5>
	mov    $0x4b,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_unlink>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_unlink+0x71>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_unlink+0x107>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x2c(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x2c(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x20(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_unlink+0xb3>
	mov    $0x4b,%eax
	jmp    <nif_erlang_unlink+0x107>
	mov    -0x38(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rcx
	mov    -0x20(%rbp),%rax
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <context_demonitor>
	mov    -0x20(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,%rcx
	mov    -0x38(%rbp),%rax
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <context_demonitor>
	mov    $0x4b,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_erlang_group_leader>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %rdx,-0x48(%rbp)
	cmpl   $0x0,-0x3c(%rbp)
	jne    <nif_erlang_group_leader+0x5b>
	mov    -0x38(%rbp),%rax
	mov    0x1a0(%rax),%rbx
	mov    $0x0,%edi
	call   <term_from_local_process_id>
	cmp    %rax,%rbx
	jne    <nif_erlang_group_leader+0x4b>
	mov    -0x38(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	jmp    <nif_erlang_group_leader+0x18a>
	mov    -0x38(%rbp),%rax
	mov    0x1a0(%rax),%rax
	jmp    <nif_erlang_group_leader+0x18a>
	mov    -0x48(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_group_leader+0xc0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_group_leader+0x18a>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_group_leader+0x10b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x48(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_group_leader+0x18a>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0x2c(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x2c(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_erlang_group_leader+0x176>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_erlang_group_leader+0x18a>
	mov    -0x18(%rbp),%rax
	mov    -0x28(%rbp),%rdx
	mov    %rdx,0x1a0(%rax)
	mov    $0x4b,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_atomvm_read_priv>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x98,%rsp
	mov    %rdi,-0x88(%rbp)
	mov    %esi,-0x8c(%rbp)
	mov    %rdx,-0x98(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x98(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x58(%rbp)
	mov    -0x98(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x50(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_atomvm_read_priv+0xa4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x98(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x98(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_atomvm_read_priv+0x3aa>
	mov    -0x88(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	add    $0x78,%rax
	mov    %rax,%rdi
	call   <list_is_empty>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_atomvm_read_priv+0x10c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_atomvm_read_priv+0x3aa>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0x78(%rbp)
	mov    -0x78(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x48(%rbp),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0x74(%rbp)
	mov    -0x74(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x38(%rbp)
	mov    -0x74(%rbp),%eax
	movslq %eax,%rbx
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,%rcx
	mov    -0x38(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x74(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x38(%rbp),%rax
	add    %rdx,%rax
	movb   $0x0,(%rax)
	lea    -0x80(%rbp),%rdx
	mov    -0x50(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_term_to_string>
	mov    %rax,-0x30(%rbp)
	mov    -0x80(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_atomvm_read_priv+0x1f7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_atomvm_read_priv+0x3aa>
	cmpq   $0x0,-0x30(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_atomvm_read_priv+0x240>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_atomvm_read_priv+0x3aa>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %eax,%edx
	mov    -0x74(%rbp),%eax
	add    %edx,%eax
	add    $0x7,%eax
	mov    %eax,-0x70(%rbp)
	mov    -0x70(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x28(%rbp)
	mov    -0x70(%rbp),%eax
	movslq %eax,%rsi
	mov    -0x30(%rbp),%rcx
	mov    -0x38(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rcx,%r8
	mov    %rdx,%rcx
	lea    0x1727c(%rip),%rdx        # <_IO_stdin_used+0x4429>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x48(%rbp),%rax
	mov    0x78(%rax),%rax
	mov    %rax,-0x60(%rbp)
	jmp    <nif_atomvm_read_priv+0x382>
	mov    -0x60(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    0x10(%rax),%rax
	lea    -0x7c(%rbp),%rcx
	lea    -0x68(%rbp),%rdx
	mov    -0x28(%rbp),%rsi
	mov    %rax,%rdi
	call   <avmpack_find_section_by_name>
	test   %eax,%eax
	je     <nif_atomvm_read_priv+0x377>
	mov    -0x68(%rbp),%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x6c(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x88(%rbp),%rax
	mov    $0x6,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_atomvm_read_priv+0x359>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x88(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_atomvm_read_priv+0x3aa>
	mov    -0x68(%rbp),%rax
	lea    0x4(%rax),%rcx
	mov    -0x88(%rbp),%rdx
	mov    -0x6c(%rbp),%eax
	mov    %eax,%esi
	mov    %rcx,%rdi
	call   <term_from_const_binary>
	jmp    <nif_atomvm_read_priv+0x3aa>
	mov    -0x60(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x48(%rbp),%rax
	add    $0x78,%rax
	cmp    %rax,-0x60(%rbp)
	jne    <nif_atomvm_read_priv+0x2bf>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_atomvm_read_priv+0x3be>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_console_print>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <nif_console_print+0x91>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x28(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %eax,%esi
	mov    0x25d09(%rip),%rax        # <stdout@GLIBC_2.2.5>
	mov    -0x28(%rbp),%rdx
	mov    %rdx,%rcx
	mov    %esi,%edx
	lea    0x170cd(%rip),%rsi        # <_IO_stdin_used+0x4434>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <nif_console_print+0x21c>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_console_print+0xdf>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_console_print+0x226>
	lea    -0x40(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_iolist_size>
	mov    %eax,-0x3c(%rbp)
	mov    -0x40(%rbp),%eax
	test   %eax,%eax
	jne    <nif_console_print+0x12f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_console_print+0x226>
	mov    -0x3c(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x30(%rbp)
	cmpq   $0x0,-0x30(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_console_print+0x183>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_console_print+0x226>
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_write_iolist>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_console_print+0x1df>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_console_print+0x226>
	mov    0x25b92(%rip),%rax        # <stdout@GLIBC_2.2.5>
	mov    -0x30(%rbp),%rcx
	mov    -0x3c(%rbp),%edx
	lea    0x16f58(%rip),%rsi        # <_IO_stdin_used+0x4434>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    0x25b70(%rip),%rax        # <stdout@GLIBC_2.2.5>
	mov    %rax,%rdi
	call   <fflush@plt>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_console_print+0x23a>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<base64_encode>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x90,%rsp
	mov    %rdi,-0x78(%rbp)
	mov    %esi,-0x7c(%rbp)
	mov    %rdx,-0x88(%rbp)
	mov    %ecx,%eax
	mov    %al,-0x80(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x88(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	movq   $0x0,-0x60(%rbp)
	movq   $0x0,-0x58(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <base64_encode+0x98>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x68(%rbp)
	cmpq   $0x0,-0x68(%rbp)
	jne    <base64_encode+0x28a>
	cmpb   $0x0,-0x80(%rbp)
	jne    <base64_encode+0x8f>
	mov    $0x0,%eax
	call   <term_nil>
	jmp    <base64_encode+0x628>
	mov    -0x20(%rbp),%rax
	jmp    <base64_encode+0x628>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <base64_encode+0x257>
	lea    -0x6c(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_iolist_size>
	cltq   
	mov    %rax,-0x68(%rbp)
	mov    -0x6c(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_encode+0x108>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_encode+0x628>
	cmpq   $0x0,-0x68(%rbp)
	jne    <base64_encode+0x19b>
	cmpb   $0x0,-0x80(%rbp)
	je     <base64_encode+0x18c>
	mov    $0x0,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x78(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_encode+0x176>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_encode+0x628>
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x0,%edi
	call   <term_create_empty_binary>
	jmp    <base64_encode+0x628>
	mov    $0x0,%eax
	call   <term_nil>
	jmp    <base64_encode+0x628>
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x58(%rbp)
	cmpq   $0x0,-0x58(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_encode+0x1ee>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_encode+0x628>
	mov    -0x58(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_write_iolist>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_encode+0x24d>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_encode+0x628>
	mov    -0x58(%rbp),%rax
	mov    %rax,-0x60(%rbp)
	jmp    <base64_encode+0x28a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_encode+0x628>
	mov    -0x68(%rbp),%rax
	shl    $0x2,%rax
	movabs $0xaaaaaaaaaaaaaaab,%rdx
	mul    %rdx
	mov    %rdx,%rax
	shr    %rax
	mov    %rax,-0x50(%rbp)
	movq   $0x0,-0x48(%rbp)
	mov    -0x68(%rbp),%rcx
	movabs $0xaaaaaaaaaaaaaaab,%rdx
	mov    %rcx,%rax
	mul    %rdx
	mov    %rdx,%rax
	shr    %rax
	mov    %rax,%rdx
	add    %rdx,%rdx
	add    %rax,%rdx
	mov    %rcx,%rax
	sub    %rdx,%rax
	cmp    $0x2,%rax
	je     <base64_encode+0x300>
	cmp    $0x2,%rax
	ja     <base64_encode+0x310>
	test   %rax,%rax
	je     <base64_encode+0x30f>
	cmp    $0x1,%rax
	jne    <base64_encode+0x310>
	movq   $0x2,-0x48(%rbp)
	addq   $0x1,-0x50(%rbp)
	jmp    <base64_encode+0x310>
	movq   $0x1,-0x48(%rbp)
	addq   $0x1,-0x50(%rbp)
	jmp    <base64_encode+0x310>
	nop
	mov    -0x50(%rbp),%rdx
	mov    -0x48(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x18(%rbp)
	cmpb   $0x0,-0x80(%rbp)
	je     <base64_encode+0x337>
	mov    -0x18(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	cltq   
	jmp    <base64_encode+0x33e>
	mov    -0x50(%rbp),%rax
	add    %rax,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %eax,%edx
	mov    -0x78(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_encode+0x396>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_encode+0x628>
	mov    -0x88(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <base64_encode+0x3c2>
	mov    -0x88(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x60(%rbp)
	cmpb   $0x0,-0x80(%rbp)
	je     <base64_encode+0x3f2>
	mov    -0x18(%rbp),%rax
	mov    %eax,%edx
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_create_empty_binary>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x38(%rbp)
	jmp    <base64_encode+0x451>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x38(%rbp)
	cmpq   $0x0,-0x38(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_encode+0x451>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_encode+0x628>
	movq   $0x0,-0x30(%rbp)
	jmp    <base64_encode+0x5a8>
	movb   $0x0,-0x6d(%rbp)
	mov    -0x30(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x3,%rax
	je     <base64_encode+0x576>
	cmp    $0x3,%rax
	ja     <base64_encode+0x5a3>
	cmp    $0x2,%rax
	je     <base64_encode+0x523>
	cmp    $0x2,%rax
	ja     <base64_encode+0x5a3>
	test   %rax,%rax
	je     <base64_encode+0x4a1>
	cmp    $0x1,%rax
	je     <base64_encode+0x4cd>
	jmp    <base64_encode+0x5a3>
	mov    -0x60(%rbp),%rax
	movzbl (%rax),%eax
	shr    $0x2,%al
	movzbl %al,%eax
	cltq   
	lea    0x25641(%rip),%rdx        # <b64_table>
	movzbl (%rax,%rdx,1),%edx
	mov    -0x38(%rbp),%rcx
	mov    -0x30(%rbp),%rax
	add    %rcx,%rax
	mov    %dl,(%rax)
	jmp    <base64_encode+0x5a3>
	mov    -0x60(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x4,%eax
	and    $0x30,%eax
	mov    %al,-0x6d(%rbp)
	addq   $0x1,-0x60(%rbp)
	mov    -0x50(%rbp),%rax
	sub    $0x1,%rax
	cmp    %rax,-0x30(%rbp)
	jae    <base64_encode+0x500>
	mov    -0x60(%rbp),%rax
	movzbl (%rax),%eax
	shr    $0x4,%al
	or     %al,-0x6d(%rbp)
	movzbl -0x6d(%rbp),%eax
	cltq   
	lea    0x255eb(%rip),%rdx        # <b64_table>
	movzbl (%rax,%rdx,1),%edx
	mov    -0x38(%rbp),%rcx
	mov    -0x30(%rbp),%rax
	add    %rcx,%rax
	mov    %dl,(%rax)
	jmp    <base64_encode+0x5a3>
	mov    -0x60(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	shl    $0x2,%eax
	and    $0x3c,%eax
	mov    %al,-0x6d(%rbp)
	addq   $0x1,-0x60(%rbp)
	mov    -0x50(%rbp),%rax
	sub    $0x1,%rax
	cmp    %rax,-0x30(%rbp)
	jae    <base64_encode+0x556>
	mov    -0x60(%rbp),%rax
	movzbl (%rax),%eax
	shr    $0x6,%al
	or     %al,-0x6d(%rbp)
	movzbl -0x6d(%rbp),%eax
	cltq   
	lea    0x25595(%rip),%rdx        # <b64_table>
	movzbl (%rax,%rdx,1),%edx
	mov    -0x38(%rbp),%rcx
	mov    -0x30(%rbp),%rax
	add    %rcx,%rax
	mov    %dl,(%rax)
	jmp    <base64_encode+0x5a3>
	mov    -0x60(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	and    $0x3f,%eax
	cltq   
	lea    0x2556c(%rip),%rdx        # <b64_table>
	movzbl (%rax,%rdx,1),%edx
	mov    -0x38(%rbp),%rcx
	mov    -0x30(%rbp),%rax
	add    %rcx,%rax
	mov    %dl,(%rax)
	addq   $0x1,-0x60(%rbp)
	nop
	addq   $0x1,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	cmp    -0x50(%rbp),%rax
	jb     <base64_encode+0x45e>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	movq   $0x0,-0x28(%rbp)
	jmp    <base64_encode+0x5e6>
	mov    -0x50(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	add    %rax,%rdx
	mov    -0x38(%rbp),%rax
	add    %rdx,%rax
	movb   $0x3d,(%rax)
	addq   $0x1,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	cmp    -0x48(%rbp),%rax
	jb     <base64_encode+0x5cc>
	movzbl -0x80(%rbp),%eax
	xor    $0x1,%eax
	test   %al,%al
	je     <base64_encode+0x624>
	mov    -0x18(%rbp),%rax
	movzwl %ax,%ecx
	mov    -0x78(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_string>
	mov    %rax,-0x40(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x40(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <base64_encode+0x63c>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<find_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,%eax
	mov    %al,-0x4(%rbp)
	cmpb   $0x40,-0x4(%rbp)
	jbe    <find_index+0x1e>
	cmpb   $0x5a,-0x4(%rbp)
	ja     <find_index+0x1e>
	movzbl -0x4(%rbp),%eax
	sub    $0x41,%eax
	jmp    <find_index+0x67>
	cmpb   $0x60,-0x4(%rbp)
	jbe    <find_index+0x33>
	cmpb   $0x7a,-0x4(%rbp)
	ja     <find_index+0x33>
	movzbl -0x4(%rbp),%eax
	sub    $0x47,%eax
	jmp    <find_index+0x67>
	cmpb   $0x2f,-0x4(%rbp)
	jbe    <find_index+0x48>
	cmpb   $0x39,-0x4(%rbp)
	ja     <find_index+0x48>
	movzbl -0x4(%rbp),%eax
	add    $0x4,%eax
	jmp    <find_index+0x67>
	cmpb   $0x2b,-0x4(%rbp)
	jne    <find_index+0x55>
	mov    $0x3e,%eax
	jmp    <find_index+0x67>
	cmpb   $0x2f,-0x4(%rbp)
	jne    <find_index+0x62>
	mov    $0x3f,%eax
	jmp    <find_index+0x67>
	mov    $0xffffffff,%eax
	pop    %rbp
	ret    

<base64_decode>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x90,%rsp
	mov    %rdi,-0x78(%rbp)
	mov    %esi,-0x7c(%rbp)
	mov    %rdx,-0x88(%rbp)
	mov    %ecx,%eax
	mov    %al,-0x80(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x88(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	movq   $0x0,-0x58(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <base64_decode+0xe4>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x68(%rbp)
	cmpq   $0x0,-0x68(%rbp)
	jne    <base64_decode+0x90>
	cmpb   $0x0,-0x80(%rbp)
	jne    <base64_decode+0x87>
	mov    $0x0,%eax
	call   <term_nil>
	jmp    <base64_decode+0x66e>
	mov    -0x28(%rbp),%rax
	jmp    <base64_decode+0x66e>
	mov    -0x68(%rbp),%rax
	and    $0x3,%eax
	test   %rax,%rax
	je     <base64_decode+0xcf>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x60(%rbp)
	jmp    <base64_decode+0x315>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <base64_decode+0x2e2>
	lea    -0x6c(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_iolist_size>
	cltq   
	mov    %rax,-0x68(%rbp)
	mov    -0x6c(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_decode+0x154>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	cmpq   $0x0,-0x68(%rbp)
	jne    <base64_decode+0x1e7>
	cmpb   $0x0,-0x80(%rbp)
	je     <base64_decode+0x1d8>
	mov    $0x0,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x78(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_decode+0x1c2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x0,%edi
	call   <term_create_empty_binary>
	jmp    <base64_decode+0x66e>
	mov    $0x0,%eax
	call   <term_nil>
	jmp    <base64_decode+0x66e>
	mov    -0x68(%rbp),%rax
	and    $0x3,%eax
	test   %rax,%rax
	je     <base64_decode+0x226>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x58(%rbp)
	cmpq   $0x0,-0x58(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_decode+0x279>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	mov    -0x58(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_write_iolist>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_decode+0x2d8>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	mov    -0x58(%rbp),%rax
	mov    %rax,-0x60(%rbp)
	jmp    <base64_decode+0x315>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	mov    -0x68(%rbp),%rdx
	mov    %rdx,%rax
	add    %rax,%rax
	add    %rdx,%rax
	shr    $0x2,%rax
	mov    %rax,-0x20(%rbp)
	movq   $0x0,-0x50(%rbp)
	mov    -0x68(%rbp),%rax
	lea    -0x1(%rax),%rdx
	mov    -0x60(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	cmp    $0x3d,%al
	jne    <base64_decode+0x370>
	mov    -0x68(%rbp),%rax
	lea    -0x2(%rax),%rdx
	mov    -0x60(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	cmp    $0x3d,%al
	jne    <base64_decode+0x368>
	movq   $0x2,-0x50(%rbp)
	jmp    <base64_decode+0x370>
	movq   $0x1,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	sub    %rax,-0x20(%rbp)
	cmpb   $0x0,-0x80(%rbp)
	je     <base64_decode+0x390>
	mov    -0x20(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	cltq   
	jmp    <base64_decode+0x397>
	mov    -0x20(%rbp),%rax
	add    %rax,%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %eax,%edx
	mov    -0x78(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_decode+0x3ef>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	movq   $0x0,-0x38(%rbp)
	cmpb   $0x0,-0x80(%rbp)
	je     <base64_decode+0x427>
	mov    -0x20(%rbp),%rax
	mov    %eax,%edx
	mov    -0x78(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_create_empty_binary>
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x40(%rbp)
	jmp    <base64_decode+0x48e>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x38(%rbp)
	cmpq   $0x0,-0x38(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <base64_decode+0x486>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x88(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <base64_decode+0x4ba>
	mov    -0x88(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x60(%rbp)
	mov    -0x68(%rbp),%rax
	sub    -0x50(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	movq   $0x0,-0x30(%rbp)
	jmp    <base64_decode+0x61c>
	mov    -0x60(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    %eax,%edi
	call   <find_index>
	mov    %al,-0x6d(%rbp)
	cmpb   $0xff,-0x6d(%rbp)
	jne    <base64_decode+0x527>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x78(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <base64_decode+0x66e>
	mov    -0x30(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x3,%rax
	je     <base64_decode+0x5fa>
	cmp    $0x3,%rax
	ja     <base64_decode+0x617>
	cmp    $0x2,%rax
	je     <base64_decode+0x5b9>
	cmp    $0x2,%rax
	ja     <base64_decode+0x617>
	test   %rax,%rax
	je     <base64_decode+0x562>
	cmp    $0x1,%rax
	je     <base64_decode+0x578>
	jmp    <base64_decode+0x617>
	movzbl -0x6d(%rbp),%eax
	lea    0x0(,%rax,4),%edx
	mov    -0x40(%rbp),%rax
	mov    %dl,(%rax)
	jmp    <base64_decode+0x617>
	mov    -0x40(%rbp),%rax
	movzbl (%rax),%edx
	movzbl -0x6d(%rbp),%eax
	shr    $0x4,%al
	or     %eax,%edx
	mov    -0x40(%rbp),%rax
	mov    %dl,(%rax)
	cmpq   $0x2,-0x50(%rbp)
	jne    <base64_decode+0x5a3>
	mov    -0x10(%rbp),%rax
	sub    $0x1,%rax
	cmp    %rax,-0x30(%rbp)
	jae    <base64_decode+0x613>
	addq   $0x1,-0x40(%rbp)
	movzbl -0x6d(%rbp),%eax
	shl    $0x4,%eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	mov    %dl,(%rax)
	jmp    <base64_decode+0x613>
	mov    -0x40(%rbp),%rax
	movzbl (%rax),%edx
	movzbl -0x6d(%rbp),%eax
	shr    $0x2,%al
	or     %eax,%edx
	mov    -0x40(%rbp),%rax
	mov    %dl,(%rax)
	cmpq   $0x1,-0x50(%rbp)
	jne    <base64_decode+0x5e4>
	mov    -0x10(%rbp),%rax
	sub    $0x1,%rax
	cmp    %rax,-0x30(%rbp)
	jae    <base64_decode+0x616>
	addq   $0x1,-0x40(%rbp)
	movzbl -0x6d(%rbp),%eax
	shl    $0x6,%eax
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	mov    %dl,(%rax)
	jmp    <base64_decode+0x616>
	mov    -0x40(%rbp),%rax
	movzbl (%rax),%eax
	or     -0x6d(%rbp),%al
	mov    %eax,%edx
	mov    -0x40(%rbp),%rax
	mov    %dl,(%rax)
	addq   $0x1,-0x40(%rbp)
	jmp    <base64_decode+0x617>
	nop
	jmp    <base64_decode+0x617>
	nop
	addq   $0x1,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jb     <base64_decode+0x4d3>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	movzbl -0x80(%rbp),%eax
	xor    $0x1,%eax
	test   %al,%al
	je     <base64_decode+0x66a>
	mov    -0x20(%rbp),%rax
	movzwl %ax,%ecx
	mov    -0x78(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_string>
	mov    %rax,-0x48(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x48(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <base64_decode+0x682>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_base64_encode>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	mov    $0x1,%ecx
	mov    %rax,%rdi
	call   <base64_encode>
	leave  
	ret    

<nif_base64_decode>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	mov    $0x1,%ecx
	mov    %rax,%rdi
	call   <base64_decode>
	leave  
	ret    

<nif_base64_encode_to_string>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	mov    $0x0,%ecx
	mov    %rax,%rdi
	call   <base64_encode>
	leave  
	ret    

<nif_base64_decode_to_string>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	mov    $0x0,%ecx
	mov    %rax,%rdi
	call   <base64_decode>
	leave  
	ret    

<nif_maps_next>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %esi,-0x5c(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	cmp    $0xd8b,%rax
	jne    <nif_maps_next+0x31>
	mov    $0xd8b,%eax
	jmp    <nif_maps_next+0x296>
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_maps_next+0x8a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_maps_next+0x296>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_maps_next+0xe8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_maps_next+0x296>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_maps_next+0x146>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x68(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_maps_next+0x296>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	mov    %eax,-0x50(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %eax,-0x4c(%rbp)
	mov    -0x4c(%rbp),%eax
	cmp    -0x50(%rbp),%eax
	jl     <nif_maps_next+0x176>
	mov    $0xd8b,%eax
	jmp    <nif_maps_next+0x296>
	mov    -0x58(%rbp),%rax
	mov    $0x6,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_maps_next+0x1c7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_maps_next+0x296>
	mov    -0x68(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x38(%rbp)
	mov    -0x4c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,-0x30(%rbp)
	mov    -0x4c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,-0x28(%rbp)
	mov    -0x4c(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x20(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x3,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x18(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x28(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x20(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_get_size_from_boxed_header>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_is_pid>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0x3,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_reference>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_reference+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x10,%rax
	jne    <term_is_reference+0x43>
	mov    $0x1,%eax
	jmp    <term_is_reference+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<term_to_local_process_id>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x4,%rax
	pop    %rbp
	ret    

<term_from_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_alloc_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x14(%rbp),%eax
	shl    $0x6,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_put_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_arity>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<context_avail_free_memory>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xf8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0xf0(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	pop    %rbp
	ret    

<port_create_tuple2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x30(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	lea    -0x20(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <port_create_tuple_n>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <port_create_tuple2+0x60>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<port_create_tuple3>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x30(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	lea    -0x20(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <port_create_tuple_n>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <port_create_tuple3+0x6c>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<port_create_tuple_n>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %eax,%edx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x8(%rbp)
	movq   $0x0,-0x10(%rbp)
	jmp    <port_create_tuple_n+0x69>
	mov    -0x10(%rbp),%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %eax,%ecx
	mov    -0x8(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	addq   $0x1,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	cmp    -0x20(%rbp),%rax
	jb     <port_create_tuple_n+0x3a>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<port_create_error_tuple>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_tuple2>
	leave  
	ret    

<port_create_sys_error_tuple>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %edx,-0x24(%rbp)
	mov    -0x24(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_tuple2>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	leave  
	ret    

<port_create_ok_tuple>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_tuple2>
	leave  
	ret    

<port_send_reply>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_tuple2>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_send_message>
	nop
	leave  
	ret    

<port_send_message>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,-0xc(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0xc(%rbp),%edx
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <globalcontext_get_process>
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <mailbox_send>
	nop
	leave  
	ret    

<port_ensure_available>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <context_avail_free_memory>
	cmp    %rax,-0x10(%rbp)
	jbe    <port_ensure_available+0xac>
	mov    -0x10(%rbp),%rax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	cmp    $0x2,%eax
	je     <port_ensure_available+0x7f>
	cmp    $0x2,%eax
	ja     <port_ensure_available+0xac>
	test   %eax,%eax
	je     <port_ensure_available+0xab>
	cmp    $0x1,%eax
	je     <port_ensure_available+0x53>
	jmp    <port_ensure_available+0xac>
	mov    0x24574(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x5e,%ecx
	lea    0x160c8(%rip),%rdx        # <asso_values.0+0x100>
	lea    0x160f9(%rip),%rsi        # <asso_values.0+0x138>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    0x24548(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x62,%ecx
	lea    0x1609c(%rip),%rdx        # <asso_values.0+0x100>
	lea    0x16105(%rip),%rsi        # <asso_values.0+0x170>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	nop
	nop
	leave  
	ret    

<port_is_standard_port_command>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	jne    <port_is_standard_port_command+0x27>
	mov    $0x0,%eax
	jmp    <port_is_standard_port_command+0x9c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    $0x3,%eax
	je     <port_is_standard_port_command+0x3f>
	mov    $0x0,%eax
	jmp    <port_is_standard_port_command+0x9c>
	mov    -0x18(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	jne    <port_is_standard_port_command+0x80>
	mov    $0x0,%eax
	jmp    <port_is_standard_port_command+0x9c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	jne    <port_is_standard_port_command+0x97>
	mov    $0x0,%eax
	jmp    <port_is_standard_port_command+0x9c>
	mov    $0x1,%eax
	leave  
	ret    

<list_remove>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x8(%rax)
	nop
	pop    %rbp
	ret    

<list_init>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x3b,%eax
	pop    %rbp
	ret    

<term_from_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shl    $0x4,%rax
	or     $0xf,%rax
	pop    %rbp
	ret    

<term_alloc_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x14(%rbp),%eax
	shl    $0x6,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_put_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_list_alloc>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	leave  
	ret    

<term_list_init_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x1,%rax
	pop    %rbp
	ret    

<term_list_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x20(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_list_init_prepend>
	leave  
	ret    

<temp_stack_grow>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %eax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%eax
	add    %eax,%eax
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	add    %rdx,%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x28(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x14(%rbp),%edx
	mov    %edx,0x10(%rax)
	nop
	leave  
	ret    

<refc_binary_create_refc>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x20,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <refc_binary_create_refc+0x43>
	mov    $0x0,%eax
	jmp    <refc_binary_create_refc+0x6b>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_init>
	mov    -0x8(%rbp),%rax
	movq   $0x1,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<refc_binary_get_data>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x20,%rax
	pop    %rbp
	ret    

<refc_binary_increment_refcount>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rax
	lea    0x1(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x10(%rax)
	nop
	pop    %rbp
	ret    

<refc_binary_decrement_refcount>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rax
	lea    -0x1(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rax
	test   %rax,%rax
	jne    <refc_binary_decrement_refcount+0x50>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x1,%eax
	jmp    <refc_binary_decrement_refcount+0x55>
	mov    $0x0,%eax
	leave  
	ret    

<refc_binary_create_binary_info>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x38(%rbp)
	movq   $0x0,-0x28(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x20(%rax),%rax
	mov    %rax,-0x20(%rbp)
	jmp    <refc_binary_create_binary_info+0x3d>
	addq   $0x1,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	add    $0x20,%rax
	cmp    %rax,-0x20(%rbp)
	jne    <refc_binary_create_binary_info+0x2d>
	cmpq   $0x0,-0x28(%rbp)
	jne    <refc_binary_create_binary_info+0x68>
	mov    $0x0,%eax
	call   <term_nil>
	jmp    <refc_binary_create_binary_info+0x163>
	mov    -0x28(%rbp),%rax
	mov    %eax,%edx
	mov    %edx,%eax
	add    %eax,%eax
	add    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <refc_binary_create_binary_info+0x95>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <refc_binary_create_binary_info+0x163>
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x18(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x20(%rax),%rax
	mov    %rax,-0x20(%rbp)
	jmp    <refc_binary_create_binary_info+0x146>
	mov    -0x20(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x38(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_list_prepend>
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	add    $0x20,%rax
	cmp    %rax,-0x20(%rbp)
	jne    <refc_binary_create_binary_info+0xbb>
	mov    -0x18(%rbp),%rax
	leave  
	ret    

<list_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<list_remove>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x8(%rax)
	nop
	pop    %rbp
	ret    

<list_is_empty>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jne    <list_is_empty+0x2a>
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,-0x8(%rbp)
	jne    <list_is_empty+0x2a>
	mov    $0x1,%eax
	jmp    <list_is_empty+0x2f>
	mov    $0x0,%eax
	pop    %rbp
	ret    

<list_first>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	pop    %rbp
	ret    

<timer_wheel_insert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%eax
	movslq %eax,%rcx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	mov    %eax,-0xc(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0xc(%rax),%eax
	lea    0x1(%rax),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,0xc(%rax)
	mov    -0x20(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rcx
	mov    -0xc(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	add    %rcx,%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <list_append>
	nop
	leave  
	ret    

<timer_wheel_remove>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xc(%rax),%eax
	lea    -0x1(%rax),%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0xc(%rax)
	mov    -0x10(%rbp),%rax
	add    $0x8,%rax
	mov    %rax,%rdi
	call   <list_remove>
	nop
	leave  
	ret    

<timer_wheel_is_empty>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0xc(%rax),%eax
	test   %eax,%eax
	sete   %al
	pop    %rbp
	ret    

<timer_wheel_item_init>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	nop
	pop    %rbp
	ret    

<timer_wheel_expiry_to_monotonic>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rdx
	mov    -0xc(%rbp),%eax
	add    %rdx,%rax
	pop    %rbp
	ret    

<update_timer_wheel>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x90(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x98(%rax),%eax
	mov    %eax,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <timer_wheel_is_empty>
	test   %al,%al
	je     <update_timer_wheel+0x48>
	mov    $0x0,%eax
	call   <sys_stop_millis_timer>
	jmp    <update_timer_wheel+0xa8>
	mov    $0x0,%eax
	call   <sys_millis>
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    -0x10(%rbp),%eax
	jae    <update_timer_wheel+0x7b>
	mov    -0x10(%rbp),%eax
	mov    %eax,-0x18(%rbp)
	jmp    <update_timer_wheel+0x75>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <timer_wheel_tick>
	addl   $0x1,-0x18(%rbp)
	cmpl   $0xffffffff,-0x18(%rbp)
	jne    <update_timer_wheel+0x65>
	mov    -0x10(%rbp),%eax
	mov    %eax,-0x14(%rbp)
	jmp    <update_timer_wheel+0x93>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <timer_wheel_tick>
	addl   $0x1,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	cmp    -0xc(%rbp),%eax
	jb     <update_timer_wheel+0x83>
	mov    -0x28(%rbp),%rax
	mov    -0xc(%rbp),%edx
	mov    %edx,0x98(%rax)
	leave  
	ret    

<scheduler_wait>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_make_waiting>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <scheduler_do_wait>
	leave  
	ret    

<scheduler_do_wait>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <update_timer_wheel>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <sys_consume_pending_events>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <scheduler_execute_native_handlers>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <update_timer_wheel>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <list_is_empty>
	test   %eax,%eax
	je     <scheduler_do_wait+0x5c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <sys_sleep>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <list_is_empty>
	test   %eax,%eax
	jne    <scheduler_do_wait+0x10>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <list_first>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <list_append>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<scheduler_execute_native_handler>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_make_waiting>
	mov    -0x10(%rbp),%rax
	mov    0x168(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   *%rdx
	nop
	leave  
	ret    

<scheduler_next>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    0x170(%rax),%rax
	lea    0x400(%rax),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,0x170(%rax)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <update_timer_wheel>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <sys_consume_pending_events>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <scheduler_next+0xc1>
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x168(%rax),%rax
	test   %rax,%rax
	je     <scheduler_next+0x8e>
	mov    -0x8(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_execute_native_handler>
	jmp    <scheduler_next+0xae>
	mov    -0x8(%rbp),%rax
	mov    0x168(%rax),%rax
	test   %rax,%rax
	jne    <scheduler_next+0xae>
	mov    -0x8(%rbp),%rax
	cmp    -0x30(%rbp),%rax
	je     <scheduler_next+0xae>
	mov    -0x8(%rbp),%rax
	jmp    <scheduler_next+0xcf>
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	cmp    %rax,-0x18(%rbp)
	jne    <scheduler_next+0x61>
	mov    -0x30(%rbp),%rax
	leave  
	ret    

<scheduler_make_ready>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <list_append>
	nop
	leave  
	ret    

<scheduler_make_waiting>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	add    $0x10,%rdx
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_append>
	nop
	leave  
	ret    

<scheduler_terminate>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x8(%rbp),%rax
	movzbl 0x178(%rax),%eax
	and    $0x1,%eax
	test   %al,%al
	jne    <scheduler_terminate+0x3a>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <context_destroy>
	nop
	leave  
	ret    

<scheduler_timeout_callback>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    $0x0,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <timer_wheel_item_init>
	mov    -0x18(%rbp),%rax
	sub    $0x28,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x194(%rax),%eax
	and    $0xfffffff9,%eax
	or     $0x4,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0x194(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_make_ready>
	nop
	leave  
	ret    

<scheduler_set_timeout>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x194(%rax),%eax
	or     $0x2,%eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	mov    %edx,0x194(%rax)
	mov    -0x20(%rbp),%rax
	mov    0x90(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <timer_wheel_is_empty>
	test   %al,%al
	je     <scheduler_set_timeout+0x64>
	mov    $0x0,%eax
	call   <sys_start_millis_timer>
	mov    -0x28(%rbp),%rax
	add    $0x28,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    0x18(%rax),%rax
	test   %rax,%rax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <scheduler_set_timeout+0x8b>
	call   <abort@plt>
	mov    -0x2c(%rbp),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <timer_wheel_expiry_to_monotonic>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	lea    -0x11a(%rip),%rcx        # <scheduler_timeout_callback>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <timer_wheel_item_init>
	mov    -0x10(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <timer_wheel_insert>
	nop
	leave  
	ret    

<scheduler_cancel_timeout>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x194(%rax),%eax
	and    $0xfffffff9,%eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	mov    %edx,0x194(%rax)
	mov    -0x18(%rbp),%rax
	mov    0x90(%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	add    $0x28,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x18(%rax),%rax
	test   %rax,%rax
	je     <scheduler_cancel_timeout+0x89>
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <timer_wheel_remove>
	mov    -0x8(%rbp),%rax
	mov    $0x0,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <timer_wheel_item_init>
	nop
	leave  
	ret    

<scheduler_execute_native_handlers>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <scheduler_execute_native_handlers+0x66>
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x168(%rax),%rax
	test   %rax,%rax
	je     <scheduler_execute_native_handlers+0x53>
	mov    -0x8(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_execute_native_handler>
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	cmp    %rax,-0x18(%rbp)
	jne    <scheduler_execute_native_handlers+0x28>
	nop
	nop
	leave  
	ret    

<schudule_processes_count>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	movl   $0x0,-0xc(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x30(%rax),%rax
	mov    %rax,-0x8(%rbp)
	jmp    <schudule_processes_count+0x30>
	addl   $0x1,-0xc(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	add    $0x30,%rax
	cmp    %rax,-0x8(%rbp)
	jne    <schudule_processes_count+0x21>
	mov    -0xc(%rbp),%eax
	pop    %rbp
	ret    

<list_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_atom>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0xb,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nonempty_list>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x1,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_get_size_from_boxed_header>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_boxed_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_is_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	jne    <term_is_binary+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    $0x28,%eax
	seta   %dl
	test   %dl,%dl
	jne    <term_is_binary+0x69>
	movabs $0x11100000000,%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	test   %al,%al
	je     <term_is_binary+0x69>
	mov    $0x1,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_refc_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_refc_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x20,-0xc(%rbp)
	sete   %al
	jmp    <term_is_refc_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_refc_binary_is_const>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	leave  
	ret    

<term_is_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_sub_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x28,-0xc(%rbp)
	sete   %al
	jmp    <term_is_sub_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_uint8>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffff00f,%rax
	cmp    $0xf,%rax
	sete   %al
	pop    %rbp
	ret    

<term_is_boxed_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_boxed_integer+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x8,%rax
	jne    <term_is_boxed_integer+0x43>
	mov    $0x1,%eax
	jmp    <term_is_boxed_integer+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_any_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <term_is_any_integer+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <term_is_any_integer+0x33>
	mov    $0x1,%eax
	jmp    <term_is_any_integer+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_pid>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0x3,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_reference>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_reference+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x10,%rax
	jne    <term_is_reference+0x43>
	mov    $0x1,%eax
	jmp    <term_is_reference+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_function>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_function+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x14,%rax
	jne    <term_is_function+0x43>
	mov    $0x1,%eax
	jmp    <term_is_function+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x3b,%eax
	pop    %rbp
	ret    

<term_to_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_to_uint8>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x4,%ax
	pop    %rbp
	ret    

<term_to_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%rax
	pop    %rbp
	ret    

<term_to_local_process_id>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x4,%rax
	pop    %rbp
	ret    

<term_unbox_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_unbox_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_maybe_unbox_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_maybe_unbox_int64+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	cmp    $0x1,%eax
	jne    <term_maybe_unbox_int64+0x3b>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	jmp    <term_maybe_unbox_int64+0x55>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int64>
	jmp    <term_maybe_unbox_int64+0x55>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	leave  
	ret    

<term_binary_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_binary_data+0x5e>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	test   %al,%al
	je     <term_binary_data+0x49>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <refc_binary_get_data>
	jmp    <term_binary_data+0x9c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	je     <term_binary_data+0x94>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	add    %rdx,%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	leave  
	ret    

<term_to_ref_ticks>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_arity>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_get_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffe,%rax
	pop    %rbp
	ret    

<term_get_list_head>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	leave  
	ret    

<term_get_list_tail>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_list_init_prepend>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x1,%rax
	pop    %rbp
	ret    

<term_is_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_float+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x18,%rax
	sete   %al
	movzbl %al,%eax
	jmp    <term_is_float+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_to_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	add    $0x8,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movsd  (%rax),%xmm0
	movq   %xmm0,%rax
	movq   %rax,%xmm0
	leave  
	ret    

<term_conv_to_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <term_conv_to_float+0x38>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	pxor   %xmm1,%xmm1
	cvtsi2sd %rax,%xmm1
	movq   %xmm1,%rax
	jmp    <term_conv_to_float+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_float>
	movq   %xmm0,%rax
	movq   %rax,%xmm0
	leave  
	ret    

<term_is_number>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	jne    <term_is_number+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <term_is_number+0x33>
	mov    $0x1,%eax
	jmp    <term_is_number+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_match_state>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_match_state+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x4,%rax
	jne    <term_is_match_state+0x43>
	mov    $0x1,%eax
	jmp    <term_is_match_state+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_match_state_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_is_map>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_map+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x3c,%rax
	jne    <term_is_map+0x43>
	mov    $0x1,%eax
	jmp    <term_is_map+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_map_keys_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	pop    %rbp
	ret    

<term_get_map_value_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	pop    %rbp
	ret    

<term_get_map_keys>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_map_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	leave  
	ret    

<term_get_map_key>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x10,%rsp
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %eax,%ebx
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %ebx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_map_value>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x20(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_sub_binary_ref>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	leave  
	ret    

<atom_string_len>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	pop    %rbp
	ret    

<atom_string_data>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x1,%rax
	pop    %rbp
	ret    

<temp_stack_init>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movl   $0x8,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	nop
	leave  
	ret    

<temp_stack_destory>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	add    %rdx,%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<temp_stack_grow>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %eax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%eax
	add    %eax,%eax
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	add    %rdx,%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x28(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x14(%rbp),%edx
	mov    %edx,0x10(%rax)
	nop
	leave  
	ret    

<temp_stack_is_empty>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,%rdx
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<temp_stack_push>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	sub    $0x1,%eax
	cltq   
	cmp    %rax,%rdx
	jne    <temp_stack_push+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_grow>
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	lea    -0x8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	leave  
	ret    

<temp_stack_pop>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	pop    %rbp
	ret    

<term_display>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xc8,%rsp
	mov    %rdi,-0xb8(%rbp)
	mov    %rsi,-0xc0(%rbp)
	mov    %rdx,-0xc8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <term_display+0xc5>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0x74(%rbp)
	mov    -0x74(%rbp),%eax
	movslq %eax,%rcx
	mov    -0xc8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,%rbx
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,%edx
	mov    -0xb8(%rbp),%rax
	mov    %rbx,%rcx
	lea    0x14710(%rip),%rsi        # <empty_tuple+0x8>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <term_display+0x112>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	lea    0x146cb(%rip),%rcx        # <empty_tuple+0xd>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_display+0x14d>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rcx
	mov    $0x2,%edx
	mov    $0x1,%esi
	lea    0x1468c(%rip),%rax        # <empty_tuple+0x11>
	mov    %rax,%rdi
	call   <fwrite@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <term_display+0x3b5>
	movl   $0x1,-0xa8(%rbp)
	mov    -0xc0(%rbp),%rax
	mov    %rax,-0x70(%rbp)
	jmp    <term_display+0x1f2>
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x30(%rbp)
	cmpl   $0x0,-0xa8(%rbp)
	je     <term_display+0x1d7>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_uint8>
	test   %al,%al
	je     <term_display+0x1d7>
	call   <__ctype_b_loc@plt>
	mov    (%rax),%rbx
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_uint8>
	movzbl %al,%eax
	add    %rax,%rax
	add    %rbx,%rax
	movzwl (%rax),%eax
	movzwl %ax,%eax
	and    $0x4000,%eax
	test   %eax,%eax
	je     <term_display+0x1d7>
	mov    $0x1,%eax
	jmp    <term_display+0x1dc>
	mov    $0x0,%eax
	mov    %eax,-0xa8(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x70(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_display+0x17b>
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	jne    <term_display+0x220>
	movl   $0x0,-0xa8(%rbp)
	cmpl   $0x0,-0xa8(%rbp)
	je     <term_display+0x2b8>
	lea    -0xac(%rbp),%rdx
	mov    -0xc0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_list_to_string>
	mov    %rax,-0x38(%rbp)
	mov    -0xac(%rbp),%eax
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <term_display+0x290>
	mov    -0x38(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	lea    0x14560(%rip),%rcx        # <empty_tuple+0x14>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	jmp    <term_display+0x956>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rcx
	mov    $0x3,%edx
	mov    $0x1,%esi
	lea    0x14529(%rip),%rax        # <empty_tuple+0x19>
	mov    %rax,%rdi
	call   <fwrite@plt>
	jmp    <term_display+0x956>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x5b,%edi
	call   <fputc@plt>
	movl   $0x0,-0xa4(%rbp)
	jmp    <term_display+0x342>
	cmpl   $0x0,-0xa4(%rbp)
	je     <term_display+0x2f7>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2c,%edi
	call   <fputc@plt>
	jmp    <term_display+0x301>
	movl   $0x1,-0xa4(%rbp)
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,%rcx
	mov    -0xc8(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0xc0(%rbp)
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_display+0x2d8>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	jne    <term_display+0x39c>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x7c,%edi
	call   <fputc@plt>
	mov    -0xc8(%rbp),%rdx
	mov    -0xc0(%rbp),%rcx
	mov    -0xb8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x5d,%edi
	call   <fputc@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <term_display+0x3fc>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_local_process_id>
	mov    %eax,%edx
	mov    -0xb8(%rbp),%rax
	lea    0x143f1(%rip),%rcx        # <empty_tuple+0x1d>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_function>
	test   %eax,%eax
	je     <term_display+0x46e>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0x50(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	mov    %eax,-0x78(%rbp)
	lea    0x1439b(%rip),%rax        # <empty_tuple+0x26>
	mov    %rax,-0x40(%rbp)
	mov    -0x48(%rbp),%rcx
	mov    -0x78(%rbp),%edx
	mov    -0x40(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <term_display+0x532>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x7b,%edi
	call   <fputc@plt>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x7c(%rbp)
	movl   $0x0,-0xa0(%rbp)
	jmp    <term_display+0x50e>
	cmpl   $0x0,-0xa0(%rbp)
	je     <term_display+0x4d4>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2c,%edi
	call   <fputc@plt>
	mov    -0xa0(%rbp),%edx
	mov    -0xc0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rcx
	mov    -0xc8(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	addl   $0x1,-0xa0(%rbp)
	mov    -0xa0(%rbp),%eax
	cmp    -0x7c(%rbp),%eax
	jl     <term_display+0x4b7>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x7d,%edi
	call   <fputc@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <term_display+0x66a>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rcx
	mov    $0x2,%edx
	mov    $0x1,%esi
	lea    0x14295(%rip),%rax        # <empty_tuple+0x3e>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	mov    %eax,-0x80(%rbp)
	movl   $0x0,-0x9c(%rbp)
	jmp    <term_display+0x642>
	cmpl   $0x0,-0x9c(%rbp)
	je     <term_display+0x5aa>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2c,%edi
	call   <fputc@plt>
	mov    -0x9c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,%rcx
	mov    -0xc8(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rcx
	mov    $0x2,%edx
	mov    $0x1,%esi
	lea    0x14200(%rip),%rax        # <empty_tuple+0x41>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x9c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,%rcx
	mov    -0xc8(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	addl   $0x1,-0x9c(%rbp)
	mov    -0x9c(%rbp),%eax
	cmp    -0x80(%rbp),%eax
	jl     <term_display+0x58d>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x7d,%edi
	call   <fputc@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <term_display+0x824>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x84(%rbp)
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x58(%rbp)
	movl   $0x1,-0x98(%rbp)
	movl   $0x0,-0x94(%rbp)
	jmp    <term_display+0x706>
	call   <__ctype_b_loc@plt>
	mov    (%rax),%rdx
	mov    -0x94(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x58(%rbp),%rax
	add    %rcx,%rax
	movzbl (%rax),%eax
	movsbq %al,%rax
	add    %rax,%rax
	add    %rdx,%rax
	movzwl (%rax),%eax
	movzwl %ax,%eax
	and    $0x4000,%eax
	test   %eax,%eax
	jne    <term_display+0x6ff>
	movl   $0x0,-0x98(%rbp)
	jmp    <term_display+0x714>
	addl   $0x1,-0x94(%rbp)
	mov    -0x94(%rbp),%eax
	cmp    -0x84(%rbp),%eax
	jl     <term_display+0x6bf>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rcx
	mov    $0x2,%edx
	mov    $0x1,%esi
	lea    0x140d0(%rip),%rax        # <empty_tuple+0x44>
	mov    %rax,%rdi
	call   <fwrite@plt>
	cmpl   $0x0,-0x98(%rbp)
	je     <term_display+0x76a>
	mov    -0x58(%rbp),%rcx
	mov    -0x84(%rbp),%edx
	mov    -0xb8(%rbp),%rax
	lea    0x140aa(%rip),%rsi        # <empty_tuple+0x47>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <term_display+0x7fc>
	movl   $0x0,-0x90(%rbp)
	movl   $0x0,-0x8c(%rbp)
	jmp    <term_display+0x7ee>
	cmpl   $0x0,-0x90(%rbp)
	je     <term_display+0x79f>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2c,%edi
	call   <fputc@plt>
	jmp    <term_display+0x7a9>
	movl   $0x1,-0x90(%rbp)
	mov    -0x8c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x58(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	mov    %al,-0xad(%rbp)
	movzbl -0xad(%rbp),%edx
	mov    -0xb8(%rbp),%rax
	lea    0x14032(%rip),%rcx        # <empty_tuple+0x4e>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	addl   $0x1,-0x8c(%rbp)
	mov    -0x8c(%rbp),%eax
	cmp    -0x84(%rbp),%eax
	jl     <term_display+0x780>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rcx
	mov    $0x2,%edx
	mov    $0x1,%esi
	lea    0x13ff5(%rip),%rax        # <empty_tuple+0x51>
	mov    %rax,%rdi
	call   <fwrite@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	je     <term_display+0x874>
	lea    0x13fd1(%rip),%rax        # <empty_tuple+0x54>
	mov    %rax,-0x60(%rbp)
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_ref_ticks>
	mov    %rax,%rdx
	mov    -0x60(%rbp),%rcx
	mov    -0xb8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <term_display+0x8dd>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	mov    %eax,-0x88(%rbp)
	cmpl   $0x1,-0x88(%rbp)
	jne    <term_display+0x8d8>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	mov    %rax,%rdx
	mov    -0xb8(%rbp),%rax
	lea    0x13f03(%rip),%rcx        # <empty_tuple+0xd>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	nop
	jmp    <term_display+0x956>
	call   <abort@plt>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <term_display+0x931>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x68(%rbp)
	mov    -0x68(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	movq   %rdx,%xmm0
	lea    0x13f00(%rip),%rdx        # <empty_tuple+0x64>
	mov    %rdx,%rsi
	mov    %rax,%rdi
	mov    $0x1,%eax
	call   <fprintf@plt>
	jmp    <term_display+0x956>
	mov    -0xc0(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	lea    0x13edd(%rip),%rcx        # <empty_tuple+0x68>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	nop
	mov    -0x18(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <term_display+0x96b>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_type_to_index>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <term_type_to_index+0x2a>
	mov    $0x0,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_number>
	test   %eax,%eax
	je     <term_type_to_index+0x44>
	mov    $0x1,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <term_type_to_index+0x5e>
	mov    $0x2,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	je     <term_type_to_index+0x78>
	mov    $0x3,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_function>
	test   %eax,%eax
	je     <term_type_to_index+0x92>
	mov    $0x4,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <term_type_to_index+0xa9>
	mov    $0x6,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <term_type_to_index+0xc0>
	mov    $0x7,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_type_to_index+0xd7>
	mov    $0x8,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <term_type_to_index+0xee>
	mov    $0x9,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <term_type_to_index+0x105>
	mov    $0xa,%eax
	jmp    <term_type_to_index+0x121>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <term_type_to_index+0x11c>
	mov    $0xb,%eax
	jmp    <term_type_to_index+0x121>
	call   <abort@plt>
	leave  
	ret    

<term_compare>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x118,%rsp
	mov    %rdi,-0x108(%rbp)
	mov    %rsi,-0x110(%rbp)
	mov    %rdx,-0x118(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_init>
	mov    -0x108(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0x110(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	movl   $0x0,-0xf4(%rbp)
	jmp    <term_compare+0xae0>
	mov    -0x108(%rbp),%rax
	cmp    -0x110(%rbp),%rax
	jne    <term_compare+0xb6>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x110(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x108(%rbp)
	jmp    <term_compare+0xae0>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <term_compare+0x12f>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <term_compare+0x12f>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0xa0(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x98(%rbp)
	mov    -0xa0(%rbp),%rax
	cmp    -0x98(%rbp),%rax
	jle    <term_compare+0x11f>
	mov    $0x1,%eax
	jmp    <term_compare+0x124>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	je     <term_compare+0x1eb>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	je     <term_compare+0x1eb>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_ref_ticks>
	mov    %rax,-0x90(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_ref_ticks>
	mov    %rax,-0x88(%rbp)
	mov    -0x90(%rbp),%rax
	cmp    -0x88(%rbp),%rax
	jne    <term_compare+0x1c4>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x110(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x108(%rbp)
	jmp    <term_compare+0xae0>
	mov    -0x90(%rbp),%rax
	cmp    -0x88(%rbp),%rax
	jle    <term_compare+0x1db>
	mov    $0x1,%eax
	jmp    <term_compare+0x1e0>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <term_compare+0x2ea>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <term_compare+0x2ea>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0xb0(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0xa8(%rbp)
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_compare+0x269>
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    %rax,-0xb0(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_compare+0x28d>
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    %rax,-0xa8(%rbp)
	mov    -0xb0(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0xa8(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x108(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x110(%rbp)
	jmp    <term_compare+0xae0>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <term_compare+0x45b>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <term_compare+0x45b>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0xe8(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0xe4(%rbp)
	mov    -0xe8(%rbp),%eax
	cmp    -0xe4(%rbp),%eax
	je     <term_compare+0x375>
	mov    -0xe8(%rbp),%eax
	cmp    -0xe4(%rbp),%eax
	jle    <term_compare+0x365>
	mov    $0x1,%eax
	jmp    <term_compare+0x36a>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	cmpl   $0x0,-0xe8(%rbp)
	jle    <term_compare+0x430>
	movl   $0x1,-0xf0(%rbp)
	jmp    <term_compare+0x3e7>
	mov    -0xf0(%rbp),%edx
	mov    -0x108(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0xf0(%rbp),%edx
	mov    -0x110(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	addl   $0x1,-0xf0(%rbp)
	mov    -0xf0(%rbp),%eax
	cmp    -0xe8(%rbp),%eax
	jl     <term_compare+0x38e>
	mov    -0x108(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x108(%rbp)
	mov    -0x110(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x110(%rbp)
	jmp    <term_compare+0xae0>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x110(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x108(%rbp)
	jmp    <term_compare+0xae0>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <term_compare+0x599>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <term_compare+0x599>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0xe0(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0xdc(%rbp)
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x80(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x78(%rbp)
	mov    -0xe0(%rbp),%edx
	mov    -0xdc(%rbp),%eax
	cmp    %eax,%edx
	cmovle %edx,%eax
	mov    %eax,-0xd8(%rbp)
	mov    -0xd8(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x78(%rbp),%rcx
	mov    -0x80(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	mov    %eax,-0xd4(%rbp)
	cmpl   $0x0,-0xd4(%rbp)
	jne    <term_compare+0x579>
	mov    -0xe0(%rbp),%eax
	cmp    -0xdc(%rbp),%eax
	jne    <term_compare+0x554>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x110(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x108(%rbp)
	jmp    <term_compare+0xae0>
	mov    -0xe0(%rbp),%eax
	cmp    -0xdc(%rbp),%eax
	jle    <term_compare+0x569>
	mov    $0x1,%eax
	jmp    <term_compare+0x56e>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	cmpl   $0x0,-0xd4(%rbp)
	jle    <term_compare+0x589>
	mov    $0x1,%eax
	jmp    <term_compare+0x58e>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <term_compare+0x773>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <term_compare+0x773>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	mov    %eax,-0xd0(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	mov    %eax,-0xcc(%rbp)
	mov    -0xd0(%rbp),%eax
	cmp    -0xcc(%rbp),%eax
	je     <term_compare+0x624>
	mov    -0xd0(%rbp),%eax
	cmp    -0xcc(%rbp),%eax
	jle    <term_compare+0x614>
	mov    $0x1,%eax
	jmp    <term_compare+0x619>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	cmpl   $0x0,-0xd0(%rbp)
	jle    <term_compare+0x748>
	movl   $0x1,-0xec(%rbp)
	jmp    <term_compare+0x6fb>
	mov    -0xec(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x108(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0xec(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x110(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0xec(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x108(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0xec(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x110(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	addl   $0x1,-0xec(%rbp)
	mov    -0xec(%rbp),%eax
	cmp    -0xd0(%rbp),%eax
	jl     <term_compare+0x640>
	mov    -0x108(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,-0x108(%rbp)
	mov    -0x110(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,-0x110(%rbp)
	jmp    <term_compare+0xae0>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x110(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x108(%rbp)
	jmp    <term_compare+0xae0>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <term_compare+0x819>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <term_compare+0x819>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	mov    %rax,-0x70(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	mov    %rax,-0x68(%rbp)
	mov    -0x70(%rbp),%rax
	cmp    -0x68(%rbp),%rax
	jne    <term_compare+0x7f8>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x110(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x108(%rbp)
	jmp    <term_compare+0xae0>
	mov    -0x70(%rbp),%rax
	cmp    -0x68(%rbp),%rax
	jle    <term_compare+0x809>
	mov    $0x1,%eax
	jmp    <term_compare+0x80e>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_number>
	test   %eax,%eax
	je     <term_compare+0x8dd>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_number>
	test   %eax,%eax
	je     <term_compare+0x8dd>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x58(%rbp)
	movsd  -0x60(%rbp),%xmm0
	ucomisd -0x58(%rbp),%xmm0
	jp     <term_compare+0x8ba>
	movsd  -0x60(%rbp),%xmm0
	ucomisd -0x58(%rbp),%xmm0
	jne    <term_compare+0x8ba>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x110(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x108(%rbp)
	jmp    <term_compare+0xae0>
	movsd  -0x60(%rbp),%xmm0
	comisd -0x58(%rbp),%xmm0
	jbe    <term_compare+0x8cd>
	mov    $0x1,%eax
	jmp    <term_compare+0x8d2>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <term_compare+0xa5e>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <term_compare+0xa5e>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0xc8(%rbp)
	mov    -0xc8(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x118(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0xc4(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,-0x48(%rbp)
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0xc0(%rbp)
	mov    -0xc0(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x118(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    0x58(%rax),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <valueshashtable_get_value>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0xbc(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,-0x38(%rbp)
	mov    -0xc4(%rbp),%edx
	mov    -0xbc(%rbp),%eax
	cmp    %eax,%edx
	cmovle %edx,%eax
	mov    %eax,-0xb8(%rbp)
	mov    -0xb8(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x38(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcmp@plt>
	mov    %eax,-0xb4(%rbp)
	cmpl   $0x0,-0xb4(%rbp)
	jne    <term_compare+0xa3e>
	mov    -0xc4(%rbp),%eax
	cmp    -0xbc(%rbp),%eax
	jle    <term_compare+0xa2e>
	mov    $0x1,%eax
	jmp    <term_compare+0xa33>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	cmpl   $0x0,-0xb4(%rbp)
	jle    <term_compare+0xa4e>
	mov    $0x1,%eax
	jmp    <term_compare+0xa53>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <term_compare+0xaa8>
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <term_compare+0xaa8>
	mov    -0x108(%rbp),%rax
	cmp    -0x110(%rbp),%rax
	jbe    <term_compare+0xa9b>
	mov    $0x1,%eax
	jmp    <term_compare+0xaa0>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	mov    -0x108(%rbp),%rax
	mov    %rax,%rdi
	call   <term_type_to_index>
	mov    %eax,%ebx
	mov    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <term_type_to_index>
	cmp    %eax,%ebx
	jle    <term_compare+0xad3>
	mov    $0x1,%eax
	jmp    <term_compare+0xad8>
	mov    $0xffffffff,%eax
	mov    %eax,-0xf4(%rbp)
	jmp    <term_compare+0xaf4>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_is_empty>
	test   %eax,%eax
	je     <term_compare+0x7b>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_destory>
	mov    -0xf4(%rbp),%eax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <term_compare+0xb1a>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_alloc_refc_binary>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %edx,%eax
	mov    %al,-0x44(%rbp)
	mov    -0x38(%rbp),%rax
	mov    $0x6,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	movq   $0x160,(%rax)
	mov    -0x28(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rax,(%rdx)
	movzbl -0x44(%rbp),%eax
	mov    -0x28(%rbp),%rdx
	add    $0x10,%rdx
	movzbl %al,%eax
	mov    %rax,(%rdx)
	mov    -0x28(%rbp),%rax
	or     $0x2,%rax
	mov    %rax,-0x20(%rbp)
	cmpb   $0x0,-0x44(%rbp)
	je     <term_alloc_refc_binary+0xab>
	mov    -0x28(%rbp),%rax
	add    $0x18,%rax
	movq   $0x0,(%rax)
	mov    -0x28(%rbp),%rax
	lea    0x20(%rax),%rbx
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,(%rbx)
	mov    -0x28(%rbp),%rax
	lea    0x28(%rax),%rbx
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,(%rbx)
	jmp    <term_alloc_refc_binary+0x14c>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <refc_binary_create_refc>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <term_alloc_refc_binary+0xf2>
	mov    0x21525(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x40(%rbp),%rdx
	lea    0x131aa(%rip),%rcx        # <empty_tuple+0x80>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x28(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x38(%rbp),%rax
	mov    0x1c0(%rax),%rdx
	mov    -0x28(%rbp),%rax
	lea    0x20(%rax),%rcx
	mov    -0x20(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <term_list_init_prepend>
	mov    -0x38(%rbp),%rdx
	mov    %rax,0x1c0(%rdx)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	lea    0x20(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_append>
	mov    -0x20(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<find_binary>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	jmp    <find_binary+0x4c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	je     <find_binary+0x3c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_match_state_binary>
	mov    %rax,-0x8(%rbp)
	jmp    <find_binary+0x4c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_sub_binary_ref>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_match_state>
	test   %eax,%eax
	jne    <find_binary+0x1a>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	jne    <find_binary+0x1a>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<term_alloc_sub_binary>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <find_binary>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	movq   $0xe8,(%rax)
	mov    -0x10(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x10(%rbp),%rax
	lea    0x10(%rax),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x10(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x10(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<list_remove>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x8(%rbp),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x8(%rax)
	nop
	pop    %rbp
	ret    

<list_init>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<timer_wheel_new>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    $0x18,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	movl   $0x0,-0xc(%rbp)
	jmp    <timer_wheel_new+0x60>
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0xc(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	add    %rdx,%rax
	mov    %rax,%rdi
	call   <list_init>
	addl   $0x1,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    -0x14(%rbp),%eax
	jl     <timer_wheel_new+0x41>
	mov    -0x8(%rbp),%rax
	mov    -0x14(%rbp),%edx
	mov    %edx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	movl   $0x0,0xc(%rax)
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x10(%rax)
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<timer_wheel_tick>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x10(%rax),%rax
	lea    0x1(%rax),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,0x10(%rax)
	mov    -0x38(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    -0x38(%rbp),%rdx
	mov    0x8(%rdx),%edx
	movslq %edx,%rcx
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	mov    %eax,-0x24(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x24(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <timer_wheel_tick+0xd1>
	mov    -0x20(%rbp),%rax
	sub    $0x8,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	cmp    %rax,-0x10(%rbp)
	jb     <timer_wheel_tick+0xbe>
	mov    -0x38(%rbp),%rax
	mov    0xc(%rax),%eax
	lea    -0x1(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,0xc(%rax)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <list_remove>
	mov    -0x8(%rbp),%rax
	mov    0x18(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   *%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x24(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	add    %rdx,%rax
	cmp    %rax,-0x20(%rbp)
	jne    <timer_wheel_tick+0x77>
	nop
	nop
	leave  
	ret    

<valueshashtable_new>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0x10,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <valueshashtable_new+0x31>
	mov    $0x0,%eax
	jmp    <valueshashtable_new+0x8d>
	mov    $0x8,%esi
	mov    $0x8,%edi
	call   <calloc@plt>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <valueshashtable_new+0x74>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <valueshashtable_new+0x8d>
	mov    -0x8(%rbp),%rax
	movl   $0x0,0x4(%rax)
	mov    -0x8(%rbp),%rax
	movl   $0x8,(%rax)
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<valueshashtable_insert>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%eax
	movslq %eax,%rcx
	mov    -0x30(%rbp),%rax
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	je     <valueshashtable_insert+0x93>
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,-0x30(%rbp)
	jne    <valueshashtable_insert+0x79>
	mov    -0x18(%rbp),%rax
	mov    -0x38(%rbp),%rdx
	mov    %rdx,0x10(%rax)
	mov    $0x1,%eax
	jmp    <valueshashtable_insert+0x11f>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	test   %rax,%rax
	je     <valueshashtable_insert+0x92>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <valueshashtable_insert+0x55>
	nop
	mov    $0x18,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <valueshashtable_insert+0xb8>
	mov    $0x0,%eax
	jmp    <valueshashtable_insert+0x11f>
	mov    -0x8(%rbp),%rax
	movq   $0x0,(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x38(%rbp),%rdx
	mov    %rdx,0x10(%rax)
	cmpq   $0x0,-0x18(%rbp)
	je     <valueshashtable_insert+0xef>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	jmp    <valueshashtable_insert+0x109>
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x28(%rbp),%rax
	mov    0x4(%rax),%eax
	lea    0x1(%rax),%edx
	mov    -0x28(%rbp),%rax
	mov    %edx,0x4(%rax)
	mov    $0x1,%eax
	leave  
	ret    

<valueshashtable_get_value>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%eax
	movslq %eax,%rcx
	mov    -0x20(%rbp),%rax
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <valueshashtable_get_value+0x6f>
	mov    -0x10(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,-0x20(%rbp)
	jne    <valueshashtable_get_value+0x64>
	mov    -0x10(%rbp),%rax
	mov    0x10(%rax),%rax
	jmp    <valueshashtable_get_value+0x7a>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	jne    <valueshashtable_get_value+0x4c>
	mov    -0x28(%rbp),%rax
	pop    %rbp
	ret    

<valueshashtable_has_key>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%eax
	movslq %eax,%rcx
	mov    -0x20(%rbp),%rax
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	jmp    <valueshashtable_has_key+0x68>
	mov    -0x10(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,-0x20(%rbp)
	jne    <valueshashtable_has_key+0x5d>
	mov    $0x1,%eax
	jmp    <valueshashtable_has_key+0x74>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	jne    <valueshashtable_has_key+0x48>
	mov    $0x0,%eax
	pop    %rbp
	ret    

<atom_string_len>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	pop    %rbp
	ret    

<atom_string_data>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x1,%rax
	pop    %rbp
	ret    

<atom_string_to_c>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %edx,-0x24(%rbp)
	mov    -0x18(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    %eax,-0x4(%rbp)
	mov    -0x24(%rbp),%eax
	cmp    -0x4(%rbp),%eax
	jge    <atom_string_to_c+0x35>
	mov    -0x24(%rbp),%eax
	sub    $0x1,%eax
	mov    %eax,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	lea    0x1(%rax),%rcx
	mov    -0x20(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x4(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x20(%rbp),%rax
	add    %rdx,%rax
	movb   $0x0,(%rax)
	nop
	leave  
	ret    

<atom_are_equals>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    %eax,-0x8(%rbp)
	mov    -0x20(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    %eax,-0x4(%rbp)
	mov    -0x8(%rbp),%eax
	cmp    -0x4(%rbp),%eax
	je     <atom_are_equals+0x3d>
	mov    $0x0,%eax
	jmp    <atom_are_equals+0x6d>
	mov    -0x8(%rbp),%eax
	cltq   
	mov    -0x20(%rbp),%rdx
	lea    0x1(%rdx),%rsi
	mov    -0x18(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rax,%rdx
	mov    %rcx,%rdi
	call   <memcmp@plt>
	test   %eax,%eax
	jne    <atom_are_equals+0x68>
	mov    $0x1,%eax
	jmp    <atom_are_equals+0x6d>
	mov    $0x0,%eax
	leave  
	ret    

<atom_write_mfa>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %r8d,-0x44(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0x18(%rbp)
	mov    -0x18(%rbp),%ebx
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x18(%rbp),%edx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	movb   $0x3a,(%rax)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0x14(%rbp)
	cmpl   $0x9,-0x44(%rbp)
	setg   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <atom_write_mfa+0x9b>
	mov    -0x18(%rbp),%edx
	mov    -0x14(%rbp),%eax
	add    %edx,%eax
	add    $0x4,%eax
	mov    %eax,%eax
	cmp    %rax,-0x30(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <atom_write_mfa+0xc3>
	mov    0x20d9f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x20,%edx
	mov    $0x1,%esi
	lea    0x12a6b(%rip),%rax        # <empty_tuple+0xd0>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	mov    -0x14(%rbp),%ebx
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,%rcx
	mov    -0x18(%rbp),%eax
	lea    0x1(%rax),%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x18(%rbp),%edx
	mov    -0x14(%rbp),%eax
	add    %edx,%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	movb   $0x2f,(%rax)
	mov    -0x44(%rbp),%eax
	lea    0x30(%rax),%ecx
	mov    -0x18(%rbp),%edx
	mov    -0x14(%rbp),%eax
	add    %edx,%eax
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    %ecx,%edx
	mov    %dl,(%rax)
	mov    -0x18(%rbp),%edx
	mov    -0x14(%rbp),%eax
	add    %edx,%eax
	add    $0x3,%eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	movb   $0x0,(%rax)
	nop
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<atom_string_len>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	pop    %rbp
	ret    

<sdbm_hash>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	movq   $0x0,-0x8(%rbp)
	movl   $0x0,-0x10(%rbp)
	jmp    <sdbm_hash+0x5d>
	mov    -0x18(%rbp),%rax
	lea    0x1(%rax),%rdx
	mov    %rdx,-0x18(%rbp)
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x6,%rax
	add    %rax,%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x10,%rax
	add    %rdx,%rax
	sub    -0x8(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	addl   $0x1,-0x10(%rbp)
	mov    -0x10(%rbp),%eax
	cmp    -0x1c(%rbp),%eax
	jl     <sdbm_hash+0x20>
	mov    -0x8(%rbp),%rax
	pop    %rbp
	ret    

<atomshashtable_new>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0x10,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <atomshashtable_new+0x31>
	mov    $0x0,%eax
	jmp    <atomshashtable_new+0x8d>
	mov    $0x8,%esi
	mov    $0x8,%edi
	call   <calloc@plt>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <atomshashtable_new+0x74>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <atomshashtable_new+0x8d>
	mov    -0x8(%rbp),%rax
	movl   $0x0,0x4(%rax)
	mov    -0x8(%rbp),%rax
	movl   $0x8,(%rax)
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<atomshashtable_insert>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,-0x24(%rbp)
	mov    -0x24(%rbp),%edx
	mov    -0x40(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <sdbm_hash>
	mov    %rax,-0x18(%rbp)
	mov    -0x38(%rbp),%rax
	mov    (%rax),%eax
	movslq %eax,%rcx
	mov    -0x18(%rbp),%rax
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x20(%rbp)
	je     <atomshashtable_insert+0xc4>
	mov    -0x20(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <atom_are_equals>
	test   %eax,%eax
	je     <atomshashtable_insert+0xaa>
	mov    -0x20(%rbp),%rax
	mov    -0x48(%rbp),%rdx
	mov    %rdx,0x10(%rax)
	mov    $0x1,%eax
	jmp    <atomshashtable_insert+0x150>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	test   %rax,%rax
	je     <atomshashtable_insert+0xc3>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	jmp    <atomshashtable_insert+0x79>
	nop
	mov    $0x18,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <atomshashtable_insert+0xe9>
	mov    $0x0,%eax
	jmp    <atomshashtable_insert+0x150>
	mov    -0x8(%rbp),%rax
	movq   $0x0,(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x40(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x48(%rbp),%rdx
	mov    %rdx,0x10(%rax)
	cmpq   $0x0,-0x20(%rbp)
	je     <atomshashtable_insert+0x120>
	mov    -0x20(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	jmp    <atomshashtable_insert+0x13a>
	mov    -0x38(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x38(%rbp),%rax
	mov    0x4(%rax),%eax
	lea    0x1(%rax),%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,0x4(%rax)
	mov    $0x1,%eax
	leave  
	ret    

<atomshashtable_get_value>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <sdbm_hash>
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%eax
	movslq %eax,%rcx
	mov    -0x10(%rbp),%rax
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <atomshashtable_get_value+0xa0>
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <atom_are_equals>
	test   %eax,%eax
	je     <atomshashtable_get_value+0x95>
	mov    -0x18(%rbp),%rax
	mov    0x10(%rax),%rax
	jmp    <atomshashtable_get_value+0xab>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	jne    <atomshashtable_get_value+0x70>
	mov    -0x38(%rbp),%rax
	leave  
	ret    

<atomshashtable_has_key>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	mov    %eax,%edx
	mov    -0x30(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <sdbm_hash>
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%eax
	movslq %eax,%rcx
	mov    -0x10(%rbp),%rax
	mov    $0x0,%edx
	div    %rcx
	mov    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <atomshashtable_has_key+0x99>
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <atom_are_equals>
	test   %eax,%eax
	je     <atomshashtable_has_key+0x8e>
	mov    $0x1,%eax
	jmp    <atomshashtable_has_key+0xa5>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	jne    <atomshashtable_has_key+0x6c>
	mov    $0x0,%eax
	leave  
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_atom>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0xb,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nonempty_list>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x1,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_list>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_is_list+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_is_list+0x33>
	mov    $0x1,%eax
	jmp    <term_is_list+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_get_size_from_boxed_header>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_boxed_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_is_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	jne    <term_is_binary+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    $0x28,%eax
	seta   %dl
	test   %dl,%dl
	jne    <term_is_binary+0x69>
	movabs $0x11100000000,%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	test   %al,%al
	je     <term_is_binary+0x69>
	mov    $0x1,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_boxed_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_boxed_integer+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x8,%rax
	jne    <term_is_boxed_integer+0x43>
	mov    $0x1,%eax
	jmp    <term_is_boxed_integer+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_any_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <term_is_any_integer+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <term_is_any_integer+0x33>
	mov    $0x1,%eax
	jmp    <term_is_any_integer+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_pid>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0x3,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_reference>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_reference+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x10,%rax
	jne    <term_is_reference+0x43>
	mov    $0x1,%eax
	jmp    <term_is_reference+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<term_to_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%eax
	pop    %rbp
	ret    

<term_to_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%rax
	pop    %rbp
	ret    

<term_from_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_from_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shl    $0x4,%rax
	or     $0xf,%rax
	pop    %rbp
	ret    

<term_unbox_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_unbox_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_maybe_unbox_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <term_maybe_unbox_int+0x2a>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	jmp    <term_maybe_unbox_int+0x36>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	leave  
	ret    

<term_maybe_unbox_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_maybe_unbox_int64+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	cmp    $0x1,%eax
	jne    <term_maybe_unbox_int64+0x3b>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	jmp    <term_maybe_unbox_int64+0x55>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int64>
	jmp    <term_maybe_unbox_int64+0x55>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	leave  
	ret    

<term_put_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x48,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	pop    %rbp
	ret    

<term_make_boxed_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_put_int>
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_from_local_process_id>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0x3,%eax
	mov    %eax,%eax
	pop    %rbp
	ret    

<term_binary_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_alloc_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x14(%rbp),%eax
	shl    $0x6,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_put_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_arity>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_get_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffe,%rax
	pop    %rbp
	ret    

<term_get_list_head>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	leave  
	ret    

<term_get_list_tail>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_list_length>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	movl   $0x0,-0x4(%rbp)
	jmp    <term_list_length+0x2d>
	addl   $0x1,-0x4(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_list_length+0x19>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	mov    -0x20(%rbp),%rdx
	mov    %eax,(%rdx)
	mov    -0x4(%rbp),%eax
	leave  
	ret    

<term_equals>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jne    <term_equals+0x25>
	mov    $0x1,%eax
	jmp    <term_equals+0x44>
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	leave  
	ret    

<term_is_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_float+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x18,%rax
	sete   %al
	movzbl %al,%eax
	jmp    <term_is_float+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_from_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	movsd  %xmm0,-0x18(%rbp)
	mov    %rdi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	movq   $0x58,(%rax)
	mov    -0x10(%rbp),%rax
	add    $0x8,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movsd  -0x18(%rbp),%xmm0
	movsd  %xmm0,(%rax)
	mov    -0x10(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_to_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	add    $0x8,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movsd  (%rax),%xmm0
	movq   %xmm0,%rax
	movq   %rax,%xmm0
	leave  
	ret    

<term_conv_to_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <term_conv_to_float+0x38>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	pxor   %xmm1,%xmm1
	cvtsi2sd %rax,%xmm1
	movq   %xmm1,%rax
	jmp    <term_conv_to_float+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_float>
	movq   %xmm0,%rax
	movq   %rax,%xmm0
	leave  
	ret    

<term_is_map>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_map+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x3c,%rax
	jne    <term_is_map+0x43>
	mov    $0x1,%eax
	jmp    <term_is_map+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_map_keys_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	pop    %rbp
	ret    

<term_get_map_value_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	pop    %rbp
	ret    

<term_get_map_keys>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_map_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	leave  
	ret    

<term_get_map_value>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x20(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_find_map_pos>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x14(%rbp)
	movl   $0x0,-0x18(%rbp)
	jmp    <term_find_map_pos+0x75>
	mov    -0x18(%rbp),%edx
	mov    -0x10(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x38(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	je     <term_find_map_pos+0x71>
	mov    -0x18(%rbp),%eax
	jmp    <term_find_map_pos+0x82>
	addl   $0x1,-0x18(%rbp)
	mov    -0x18(%rbp),%eax
	cmp    -0x14(%rbp),%eax
	jl     <term_find_map_pos+0x3c>
	mov    $0xffffffff,%eax
	leave  
	ret    

<hash>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	mov    %rdi,%rax
	mov    %rsi,%rdx
	mov    %edx,%ebx
	cmp    $0xa,%ebx
	je     <hash+0x3e>
	cmp    $0xa,%ebx
	ja     <hash+0x21>
	cmp    $0x8,%ebx
	je     <hash+0x78>
	cmp    $0x9,%ebx
	je     <hash+0x5b>
	lea    0xa(%rax),%rdx
	movzbl (%rdx),%edx
	movzbl %dl,%edx
	movslq %edx,%rdx
	lea    0x11fc8(%rip),%rcx        # <asso_values.0>
	movzbl (%rdx,%rcx,1),%edx
	movzbl %dl,%edx
	add    %edx,%ebx
	lea    0x9(%rax),%rdx
	movzbl (%rdx),%edx
	movzbl %dl,%edx
	movslq %edx,%rdx
	lea    0x11fab(%rip),%rcx        # <asso_values.0>
	movzbl (%rdx,%rcx,1),%edx
	movzbl %dl,%edx
	add    %edx,%ebx
	lea    0x8(%rax),%rdx
	movzbl (%rdx),%edx
	movzbl %dl,%edx
	movslq %edx,%rdx
	lea    0x11f8e(%rip),%rcx        # <asso_values.0>
	movzbl (%rdx,%rcx,1),%edx
	movzbl %dl,%edx
	add    %edx,%ebx
	add    $0x7,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	cltq   
	lea    0x11f72(%rip),%rdx        # <asso_values.0>
	movzbl (%rax,%rdx,1),%eax
	movzbl %al,%eax
	add    %eax,%ebx
	nop
	mov    %ebx,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<in_word_set>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %r13
	push   %r12
	push   %rbx
	sub    $0x8,%rsp
	mov    %rdi,%rbx
	mov    %rsi,%rax
	cmp    $0x15,%rax
	ja     <in_word_set+0x97>
	cmp    $0x9,%rax
	jbe    <in_word_set+0x97>
	mov    %rax,%rsi
	mov    %rbx,%rdi
	call   <hash>
	mov    %eax,%r12d
	cmp    $0x8c,%r12d
	ja     <in_word_set+0x97>
	mov    %r12d,%edx
	mov    %rdx,%rax
	add    %rax,%rax
	add    %rdx,%rax
	shl    $0x3,%rax
	mov    %rax,%rdx
	lea    0x1e98c(%rip),%rax        # <wordlist.1>
	mov    (%rdx,%rax,1),%r13
	movzbl (%rbx),%edx
	movzbl 0x0(%r13),%eax
	cmp    %al,%dl
	jne    <in_word_set+0x97>
	lea    0x1(%r13),%rdx
	lea    0x1(%rbx),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <in_word_set+0x97>
	mov    %r12d,%edx
	mov    %rdx,%rax
	add    %rax,%rax
	add    %rdx,%rax
	shl    $0x3,%rax
	lea    0x1e94e(%rip),%rdx        # <wordlist.1>
	add    %rdx,%rax
	jmp    <in_word_set+0x9c>
	mov    $0x0,%eax
	add    $0x8,%rsp
	pop    %rbx
	pop    %r12
	pop    %r13
	pop    %rbp
	ret    

<bif_registry_get_handler>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x140,%rsp
	mov    %rdi,-0x128(%rbp)
	mov    %rsi,-0x130(%rbp)
	mov    %edx,-0x134(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x134(%rbp),%esi
	mov    -0x130(%rbp),%rcx
	mov    -0x128(%rbp),%rdx
	lea    -0x110(%rbp),%rax
	mov    %esi,%r8d
	mov    $0x104,%esi
	mov    %rax,%rdi
	call   <atom_write_mfa>
	lea    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %rax,%rdx
	lea    -0x110(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <in_word_set>
	mov    %rax,-0x118(%rbp)
	cmpq   $0x0,-0x118(%rbp)
	jne    <bif_registry_get_handler+0x99>
	mov    $0x0,%eax
	jmp    <bif_registry_get_handler+0xa4>
	mov    -0x118(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <bif_registry_get_handler+0xb8>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<bif_registry_is_gc_bif>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x140,%rsp
	mov    %rdi,-0x128(%rbp)
	mov    %rsi,-0x130(%rbp)
	mov    %edx,-0x134(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x134(%rbp),%esi
	mov    -0x130(%rbp),%rcx
	mov    -0x128(%rbp),%rdx
	lea    -0x110(%rbp),%rax
	mov    %esi,%r8d
	mov    $0x104,%esi
	mov    %rax,%rdi
	call   <atom_write_mfa>
	lea    -0x110(%rbp),%rax
	mov    %rax,%rdi
	call   <strlen@plt>
	mov    %rax,%rdx
	lea    -0x110(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <in_word_set>
	mov    %rax,-0x118(%rbp)
	cmpq   $0x0,-0x118(%rbp)
	jne    <bif_registry_is_gc_bif+0x99>
	mov    $0x0,%eax
	jmp    <bif_registry_is_gc_bif+0xa7>
	mov    -0x118(%rbp),%rax
	movzbl 0x10(%rax),%eax
	and    $0x1,%eax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <bif_registry_is_gc_bif+0xbb>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<bif_erlang_self_0>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	leave  
	ret    

<bif_erlang_byte_size_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_byte_size_1+0x60>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_byte_size_1+0x73>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,%edi
	call   <term_from_int32>
	leave  
	ret    

<bif_erlang_bit_size_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_bit_size_1+0x60>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_bit_size_1+0x76>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	shl    $0x3,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	leave  
	ret    

<bif_erlang_is_atom_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <bif_erlang_is_atom_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_atom_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_binary_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <bif_erlang_is_binary_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_binary_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_integer_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <bif_erlang_is_integer_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_integer_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_list_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <bif_erlang_is_list_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_list_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_number_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <bif_erlang_is_number_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_number_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_pid_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	je     <bif_erlang_is_pid_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_pid_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_reference_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_reference>
	test   %eax,%eax
	je     <bif_erlang_is_reference_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_reference_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_tuple_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <bif_erlang_is_tuple_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_tuple_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_map_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <bif_erlang_is_map_1+0x2b>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_map_1+0x30>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_is_map_key_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_is_map_key_2+0xf1>
	mov    -0x18(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_is_map_key_2+0x86>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_is_map_key_2+0x119>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0xd0b,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x8(%rbp),%rax
	mov    $0x90b,%edx
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_is_map_key_2+0x119>
	mov    -0x20(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_find_map_pos>
	cmp    $0xffffffff,%eax
	je     <bif_erlang_is_map_key_2+0x114>
	mov    $0x4b,%eax
	jmp    <bif_erlang_is_map_key_2+0x119>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_length_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_length_1+0x6f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_length_1+0xd4>
	lea    -0x14(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_list_length>
	cltq   
	mov    %rax,-0x10(%rbp)
	mov    -0x14(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_length_1+0xc8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_length_1+0xd4>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <bif_erlang_length_1+0xe8>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<bif_erlang_hd_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_hd_1+0x5d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_hd_1+0x69>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	leave  
	ret    

<bif_erlang_tl_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_tl_1+0x5d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_tl_1+0x69>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	leave  
	ret    

<bif_erlang_element_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_element_2+0x64>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_element_2+0x12a>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_element_2+0xad>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_element_2+0x12a>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int32>
	sub    $0x1,%eax
	mov    %eax,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	not    %eax
	shr    $0x1f,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_element_2+0xfc>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    %eax,-0x4(%rbp)
	setl   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_element_2+0xfc>
	mov    -0x4(%rbp),%edx
	mov    -0x28(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	jmp    <bif_erlang_element_2+0x12a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_tuple_size_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_tuple_size_1+0x5d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_tuple_size_1+0x70>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,%edi
	call   <term_from_int32>
	leave  
	ret    

<bif_erlang_map_size_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <bif_erlang_map_size_1+0xed>
	mov    -0x18(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_map_size_1+0x82>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_map_size_1+0x100>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0xd0b,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x8(%rbp),%rax
	mov    $0x90b,%edx
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_map_size_1+0x100>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	mov    %eax,%edi
	call   <term_from_int32>
	leave  
	ret    

<bif_erlang_map_get_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <bif_erlang_map_get_2+0xf4>
	mov    -0x28(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_map_get_2+0x86>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_map_get_2+0x1e9>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0xd0b,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x8(%rbp),%rax
	mov    $0x90b,%edx
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_map_get_2+0x1e9>
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_find_map_pos>
	mov    %eax,-0x14(%rbp)
	cmpl   $0xffffffff,-0x14(%rbp)
	jne    <bif_erlang_map_get_2+0x1d4>
	mov    -0x28(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_map_get_2+0x169>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_map_get_2+0x1e9>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x2,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    $0xd4b,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x10(%rbp),%rax
	mov    $0x90b,%edx
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x28(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_map_get_2+0x1e9>
	mov    -0x14(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	leave  
	ret    

<make_boxed_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <make_boxed_int+0x5e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <make_boxed_int+0x71>
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_make_boxed_int>
	leave  
	ret    

<make_maybe_boxed_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	movabs $0xf800000000000000,%rax
	cmp    %rax,-0x10(%rbp)
	jl     <make_maybe_boxed_int+0x30>
	movabs $0x7ffffffffffffff,%rax
	cmp    %rax,-0x10(%rbp)
	jle    <make_maybe_boxed_int+0x45>
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	jmp    <make_maybe_boxed_int+0x51>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	leave  
	ret    

<add_overflow_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	leave  
	ret    

<add_boxed_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movl   $0x0,-0x40(%rbp)
	movl   $0x0,-0x3c(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <add_boxed_helper+0x56>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	mov    %eax,-0x3c(%rbp)
	jmp    <add_boxed_helper+0xb2>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <add_boxed_helper+0x6f>
	movl   $0x1,-0x40(%rbp)
	jmp    <add_boxed_helper+0xb2>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <add_boxed_helper+0xb2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <add_boxed_helper+0x306>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <add_boxed_helper+0xd3>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	or     %eax,-0x3c(%rbp)
	jmp    <add_boxed_helper+0x12f>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <add_boxed_helper+0xec>
	movl   $0x1,-0x40(%rbp)
	jmp    <add_boxed_helper+0x12f>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <add_boxed_helper+0x12f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <add_boxed_helper+0x306>
	cmpl   $0x0,-0x40(%rbp)
	je     <add_boxed_helper+0x238>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x18(%rbp)
	movsd  -0x20(%rbp),%xmm0
	addsd  -0x18(%rbp),%xmm0
	movsd  %xmm0,-0x10(%rbp)
	movsd  -0x10(%rbp),%xmm0
	movq   0x11174(%rip),%xmm1        # <asso_values.0+0x100>
	andpd  %xmm0,%xmm1
	movsd  0x11178(%rip),%xmm0        # <asso_values.0+0x110>
	ucomisd %xmm1,%xmm0
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <add_boxed_helper+0x1cd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <add_boxed_helper+0x306>
	mov    -0x48(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <add_boxed_helper+0x21e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <add_boxed_helper+0x306>
	mov    -0x48(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rdi
	movq   %rax,%xmm0
	call   <term_from_float>
	jmp    <add_boxed_helper+0x306>
	cmpl   $0x0,-0x3c(%rbp)
	je     <add_boxed_helper+0x249>
	cmpl   $0x1,-0x3c(%rbp)
	je     <add_boxed_helper+0x24e>
	jmp    <add_boxed_helper+0x2d8>
	call   <abort@plt>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x28(%rbp)
	mov    $0x0,%ecx
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	jno    <add_boxed_helper+0x285>
	mov    $0x1,%ecx
	mov    %rax,-0x38(%rbp)
	mov    %rcx,%rax
	and    $0x1,%eax
	test   %al,%al
	je     <add_boxed_helper+0x2c3>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <add_boxed_helper+0x306>
	mov    -0x38(%rbp),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <add_boxed_helper+0x306>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <add_boxed_helper+0x31a>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<bif_erlang_add_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_add_2+0xb2>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_add_2+0xb2>
	mov    -0x28(%rbp),%rax
	and    $0xfffffffffffffff0,%rax
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	and    $0xfffffffffffffff0,%rax
	mov    $0x0,%ecx
	add    %rdx,%rax
	jno    <bif_erlang_add_2+0x7e>
	mov    $0x1,%ecx
	mov    %rax,-0x10(%rbp)
	mov    %rcx,%rax
	and    $0x1,%eax
	xor    $0x1,%eax
	test   %al,%al
	je     <bif_erlang_add_2+0x99>
	mov    -0x10(%rbp),%rax
	or     $0xf,%rax
	jmp    <bif_erlang_add_2+0xc9>
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <add_overflow_helper>
	jmp    <bif_erlang_add_2+0xc9>
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <add_boxed_helper>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <bif_erlang_add_2+0xdd>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<sub_overflow_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	sub    -0x8(%rbp),%rax
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	leave  
	ret    

<sub_boxed_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movl   $0x0,-0x40(%rbp)
	movl   $0x0,-0x3c(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <sub_boxed_helper+0x56>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	mov    %eax,-0x3c(%rbp)
	jmp    <sub_boxed_helper+0xb2>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <sub_boxed_helper+0x6f>
	movl   $0x1,-0x40(%rbp)
	jmp    <sub_boxed_helper+0xb2>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <sub_boxed_helper+0xb2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <sub_boxed_helper+0x303>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <sub_boxed_helper+0xd3>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	or     %eax,-0x3c(%rbp)
	jmp    <sub_boxed_helper+0x12f>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <sub_boxed_helper+0xec>
	movl   $0x1,-0x40(%rbp)
	jmp    <sub_boxed_helper+0x12f>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <sub_boxed_helper+0x12f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <sub_boxed_helper+0x303>
	cmpl   $0x0,-0x40(%rbp)
	je     <sub_boxed_helper+0x238>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x18(%rbp)
	movsd  -0x20(%rbp),%xmm0
	subsd  -0x18(%rbp),%xmm0
	movsd  %xmm0,-0x10(%rbp)
	movsd  -0x10(%rbp),%xmm0
	movq   0x10d25(%rip),%xmm1        # <asso_values.0+0x100>
	andpd  %xmm0,%xmm1
	movsd  0x10d29(%rip),%xmm0        # <asso_values.0+0x110>
	ucomisd %xmm1,%xmm0
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sub_boxed_helper+0x1cd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <sub_boxed_helper+0x303>
	mov    -0x48(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sub_boxed_helper+0x21e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <sub_boxed_helper+0x303>
	mov    -0x48(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rdi
	movq   %rax,%xmm0
	call   <term_from_float>
	jmp    <sub_boxed_helper+0x303>
	cmpl   $0x0,-0x3c(%rbp)
	je     <sub_boxed_helper+0x249>
	cmpl   $0x1,-0x3c(%rbp)
	je     <sub_boxed_helper+0x24e>
	jmp    <sub_boxed_helper+0x2d5>
	call   <abort@plt>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x28(%rbp)
	mov    $0x0,%edx
	mov    -0x30(%rbp),%rax
	sub    -0x28(%rbp),%rax
	jno    <sub_boxed_helper+0x282>
	mov    $0x1,%edx
	mov    %rax,-0x38(%rbp)
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %al,%al
	je     <sub_boxed_helper+0x2c0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <sub_boxed_helper+0x303>
	mov    -0x38(%rbp),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <sub_boxed_helper+0x303>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <sub_boxed_helper+0x317>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<bif_erlang_sub_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_sub_2+0xaf>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_sub_2+0xaf>
	mov    -0x28(%rbp),%rax
	and    $0xfffffffffffffff0,%rax
	mov    -0x30(%rbp),%rdx
	and    $0xfffffffffffffff0,%rdx
	mov    $0x0,%ecx
	sub    %rdx,%rax
	jno    <bif_erlang_sub_2+0x7b>
	mov    $0x1,%ecx
	mov    %rax,-0x10(%rbp)
	mov    %rcx,%rax
	and    $0x1,%eax
	xor    $0x1,%eax
	test   %al,%al
	je     <bif_erlang_sub_2+0x96>
	mov    -0x10(%rbp),%rax
	or     $0xf,%rax
	jmp    <bif_erlang_sub_2+0xc6>
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <sub_overflow_helper>
	jmp    <bif_erlang_sub_2+0xc6>
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <sub_boxed_helper>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <bif_erlang_sub_2+0xda>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<mul_overflow_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x18(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x10(%rbp)
	mov    $0x0,%edx
	mov    -0x18(%rbp),%rax
	imul   -0x10(%rbp),%rax
	jno    <mul_overflow_helper+0x5c>
	mov    $0x1,%edx
	mov    %rax,-0x20(%rbp)
	mov    %rdx,%rax
	and    $0x1,%eax
	xor    $0x1,%eax
	test   %al,%al
	je     <mul_overflow_helper+0x82>
	mov    -0x20(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	jmp    <mul_overflow_helper+0xb0>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <mul_overflow_helper+0xc4>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<mul_boxed_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movl   $0x0,-0x40(%rbp)
	movl   $0x0,-0x3c(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <mul_boxed_helper+0x56>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	mov    %eax,-0x3c(%rbp)
	jmp    <mul_boxed_helper+0xb2>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <mul_boxed_helper+0x6f>
	movl   $0x1,-0x40(%rbp)
	jmp    <mul_boxed_helper+0xb2>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <mul_boxed_helper+0xb2>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <mul_boxed_helper+0x304>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <mul_boxed_helper+0xd3>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	or     %eax,-0x3c(%rbp)
	jmp    <mul_boxed_helper+0x12f>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <mul_boxed_helper+0xec>
	movl   $0x1,-0x40(%rbp)
	jmp    <mul_boxed_helper+0x12f>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <mul_boxed_helper+0x12f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <mul_boxed_helper+0x304>
	cmpl   $0x0,-0x40(%rbp)
	je     <mul_boxed_helper+0x238>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x18(%rbp)
	movsd  -0x20(%rbp),%xmm0
	mulsd  -0x18(%rbp),%xmm0
	movsd  %xmm0,-0x10(%rbp)
	movsd  -0x10(%rbp),%xmm0
	movq   0x1086a(%rip),%xmm1        # <asso_values.0+0x100>
	andpd  %xmm0,%xmm1
	movsd  0x1086e(%rip),%xmm0        # <asso_values.0+0x110>
	ucomisd %xmm1,%xmm0
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <mul_boxed_helper+0x1cd>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <mul_boxed_helper+0x304>
	mov    -0x48(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <mul_boxed_helper+0x21e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <mul_boxed_helper+0x304>
	mov    -0x48(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rdi
	movq   %rax,%xmm0
	call   <term_from_float>
	jmp    <mul_boxed_helper+0x304>
	cmpl   $0x0,-0x3c(%rbp)
	je     <mul_boxed_helper+0x249>
	cmpl   $0x1,-0x3c(%rbp)
	je     <mul_boxed_helper+0x24e>
	jmp    <mul_boxed_helper+0x2d6>
	call   <abort@plt>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x28(%rbp)
	mov    $0x0,%edx
	mov    -0x30(%rbp),%rax
	imul   -0x28(%rbp),%rax
	jno    <mul_boxed_helper+0x283>
	mov    $0x1,%edx
	mov    %rax,-0x38(%rbp)
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %al,%al
	je     <mul_boxed_helper+0x2c1>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <mul_boxed_helper+0x304>
	mov    -0x38(%rbp),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <mul_boxed_helper+0x304>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <mul_boxed_helper+0x318>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<bif_erlang_mul_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_mul_2+0xc9>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_mul_2+0xc9>
	mov    -0x38(%rbp),%rax
	sar    $0x2,%rax
	and    $0xfffffffffffffffc,%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x40(%rbp),%rax
	sar    $0x2,%rax
	and    $0xfffffffffffffffc,%rax
	mov    %rax,-0x10(%rbp)
	mov    $0x0,%edx
	mov    -0x18(%rbp),%rax
	imul   -0x10(%rbp),%rax
	jno    <bif_erlang_mul_2+0x95>
	mov    $0x1,%edx
	mov    %rax,-0x20(%rbp)
	mov    %rdx,%rax
	and    $0x1,%eax
	xor    $0x1,%eax
	test   %al,%al
	je     <bif_erlang_mul_2+0xb0>
	mov    -0x20(%rbp),%rax
	or     $0xf,%rax
	jmp    <bif_erlang_mul_2+0xe0>
	mov    -0x40(%rbp),%rdx
	mov    -0x38(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <mul_overflow_helper>
	jmp    <bif_erlang_mul_2+0xe0>
	mov    -0x40(%rbp),%rdx
	mov    -0x38(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <mul_boxed_helper>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <bif_erlang_mul_2+0xf4>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<div_boxed_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	movl   $0x0,-0x14(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <div_boxed_helper+0x40>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	mov    %eax,-0x14(%rbp)
	jmp    <div_boxed_helper+0x8c>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <div_boxed_helper+0x8c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <div_boxed_helper+0x217>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <div_boxed_helper+0xad>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	or     %eax,-0x14(%rbp)
	jmp    <div_boxed_helper+0xf9>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <div_boxed_helper+0xf9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <div_boxed_helper+0x217>
	cmpl   $0x0,-0x14(%rbp)
	je     <div_boxed_helper+0x10a>
	cmpl   $0x1,-0x14(%rbp)
	je     <div_boxed_helper+0x10f>
	jmp    <div_boxed_helper+0x1e9>
	call   <abort@plt>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <div_boxed_helper+0x172>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <div_boxed_helper+0x217>
	cmpq   $0xffffffffffffffff,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <div_boxed_helper+0x1cb>
	movabs $0x8000000000000000,%rax
	cmp    %rax,-0x10(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <div_boxed_helper+0x1cb>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <div_boxed_helper+0x217>
	mov    -0x10(%rbp),%rax
	cqto   
	idivq  -0x8(%rbp)
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <div_boxed_helper+0x217>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_div_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_div_2+0xf4>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_div_2+0xf4>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	je     <bif_erlang_div_2+0xc4>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	cqto   
	idivq  -0x10(%rbp)
	mov    %rax,-0x8(%rbp)
	movabs $0x800000000000000,%rax
	cmp    %rax,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_div_2+0xb6>
	mov    -0x18(%rbp),%rax
	movabs $0x800000000000000,%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	jmp    <bif_erlang_div_2+0x10b>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	jmp    <bif_erlang_div_2+0x10b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_div_2+0x10b>
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <div_boxed_helper>
	leave  
	ret    

<neg_boxed_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <neg_boxed_helper+0x119>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x10(%rbp)
	movsd  -0x10(%rbp),%xmm0
	movq   0x10289(%rip),%xmm1        # <asso_values.0+0x120>
	xorpd  %xmm1,%xmm0
	movsd  %xmm0,-0x8(%rbp)
	movsd  -0x8(%rbp),%xmm0
	movq   0x10253(%rip),%xmm1        # <asso_values.0+0x100>
	andpd  %xmm0,%xmm1
	movsd  0x10257(%rip),%xmm0        # <asso_values.0+0x110>
	ucomisd %xmm1,%xmm0
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <neg_boxed_helper+0xae>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <neg_boxed_helper+0x23c>
	mov    -0x28(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <neg_boxed_helper+0xff>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <neg_boxed_helper+0x23c>
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rdi
	movq   %rax,%xmm0
	call   <term_from_float>
	jmp    <neg_boxed_helper+0x23c>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <neg_boxed_helper+0x20e>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	test   %eax,%eax
	je     <neg_boxed_helper+0x147>
	cmp    $0x1,%eax
	je     <neg_boxed_helper+0x14c>
	jmp    <neg_boxed_helper+0x1de>
	call   <abort@plt>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	mov    %rax,-0x18(%rbp)
	movabs $0x8000000000000000,%rax
	cmp    %rax,-0x18(%rbp)
	je     <neg_boxed_helper+0x193>
	movabs $0x800000000000000,%rax
	cmp    %rax,-0x18(%rbp)
	jne    <neg_boxed_helper+0x1c3>
	movabs $0xf800000000000000,%rax
	mov    %rax,%rdi
	call   <term_from_int>
	jmp    <neg_boxed_helper+0x23c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <neg_boxed_helper+0x23c>
	mov    -0x18(%rbp),%rax
	neg    %rax
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	jmp    <neg_boxed_helper+0x23c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <neg_boxed_helper+0x23c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_neg_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_neg_1+0x85>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x8(%rbp)
	movabs $0xf800000000000000,%rax
	cmp    %rax,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_neg_1+0x74>
	mov    -0x18(%rbp),%rax
	movabs $0x800000000000000,%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	jmp    <bif_erlang_neg_1+0x98>
	mov    -0x8(%rbp),%rax
	neg    %rax
	mov    %rax,%rdi
	call   <term_from_int>
	jmp    <bif_erlang_neg_1+0x98>
	mov    -0x28(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <neg_boxed_helper>
	leave  
	ret    

<abs_boxed_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <abs_boxed_helper+0x119>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_conv_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x10(%rbp)
	movsd  -0x10(%rbp),%xmm0
	movq   0xff91(%rip),%xmm1        # <asso_values.0+0x100>
	andpd  %xmm1,%xmm0
	movsd  %xmm0,-0x8(%rbp)
	movsd  -0x8(%rbp),%xmm0
	movq   0xff7b(%rip),%xmm1        # <asso_values.0+0x100>
	andpd  %xmm0,%xmm1
	movsd  0xff7f(%rip),%xmm0        # <asso_values.0+0x110>
	ucomisd %xmm1,%xmm0
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <abs_boxed_helper+0xae>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <abs_boxed_helper+0x225>
	mov    -0x28(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <abs_boxed_helper+0xff>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <abs_boxed_helper+0x225>
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rdi
	movq   %rax,%xmm0
	call   <term_from_float>
	jmp    <abs_boxed_helper+0x225>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <abs_boxed_helper+0x1f7>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	test   %eax,%eax
	je     <abs_boxed_helper+0x147>
	cmp    $0x1,%eax
	je     <abs_boxed_helper+0x14c>
	jmp    <abs_boxed_helper+0x1c7>
	call   <abort@plt>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	js     <abs_boxed_helper+0x16c>
	mov    -0x30(%rbp),%rax
	jmp    <abs_boxed_helper+0x225>
	movabs $0x8000000000000000,%rax
	cmp    %rax,-0x18(%rbp)
	jne    <abs_boxed_helper+0x1ac>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <abs_boxed_helper+0x225>
	mov    -0x18(%rbp),%rax
	neg    %rax
	mov    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	jmp    <abs_boxed_helper+0x225>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <abs_boxed_helper+0x225>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_abs_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_abs_1+0x92>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	jns    <bif_erlang_abs_1+0x8c>
	movabs $0xf800000000000000,%rax
	cmp    %rax,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_abs_1+0x7b>
	mov    -0x18(%rbp),%rax
	movabs $0x800000000000000,%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_boxed_int>
	jmp    <bif_erlang_abs_1+0xa5>
	mov    -0x8(%rbp),%rax
	neg    %rax
	mov    %rax,%rdi
	call   <term_from_int>
	jmp    <bif_erlang_abs_1+0xa5>
	mov    -0x28(%rbp),%rax
	jmp    <bif_erlang_abs_1+0xa5>
	mov    -0x28(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <abs_boxed_helper>
	leave  
	ret    

<rem_boxed_helper>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	movl   $0x0,-0x14(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <rem_boxed_helper+0x40>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	mov    %eax,-0x14(%rbp)
	jmp    <rem_boxed_helper+0x8c>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <rem_boxed_helper+0x8c>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <rem_boxed_helper+0x1b8>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <rem_boxed_helper+0xad>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_boxed_size>
	or     %eax,-0x14(%rbp)
	jmp    <rem_boxed_helper+0xf9>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <rem_boxed_helper+0xf9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <rem_boxed_helper+0x1b8>
	cmpl   $0x0,-0x14(%rbp)
	je     <rem_boxed_helper+0x10a>
	cmpl   $0x1,-0x14(%rbp)
	je     <rem_boxed_helper+0x10f>
	jmp    <rem_boxed_helper+0x18a>
	call   <abort@plt>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x10(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <rem_boxed_helper+0x16f>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <rem_boxed_helper+0x1b8>
	mov    -0x10(%rbp),%rax
	cqto   
	idivq  -0x8(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <rem_boxed_helper+0x1b8>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_rem_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_rem_2+0xc0>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_rem_2+0xc0>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_rem_2+0x90>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	cqto   
	idivq  -0x8(%rbp)
	mov    %rdx,%rax
	mov    %rax,%rdi
	call   <term_from_int>
	jmp    <bif_erlang_rem_2+0xd7>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_rem_2+0xd7>
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <rem_boxed_helper>
	leave  
	ret    

<bif_erlang_ceil_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <bif_erlang_ceil_1+0xba>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x10(%rbp)
	movsd  0xfa62(%rip),%xmm0        # <asso_values.0+0x130>
	comisd -0x10(%rbp),%xmm0
	ja     <bif_erlang_ceil_1+0x5e>
	movsd  -0x10(%rbp),%xmm0
	comisd 0xfa56(%rip),%xmm0        # <asso_values.0+0x138>
	jbe    <bif_erlang_ceil_1+0x8e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_ceil_1+0xfe>
	mov    -0x10(%rbp),%rax
	movq   %rax,%xmm0
	call   <ceil@plt>
	cvttsd2si %xmm0,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <bif_erlang_ceil_1+0xfe>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <bif_erlang_ceil_1+0xd0>
	mov    -0x28(%rbp),%rax
	jmp    <bif_erlang_ceil_1+0xfe>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_floor_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <bif_erlang_floor_1+0xba>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x10(%rbp)
	movsd  0xf962(%rip),%xmm0        # <asso_values.0+0x130>
	comisd -0x10(%rbp),%xmm0
	ja     <bif_erlang_floor_1+0x5e>
	movsd  -0x10(%rbp),%xmm0
	comisd 0xf956(%rip),%xmm0        # <asso_values.0+0x138>
	jbe    <bif_erlang_floor_1+0x8e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_floor_1+0xfe>
	mov    -0x10(%rbp),%rax
	movq   %rax,%xmm0
	call   <floor@plt>
	cvttsd2si %xmm0,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <bif_erlang_floor_1+0xfe>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <bif_erlang_floor_1+0xd0>
	mov    -0x28(%rbp),%rax
	jmp    <bif_erlang_floor_1+0xfe>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_round_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <bif_erlang_round_1+0xb5>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x10(%rbp)
	movsd  0xf862(%rip),%xmm0        # <asso_values.0+0x130>
	comisd -0x10(%rbp),%xmm0
	ja     <bif_erlang_round_1+0x5e>
	movsd  -0x10(%rbp),%xmm0
	comisd 0xf856(%rip),%xmm0        # <asso_values.0+0x138>
	jbe    <bif_erlang_round_1+0x8e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_round_1+0xf9>
	mov    -0x10(%rbp),%rax
	movq   %rax,%xmm0
	call   <llround@plt>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <bif_erlang_round_1+0xf9>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <bif_erlang_round_1+0xcb>
	mov    -0x28(%rbp),%rax
	jmp    <bif_erlang_round_1+0xf9>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_trunc_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_float>
	test   %eax,%eax
	je     <bif_erlang_trunc_1+0xba>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_float>
	movq   %xmm0,%rax
	mov    %rax,-0x10(%rbp)
	movsd  0xf767(%rip),%xmm0        # <asso_values.0+0x130>
	comisd -0x10(%rbp),%xmm0
	ja     <bif_erlang_trunc_1+0x5e>
	movsd  -0x10(%rbp),%xmm0
	comisd 0xf75b(%rip),%xmm0        # <asso_values.0+0x138>
	jbe    <bif_erlang_trunc_1+0x8e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xc,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bif_erlang_trunc_1+0xfe>
	mov    -0x10(%rbp),%rax
	movq   %rax,%xmm0
	call   <trunc@plt>
	cvttsd2si %xmm0,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	jmp    <bif_erlang_trunc_1+0xfe>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	je     <bif_erlang_trunc_1+0xd0>
	mov    -0x28(%rbp),%rax
	jmp    <bif_erlang_trunc_1+0xfe>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bitwise_helper>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %r8,-0x48(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <bitwise_helper+0x4d>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bitwise_helper+0x7d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bitwise_helper+0xc8>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	mov    %rax,-0x18(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    -0x48(%rbp),%rcx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   *%rcx
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	leave  
	ret    

<bor>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	or     -0x10(%rbp),%rax
	pop    %rbp
	ret    

<bif_erlang_bor_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_bor_2+0x57>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_bor_2+0x57>
	mov    -0x18(%rbp),%rax
	or     -0x20(%rbp),%rax
	jmp    <bif_erlang_bor_2+0x75>
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	lea    -0x87(%rip),%r8        # <bor>
	mov    %rax,%rdi
	call   <bitwise_helper>
	leave  
	ret    

<band>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	and    -0x10(%rbp),%rax
	pop    %rbp
	ret    

<bif_erlang_band_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_band_2+0x57>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_band_2+0x57>
	mov    -0x18(%rbp),%rax
	and    -0x20(%rbp),%rax
	jmp    <bif_erlang_band_2+0x75>
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	lea    -0x87(%rip),%r8        # <band>
	mov    %rax,%rdi
	call   <bitwise_helper>
	leave  
	ret    

<bxor>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	xor    -0x10(%rbp),%rax
	pop    %rbp
	ret    

<bif_erlang_bxor_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_bxor_2+0x5b>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_bxor_2+0x5b>
	mov    -0x18(%rbp),%rax
	xor    -0x20(%rbp),%rax
	or     $0xf,%rax
	jmp    <bif_erlang_bxor_2+0x79>
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	lea    -0x8b(%rip),%r8        # <bxor>
	mov    %rax,%rdi
	call   <bitwise_helper>
	leave  
	ret    

<bitshift_helper>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %r8,-0x48(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <bitshift_helper+0x4d>
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bitshift_helper+0x7d>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x28(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <bitshift_helper+0xc8>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int64>
	mov    %rax,-0x18(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    -0x48(%rbp),%rcx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   *%rcx
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <make_maybe_boxed_int>
	leave  
	ret    

<bsl>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,%ecx
	shl    %cl,%rax
	pop    %rbp
	ret    

<bif_erlang_bsl_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	lea    -0x52(%rip),%r8        # <bsl>
	mov    %rax,%rdi
	call   <bitshift_helper>
	leave  
	ret    

<bsr>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,%ecx
	sar    %cl,%rax
	pop    %rbp
	ret    

<bif_erlang_bsr_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0xc(%rbp),%esi
	mov    -0x8(%rbp),%rax
	lea    -0x52(%rip),%r8        # <bsr>
	mov    %rax,%rdi
	call   <bitshift_helper>
	leave  
	ret    

<bif_erlang_bnot_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <bif_erlang_bnot_1+0x3d>
	mov    -0x18(%rbp),%rax
	not    %rax
	or     $0xf,%rax
	jmp    <bif_erlang_bnot_1+0x6b>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x6,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_not_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	cmpq   $0x4b,-0x10(%rbp)
	jne    <bif_erlang_not_1+0x22>
	mov    $0xb,%eax
	jmp    <bif_erlang_not_1+0x5e>
	cmpq   $0xb,-0x10(%rbp)
	jne    <bif_erlang_not_1+0x30>
	mov    $0x4b,%eax
	jmp    <bif_erlang_not_1+0x5e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_and_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	cmpq   $0xb,-0x10(%rbp)
	jne    <bif_erlang_and_2+0x2d>
	cmpq   $0xb,-0x18(%rbp)
	jne    <bif_erlang_and_2+0x2d>
	mov    $0xb,%eax
	jmp    <bif_erlang_and_2+0x9a>
	cmpq   $0xb,-0x10(%rbp)
	jne    <bif_erlang_and_2+0x42>
	cmpq   $0x4b,-0x18(%rbp)
	jne    <bif_erlang_and_2+0x42>
	mov    $0xb,%eax
	jmp    <bif_erlang_and_2+0x9a>
	cmpq   $0x4b,-0x10(%rbp)
	jne    <bif_erlang_and_2+0x57>
	cmpq   $0xb,-0x18(%rbp)
	jne    <bif_erlang_and_2+0x57>
	mov    $0xb,%eax
	jmp    <bif_erlang_and_2+0x9a>
	cmpq   $0x4b,-0x10(%rbp)
	jne    <bif_erlang_and_2+0x6c>
	cmpq   $0x4b,-0x18(%rbp)
	jne    <bif_erlang_and_2+0x6c>
	mov    $0x4b,%eax
	jmp    <bif_erlang_and_2+0x9a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_or_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	cmpq   $0xb,-0x10(%rbp)
	jne    <bif_erlang_or_2+0x2d>
	cmpq   $0xb,-0x18(%rbp)
	jne    <bif_erlang_or_2+0x2d>
	mov    $0xb,%eax
	jmp    <bif_erlang_or_2+0x9a>
	cmpq   $0xb,-0x10(%rbp)
	jne    <bif_erlang_or_2+0x42>
	cmpq   $0x4b,-0x18(%rbp)
	jne    <bif_erlang_or_2+0x42>
	mov    $0x4b,%eax
	jmp    <bif_erlang_or_2+0x9a>
	cmpq   $0x4b,-0x10(%rbp)
	jne    <bif_erlang_or_2+0x57>
	cmpq   $0xb,-0x18(%rbp)
	jne    <bif_erlang_or_2+0x57>
	mov    $0x4b,%eax
	jmp    <bif_erlang_or_2+0x9a>
	cmpq   $0x4b,-0x10(%rbp)
	jne    <bif_erlang_or_2+0x6c>
	cmpq   $0x4b,-0x18(%rbp)
	jne    <bif_erlang_or_2+0x6c>
	mov    $0x4b,%eax
	jmp    <bif_erlang_or_2+0x9a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_xor_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	cmpq   $0xb,-0x10(%rbp)
	jne    <bif_erlang_xor_2+0x2d>
	cmpq   $0xb,-0x18(%rbp)
	jne    <bif_erlang_xor_2+0x2d>
	mov    $0xb,%eax
	jmp    <bif_erlang_xor_2+0x9a>
	cmpq   $0xb,-0x10(%rbp)
	jne    <bif_erlang_xor_2+0x42>
	cmpq   $0x4b,-0x18(%rbp)
	jne    <bif_erlang_xor_2+0x42>
	mov    $0x4b,%eax
	jmp    <bif_erlang_xor_2+0x9a>
	cmpq   $0x4b,-0x10(%rbp)
	jne    <bif_erlang_xor_2+0x57>
	cmpq   $0xb,-0x18(%rbp)
	jne    <bif_erlang_xor_2+0x57>
	mov    $0x4b,%eax
	jmp    <bif_erlang_xor_2+0x9a>
	cmpq   $0x4b,-0x10(%rbp)
	jne    <bif_erlang_xor_2+0x6c>
	cmpq   $0x4b,-0x18(%rbp)
	jne    <bif_erlang_xor_2+0x6c>
	mov    $0xb,%eax
	jmp    <bif_erlang_xor_2+0x9a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	leave  
	ret    

<bif_erlang_equal_to_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	je     <bif_erlang_equal_to_2+0x3a>
	mov    $0x4b,%eax
	jmp    <bif_erlang_equal_to_2+0x3f>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_not_equal_to_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	jne    <bif_erlang_not_equal_to_2+0x3a>
	mov    $0x4b,%eax
	jmp    <bif_erlang_not_equal_to_2+0x3f>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_exactly_equal_to_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	je     <bif_erlang_exactly_equal_to_2+0x3a>
	mov    $0x4b,%eax
	jmp    <bif_erlang_exactly_equal_to_2+0x3f>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_exactly_not_equal_to_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	jne    <bif_erlang_exactly_not_equal_to_2+0x3a>
	mov    $0x4b,%eax
	jmp    <bif_erlang_exactly_not_equal_to_2+0x3f>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_greater_than_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	jle    <bif_erlang_greater_than_2+0x3a>
	mov    $0x4b,%eax
	jmp    <bif_erlang_greater_than_2+0x3f>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_less_than_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	jns    <bif_erlang_less_than_2+0x3a>
	mov    $0x4b,%eax
	jmp    <bif_erlang_less_than_2+0x3f>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_less_than_or_equal_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	jg     <bif_erlang_less_than_or_equal_2+0x3a>
	mov    $0x4b,%eax
	jmp    <bif_erlang_less_than_or_equal_2+0x3f>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_greater_than_or_equal_2>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	js     <bif_erlang_greater_than_or_equal_2+0x3a>
	mov    $0x4b,%eax
	jmp    <bif_erlang_greater_than_or_equal_2+0x3f>
	mov    $0xb,%eax
	leave  
	ret    

<bif_erlang_get_1>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	lea    0x150(%rax),%rcx
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <dictionary_get>
	leave  
	ret    

<from_le64>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shl    $0x38,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x28,%rax
	mov    %rax,%rcx
	movabs $0xff000000000000,%rax
	and    %rcx,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x18,%rax
	mov    %rax,%rcx
	movabs $0xff0000000000,%rax
	and    %rcx,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	shl    $0x8,%rax
	mov    %rax,%rcx
	movabs $0xff00000000,%rax
	and    %rcx,%rax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	shr    $0x8,%rax
	and    $0xff000000,%eax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	shr    $0x18,%rax
	and    $0xff0000,%eax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	shr    $0x28,%rax
	and    $0xff00,%eax
	or     %rax,%rdx
	mov    -0x8(%rbp),%rax
	shr    $0x38,%rax
	or     %rdx,%rax
	pop    %rbp
	ret    

<bitstring_extract_any_integer>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x48,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %ecx,-0x3c(%rbp)
	mov    %r8,-0x48(%rbp)
	movq   $0x0,-0x8(%rbp)
	movl   $0x0,-0x18(%rbp)
	jmp    <bitstring_extract_any_integer+0x96>
	mov    -0x30(%rbp),%rax
	mov    %eax,%edx
	mov    -0x18(%rbp),%eax
	add    %edx,%eax
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	sar    $0x3,%eax
	mov    %eax,-0x10(%rbp)
	mov    -0x14(%rbp),%eax
	not    %eax
	and    $0x7,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0x10(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%edx
	mov    -0xc(%rbp),%eax
	mov    %eax,%ecx
	sar    %cl,%edx
	mov    %edx,%eax
	and    $0x1,%eax
	test   %eax,%eax
	je     <bitstring_extract_any_integer+0x92>
	mov    -0x38(%rbp),%rax
	mov    -0x18(%rbp),%edx
	sub    %edx,%eax
	sub    $0x1,%eax
	mov    $0x1,%edx
	mov    %eax,%ecx
	shl    %cl,%rdx
	mov    %rdx,%rax
	or     %rax,-0x8(%rbp)
	addl   $0x1,-0x18(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	cmp    %rax,-0x38(%rbp)
	jg     <bitstring_extract_any_integer+0x30>
	mov    -0x3c(%rbp),%eax
	and    $0x2,%eax
	test   %eax,%eax
	je     <bitstring_extract_any_integer+0xcd>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <from_le64>
	mov    -0x38(%rbp),%rdx
	mov    %edx,%ecx
	mov    $0x40,%edx
	sub    %ecx,%edx
	mov    %edx,%ecx
	shr    %cl,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x3c(%rbp),%eax
	and    $0x4,%eax
	test   %eax,%eax
	je     <bitstring_extract_any_integer+0x113>
	mov    -0x18(%rbp),%eax
	sub    $0x1,%eax
	mov    -0x8(%rbp),%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	je     <bitstring_extract_any_integer+0x113>
	mov    -0x18(%rbp),%eax
	mov    $0xffffffffffffffff,%rdx
	mov    %eax,%ecx
	shl    %cl,%rdx
	mov    %rdx,%rax
	or     -0x8(%rbp),%rax
	mov    %rax,%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,(%rax)
	jmp    <bitstring_extract_any_integer+0x11e>
	mov    -0x48(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    $0x1,%eax
	leave  
	ret    

<bitstring_insert_any_integer>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %r8d,-0x44(%rbp)
	cmpl   $0x0,-0x44(%rbp)
	je     <bitstring_insert_any_integer+0x2c>
	mov    $0x0,%eax
	jmp    <bitstring_insert_any_integer+0xde>
	movl   $0x0,-0x20(%rbp)
	jmp    <bitstring_insert_any_integer+0xca>
	mov    -0x40(%rbp),%rax
	mov    -0x20(%rbp),%edx
	sub    %edx,%eax
	sub    $0x1,%eax
	mov    %eax,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	mov    $0x1,%edx
	mov    %eax,%ecx
	shl    %cl,%edx
	mov    %edx,%eax
	cltq   
	and    -0x38(%rbp),%rax
	mov    %rax,%rdx
	mov    -0x1c(%rbp),%eax
	mov    %eax,%ecx
	sar    %cl,%rdx
	mov    %rdx,%rax
	mov    %eax,-0x18(%rbp)
	cmpl   $0x0,-0x18(%rbp)
	je     <bitstring_insert_any_integer+0xc6>
	mov    -0x30(%rbp),%rax
	mov    %eax,%edx
	mov    -0x20(%rbp),%eax
	add    %edx,%eax
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	sar    $0x3,%eax
	mov    %eax,-0x10(%rbp)
	mov    -0x10(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x14(%rbp),%eax
	not    %eax
	and    $0x7,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	mov    %eax,%esi
	mov    -0xc(%rbp),%eax
	mov    $0x1,%edx
	mov    %eax,%ecx
	shl    %cl,%edx
	mov    %edx,%eax
	xor    %esi,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %dl,(%rax)
	addl   $0x1,-0x20(%rbp)
	mov    -0x20(%rbp),%eax
	cltq   
	cmp    %rax,-0x40(%rbp)
	ja     <bitstring_insert_any_integer+0x38>
	mov    $0x1,%eax
	pop    %rbp
	ret    

<defaultatoms_init>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	movl   $0x1,-0x4(%rbp)
	lea    0xeb1b(%rip),%rdx        # <asso_values.0+0x140>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xeb01(%rip),%rdx        # <asso_values.0+0x147>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x1,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xeae5(%rip),%rdx        # <asso_values.0+0x14d>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x2,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xeac7(%rip),%rdx        # <asso_values.0+0x151>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x3,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xeaac(%rip),%rdx        # <asso_values.0+0x158>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x4,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xea95(%rip),%rdx        # <asso_values.0+0x163>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x5,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xea7b(%rip),%rdx        # <asso_values.0+0x16b>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x6,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xea63(%rip),%rdx        # <asso_values.0+0x175>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x7,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xea4b(%rip),%rdx        # <asso_values.0+0x17f>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x8,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xea3f(%rip),%rdx        # <asso_values.0+0x195>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x9,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xea2e(%rip),%rdx        # <asso_values.0+0x1a6>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0xa,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xea18(%rip),%rdx        # <asso_values.0+0x1b2>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0xb,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xea05(%rip),%rdx        # <asso_values.0+0x1c1>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0xc,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe9a9(%rip),%rdx        # <asso_values.0+0x187>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0xd,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe9cb(%rip),%rdx        # <asso_values.0+0x1cb>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0xe,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe9b0(%rip),%rdx        # <asso_values.0+0x1d2>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0xf,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe999(%rip),%rdx        # <asso_values.0+0x1dd>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x10,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe97f(%rip),%rdx        # <asso_values.0+0x1e5>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x11,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe96c(%rip),%rdx        # <asso_values.0+0x1f4>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x12,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe952(%rip),%rdx        # <asso_values.0+0x1fc>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x13,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe943(%rip),%rdx        # <asso_values.0+0x20f>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x14,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe927(%rip),%rdx        # <asso_values.0+0x215>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x15,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe911(%rip),%rdx        # <asso_values.0+0x221>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x16,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe8fe(%rip),%rdx        # <asso_values.0+0x230>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x17,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe8eb(%rip),%rdx        # <asso_values.0+0x23f>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x18,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe8d5(%rip),%rdx        # <asso_values.0+0x24b>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x19,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe8bf(%rip),%rdx        # <asso_values.0+0x257>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x1a,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe8b2(%rip),%rdx        # <asso_values.0+0x26c>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x1b,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe89a(%rip),%rdx        # <asso_values.0+0x276>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x1c,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe882(%rip),%rdx        # <asso_values.0+0x280>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x1d,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe86c(%rip),%rdx        # <asso_values.0+0x28c>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x1e,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe853(%rip),%rdx        # <asso_values.0+0x295>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x1f,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe83b(%rip),%rdx        # <asso_values.0+0x29f>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x20,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe826(%rip),%rdx        # <asso_values.0+0x2ac>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x21,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe80f(%rip),%rdx        # <asso_values.0+0x2b7>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x22,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe7f4(%rip),%rdx        # <asso_values.0+0x2be>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x23,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe7df(%rip),%rdx        # <asso_values.0+0x2cb>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x24,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe7ca(%rip),%rdx        # <asso_values.0+0x2d8>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x25,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe7ae(%rip),%rdx        # <asso_values.0+0x2de>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x26,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe791(%rip),%rdx        # <asso_values.0+0x2e3>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x27,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe776(%rip),%rdx        # <asso_values.0+0x2ea>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x28,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe75b(%rip),%rdx        # <asso_values.0+0x2f1>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x29,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe743(%rip),%rdx        # <asso_values.0+0x2fb>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x2a,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe727(%rip),%rdx        # <asso_values.0+0x301>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x2b,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe70e(%rip),%rdx        # <asso_values.0+0x30a>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x2c,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe6f4(%rip),%rdx        # <asso_values.0+0x312>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x2d,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe6d8(%rip),%rdx        # <asso_values.0+0x318>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x2e,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe6bf(%rip),%rdx        # <asso_values.0+0x321>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x2f,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe6a6(%rip),%rdx        # <asso_values.0+0x32a>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x30,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe696(%rip),%rdx        # <asso_values.0+0x33c>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x31,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe67c(%rip),%rdx        # <asso_values.0+0x344>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x32,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe665(%rip),%rdx        # <asso_values.0+0x34f>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x33,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe649(%rip),%rdx        # <asso_values.0+0x355>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x34,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe62f(%rip),%rdx        # <asso_values.0+0x35d>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x35,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe615(%rip),%rdx        # <asso_values.0+0x365>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x36,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe5f9(%rip),%rdx        # <asso_values.0+0x36b>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x37,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe5e3(%rip),%rdx        # <asso_values.0+0x377>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x38,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe5cb(%rip),%rdx        # <asso_values.0+0x381>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x39,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xe5b4(%rip),%rdx        # <asso_values.0+0x38c>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x3a,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	cmpl   $0x0,-0x4(%rbp)
	jne    <defaultatoms_init+0x7f7>
	call   <abort@plt>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <platform_defaultatoms_init>
	nop
	leave  
	ret    

<list_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<list_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <list_insert>
	nop
	leave  
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_atom>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0xb,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nonempty_list>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x1,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_list>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_is_list+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_is_list+0x33>
	mov    $0x1,%eax
	jmp    <term_is_list+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_get_size_from_boxed_header>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_is_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	jne    <term_is_binary+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    $0x28,%eax
	seta   %dl
	test   %dl,%dl
	jne    <term_is_binary+0x69>
	movabs $0x11100000000,%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	test   %al,%al
	je     <term_is_binary+0x69>
	mov    $0x1,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_refc_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_refc_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x20,-0xc(%rbp)
	sete   %al
	jmp    <term_is_refc_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_refc_binary_is_const>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	leave  
	ret    

<term_is_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_sub_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x28,-0xc(%rbp)
	sete   %al
	jmp    <term_is_sub_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_uint8>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffff00f,%rax
	cmp    $0xf,%rax
	sete   %al
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x3b,%eax
	pop    %rbp
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<term_to_uint8>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x4,%ax
	pop    %rbp
	ret    

<term_to_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%eax
	pop    %rbp
	ret    

<term_from_int11>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,%eax
	mov    %ax,-0x4(%rbp)
	movswl -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_from_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shl    $0x4,%rax
	or     $0xf,%rax
	pop    %rbp
	ret    

<term_put_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x48,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	pop    %rbp
	ret    

<term_make_boxed_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_put_int>
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_make_maybe_boxed_int64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	movabs $0xf800000000000000,%rax
	cmp    %rax,-0x10(%rbp)
	jl     <term_make_maybe_boxed_int64+0x30>
	movabs $0x7ffffffffffffff,%rax
	cmp    %rax,-0x10(%rbp)
	jle    <term_make_maybe_boxed_int64+0x6f>
	mov    -0x8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <term_make_maybe_boxed_int64+0x5a>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <term_make_maybe_boxed_int64+0x7b>
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_make_boxed_int>
	jmp    <term_make_maybe_boxed_int64+0x7b>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	leave  
	ret    

<term_boxed_integer_size>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	movabs $0xf800000000000000,%rax
	cmp    %rax,-0x8(%rbp)
	jl     <term_boxed_integer_size+0x28>
	movabs $0x7ffffffffffffff,%rax
	cmp    %rax,-0x8(%rbp)
	jle    <term_boxed_integer_size+0x2f>
	mov    $0x2,%eax
	jmp    <term_boxed_integer_size+0x34>
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_binary_size_is_heap_binary>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	cmpl   $0x3f,-0x4(%rbp)
	setbe  %al
	pop    %rbp
	ret    

<term_binary_data_size_in_terms>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_binary_data_size_in_terms+0x27>
	mov    -0x4(%rbp),%eax
	add    $0x7,%eax
	shr    $0x3,%eax
	add    $0x1,%eax
	jmp    <term_binary_data_size_in_terms+0x2c>
	mov    $0x6,%eax
	leave  
	ret    

<term_binary_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_binary_data+0x5e>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	test   %al,%al
	je     <term_binary_data+0x49>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <refc_binary_get_data>
	jmp    <term_binary_data+0x9c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	je     <term_binary_data+0x94>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	add    %rdx,%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	leave  
	ret    

<term_create_uninitialized_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_create_uninitialized_binary+0x6f>
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0xc(%rbp),%eax
	shl    $0x6,%eax
	or     $0x24,%eax
	movslq %eax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x14(%rbp),%eax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	jmp    <term_create_uninitialized_binary+0x86>
	mov    -0x14(%rbp),%ecx
	mov    -0x20(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_refc_binary>
	leave  
	ret    

<term_from_literal_binary>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x2c(%rbp),%eax
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_create_uninitialized_binary>
	mov    %rax,-0x18(%rbp)
	mov    -0x2c(%rbp),%ebx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_set_refc_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_from_const_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x1c(%rbp),%ecx
	mov    -0x28(%rbp),%rax
	mov    $0x1,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_refc_binary>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_set_refc_binary_data>
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<term_alloc_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	lea    0x1(%rax),%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x14(%rbp),%eax
	shl    $0x6,%eax
	mov    %eax,%edx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_put_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x28,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%eax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_arity>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_from_string>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,%eax
	mov    %rdx,-0x38(%rbp)
	mov    %ax,-0x2c(%rbp)
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x18(%rbp)
	movl   $0x0,-0x1c(%rbp)
	jmp    <term_from_string+0xb4>
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x2,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    -0x18(%rbp),%rax
	add    %rcx,%rax
	or     $0x1,%rdx
	mov    %rdx,(%rax)
	mov    -0x1c(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	movslq %eax,%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    -0x1c(%rbp),%edx
	movslq %edx,%rdx
	add    $0x1,%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x18(%rbp),%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,(%rbx)
	addl   $0x2,-0x1c(%rbp)
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	cmp    %eax,-0x1c(%rbp)
	jl     <term_from_string+0x3a>
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	cltq   
	shl    $0x3,%rax
	lea    -0x10(%rax),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	movq   $0x3b,(%rax)
	mov    -0x18(%rbp),%rax
	or     $0x1,%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffe,%rax
	pop    %rbp
	ret    

<term_list_from_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	or     $0x1,%rax
	pop    %rbp
	ret    

<term_get_list_head>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	leave  
	ret    

<term_get_list_tail>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_list_alloc>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	leave  
	ret    

<term_from_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	movsd  %xmm0,-0x18(%rbp)
	mov    %rdi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	movq   $0x58,(%rax)
	mov    -0x10(%rbp),%rax
	add    $0x8,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movsd  -0x18(%rbp),%xmm0
	movsd  %xmm0,(%rax)
	mov    -0x10(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_is_string>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	jmp    <term_is_string+0x45>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_uint8>
	test   %al,%al
	jne    <term_is_string+0x35>
	mov    $0x0,%eax
	jmp    <term_is_string+0x61>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_is_string+0xe>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	leave  
	ret    

<term_make_function_reference>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	je     <term_make_function_reference+0x39>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <term_make_function_reference+0x8e>
	mov    -0x30(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0xd4,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	lea    0x10(%rax),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	lea    0x18(%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_is_map>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_map+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x3c,%rax
	jne    <term_is_map+0x43>
	mov    $0x1,%eax
	jmp    <term_is_map+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_map_keys_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	pop    %rbp
	ret    

<term_get_map_value_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	pop    %rbp
	ret    

<term_alloc_map_maybe_shared>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <term_alloc_map_maybe_shared+0x3a>
	mov    -0x20(%rbp),%rax
	mov    %eax,%edx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rsi
	mov    %edx,%edi
	call   <term_alloc_tuple>
	jmp    <term_alloc_map_maybe_shared+0x3e>
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	lea    0x2(%rax),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x20(%rbp),%rax
	add    $0x1,%rax
	shl    $0x6,%rax
	or     $0x3c,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_alloc_map>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_map_maybe_shared>
	leave  
	ret    

<term_get_map_keys>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_map_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	leave  
	ret    

<term_set_map_assoc>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x30,%rsp
	mov    %rdi,-0x20(%rbp)
	mov    %rsi,-0x28(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %eax,%ebx
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,%rcx
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdx
	mov    %ebx,%esi
	mov    %rcx,%rdi
	call   <term_put_tuple_element>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x10(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x28(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x10(%rbp),%rax
	add    %rax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_map_key>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x10,%rsp
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %eax,%ebx
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %ebx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_get_map_value>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x20(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<atom_string_len>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	pop    %rbp
	ret    

<atom_string_data>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x1,%rax
	pop    %rbp
	ret    

<externalterm_to_term_internal>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %ecx,-0x5c(%rbp)
	mov    %r8,-0x68(%rbp)
	mov    %r9d,%eax
	mov    %al,-0x60(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x48(%rbp),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	movzbl (%rax),%eax
	cmp    $0x83,%al
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <externalterm_to_term_internal+0x5f>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <externalterm_to_term_internal+0x21e>
	cmpq   $0x0,-0x50(%rbp)
	jne    <externalterm_to_term_internal+0x75>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <externalterm_to_term_internal+0x21e>
	movzbl -0x60(%rbp),%edx
	mov    -0x50(%rbp),%rax
	lea    -0x1(%rax),%rsi
	mov    -0x38(%rbp),%rax
	lea    0x1(%rax),%rdi
	mov    -0x58(%rbp),%rcx
	lea    -0x40(%rbp),%rax
	mov    %rcx,%r8
	mov    %edx,%ecx
	mov    %rax,%rdx
	call   <calculate_heap_usage>
	mov    %eax,-0x3c(%rbp)
	cmpl   $0xffffffff,-0x3c(%rbp)
	jne    <externalterm_to_term_internal+0xb6>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <externalterm_to_term_internal+0x21e>
	cmpl   $0x0,-0x5c(%rbp)
	je     <externalterm_to_term_internal+0x19e>
	mov    -0x3c(%rbp),%eax
	cltq   
	add    $0x2,%rax
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x28(%rbp)
	cmpq   $0x0,-0x28(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <externalterm_to_term_internal+0xf8>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <externalterm_to_term_internal+0x21e>
	mov    -0x58(%rbp),%rax
	lea    0x180(%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <list_append>
	mov    -0x58(%rbp),%rax
	mov    0x190(%rax),%edx
	mov    -0x3c(%rbp),%eax
	add    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,0x190(%rax)
	mov    -0x28(%rbp),%rax
	add    $0x10,%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0xf0(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x58(%rbp),%rax
	mov    -0x20(%rbp),%rdx
	mov    %rdx,0xf0(%rax)
	mov    -0x38(%rbp),%rax
	lea    0x1(%rax),%rdi
	mov    -0x58(%rbp),%rdx
	lea    -0x40(%rbp),%rax
	mov    $0x0,%ecx
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x10(%rbp)
	mov    -0x40(%rbp),%eax
	add    $0x1,%eax
	movslq %eax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x58(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,0xf0(%rax)
	mov    -0x10(%rbp),%rax
	jmp    <externalterm_to_term_internal+0x21e>
	mov    -0x3c(%rbp),%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <externalterm_to_term_internal+0x1e9>
	mov    -0x40(%rbp),%edx
	mov    0x1b2c4(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0xd655(%rip),%rcx        # <asso_values.0+0x398>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <externalterm_to_term_internal+0x21e>
	mov    -0x38(%rbp),%rax
	lea    0x1(%rax),%rdi
	mov    -0x58(%rbp),%rdx
	lea    -0x40(%rbp),%rax
	mov    $0x1,%ecx
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x30(%rbp)
	mov    -0x40(%rbp),%eax
	add    $0x1,%eax
	movslq %eax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x30(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <externalterm_to_term_internal+0x232>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<externalterm_to_term>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %ecx,-0x2c(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movq   $0x0,-0x10(%rbp)
	lea    -0x10(%rbp),%rdi
	mov    -0x2c(%rbp),%ecx
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rsi
	mov    -0x18(%rbp),%rax
	mov    $0x0,%r9d
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <externalterm_to_term_internal>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <externalterm_to_term+0x6a>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<externalterm_from_binary>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %r8,-0x48(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	jne    <externalterm_from_binary+0x3a>
	mov    $0x1,%eax
	jmp    <externalterm_from_binary+0x117>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x20(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <externalterm_from_binary+0xa3>
	mov    0x1b169(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x20(%rbp),%rdx
	lea    0xd51e(%rip),%rcx        # <asso_values.0+0x3c0>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x2,%eax
	jmp    <externalterm_from_binary+0x117>
	mov    -0x20(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x40(%rbp),%rcx
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rsi
	mov    -0x10(%rbp),%rax
	mov    $0x1,%r9d
	mov    %rcx,%r8
	mov    $0x0,%ecx
	mov    %rax,%rdi
	call   <externalterm_to_term_internal>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <externalterm_from_binary+0x107>
	mov    $0x1,%eax
	jmp    <externalterm_from_binary+0x117>
	mov    -0x30(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    $0x0,%eax
	leave  
	ret    

<externalterm_from_term>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <compute_external_size>
	lea    0x1(%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <externalterm_from_term+0x92>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    0x1b05b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	lea    0xd44c(%rip),%rcx        # <asso_values.0+0x3f8>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	lea    0x1(%rax),%rcx
	mov    -0x30(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <serialize_term>
	cltq   
	mov    %rax,-0x8(%rbp)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	movb   $0x83,(%rax)
	mov    -0x8(%rbp),%rax
	add    $0x1,%eax
	leave  
	ret    

<externalterm_to_binary>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x40(%rbp),%rcx
	lea    -0x18(%rbp),%rdx
	lea    -0x20(%rbp),%rsi
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <externalterm_from_term>
	mov    -0x18(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	mov    %eax,-0x24(%rbp)
	mov    -0x24(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <externalterm_to_binary+0x99>
	mov    0x1af95(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x24(%rbp),%edx
	lea    0xd323(%rip),%rcx        # <asso_values.0+0x398>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <externalterm_to_binary+0xc5>
	mov    -0x18(%rbp),%rax
	mov    %eax,%ecx
	mov    -0x20(%rbp),%rax
	mov    -0x38(%rbp),%rdx
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	mov    %rax,-0x10(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <externalterm_to_binary+0xd9>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<compute_external_size>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <serialize_term>
	cltq   
	leave  
	ret    

<serialize_term>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xe8,%rsp
	mov    %rdi,-0xd8(%rbp)
	mov    %rsi,-0xe0(%rbp)
	mov    %rdx,-0xe8(%rbp)
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_uint8>
	test   %al,%al
	je     <serialize_term+0x7b>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x71>
	mov    -0xe0(%rbp),%rax
	movb   $0x61,(%rax)
	mov    -0xe0(%rbp),%rax
	lea    0x1(%rax),%rbx
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_uint8>
	mov    %al,(%rbx)
	mov    $0x2,%eax
	jmp    <serialize_term+0x7e3>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <serialize_term+0xdf>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0xd5>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int32>
	mov    %eax,-0xcc(%rbp)
	mov    -0xe0(%rbp),%rax
	movb   $0x62,(%rax)
	mov    -0xcc(%rbp),%eax
	mov    -0xe0(%rbp),%rdx
	add    $0x1,%rdx
	bswap  %eax
	mov    %eax,(%rdx)
	mov    $0x5,%eax
	jmp    <serialize_term+0x7e3>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <serialize_term+0x1d0>
	mov    -0xd8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0xe8(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_atomstring_from_term>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_len>
	cltq   
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x1c4>
	mov    -0xe0(%rbp),%rax
	movb   $0x64,(%rax)
	mov    -0x20(%rbp),%rax
	movzwl %ax,%edx
	mov    -0xe0(%rbp),%rax
	add    $0x1,%rax
	rol    $0x8,%dx
	mov    %dx,(%rax)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <atom_string_data>
	mov    %rax,-0x18(%rbp)
	movq   $0x3,-0xc8(%rbp)
	jmp    <serialize_term+0x1b3>
	mov    -0xc8(%rbp),%rax
	lea    -0x3(%rax),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%edx
	mov    -0xe0(%rbp),%rcx
	mov    -0xc8(%rbp),%rax
	add    %rcx,%rax
	mov    %dl,(%rax)
	addq   $0x1,-0xc8(%rbp)
	mov    -0x20(%rbp),%rax
	add    $0x3,%rax
	cmp    %rax,-0xc8(%rbp)
	jb     <serialize_term+0x183>
	mov    -0x20(%rbp),%rax
	add    $0x3,%eax
	jmp    <serialize_term+0x7e3>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <serialize_term+0x2fd>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cltq   
	mov    %rax,-0x38(%rbp)
	cmpq   $0xff,-0x38(%rbp)
	jbe    <serialize_term+0x22d>
	mov    0x1acf3(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x38(%rbp),%rdx
	lea    0xd118(%rip),%rcx        # <asso_values.0+0x430>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x25b>
	mov    -0xe0(%rbp),%rax
	movb   $0x68,(%rax)
	mov    -0xe0(%rbp),%rax
	add    $0x1,%rax
	mov    -0x38(%rbp),%rdx
	mov    %dl,(%rax)
	movq   $0x2,-0xc0(%rbp)
	movq   $0x0,-0xb8(%rbp)
	jmp    <serialize_term+0x2e4>
	mov    -0xb8(%rbp),%rax
	mov    %eax,%edx
	mov    -0xe8(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x30(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x2b8>
	mov    -0xe0(%rbp),%rdx
	mov    -0xc0(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	jmp    <serialize_term+0x2bd>
	mov    $0x0,%ecx
	mov    -0x30(%rbp),%rdx
	mov    -0xd8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <serialize_term>
	cltq   
	add    %rax,-0xc0(%rbp)
	addq   $0x1,-0xb8(%rbp)
	mov    -0xb8(%rbp),%rax
	cmp    -0x38(%rbp),%rax
	jb     <serialize_term+0x273>
	mov    -0xc0(%rbp),%rax
	jmp    <serialize_term+0x7e3>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <serialize_term+0x337>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x32d>
	mov    -0xe0(%rbp),%rax
	movb   $0x6a,(%rax)
	mov    $0x1,%eax
	jmp    <serialize_term+0x7e3>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_string>
	test   %eax,%eax
	je     <serialize_term+0x44b>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x36b>
	mov    -0xe0(%rbp),%rax
	movb   $0x6b,(%rax)
	movq   $0x0,-0xb0(%rbp)
	movq   $0x3,-0xa8(%rbp)
	mov    -0xe8(%rbp),%rax
	mov    %rax,-0xa0(%rbp)
	jmp    <serialize_term+0x3fd>
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x40(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x3d7>
	mov    -0xe0(%rbp),%rdx
	mov    -0xa8(%rbp),%rax
	lea    (%rdx,%rax,1),%rbx
	mov    -0x40(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_uint8>
	mov    %al,(%rbx)
	addq   $0x1,-0xa8(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0xa0(%rbp)
	addq   $0x1,-0xb0(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <serialize_term+0x391>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x43f>
	mov    -0xb0(%rbp),%rax
	movzwl %ax,%edx
	mov    -0xe0(%rbp),%rax
	add    $0x1,%rax
	rol    $0x8,%dx
	mov    %dx,(%rax)
	mov    -0xa8(%rbp),%rax
	jmp    <serialize_term+0x7e3>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <serialize_term+0x5bf>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x47f>
	mov    -0xe0(%rbp),%rax
	movb   $0x6c,(%rax)
	movq   $0x0,-0x98(%rbp)
	movq   $0x5,-0x90(%rbp)
	mov    -0xe8(%rbp),%rax
	mov    %rax,-0x88(%rbp)
	jmp    <serialize_term+0x521>
	mov    -0x88(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x48(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x4df>
	mov    -0xe0(%rbp),%rdx
	mov    -0x90(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	jmp    <serialize_term+0x4e4>
	mov    $0x0,%ecx
	mov    -0x48(%rbp),%rdx
	mov    -0xd8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <serialize_term>
	cltq   
	add    %rax,-0x90(%rbp)
	mov    -0x88(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x88(%rbp)
	addq   $0x1,-0x98(%rbp)
	mov    -0x88(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <serialize_term+0x4a5>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x55f>
	mov    -0xe0(%rbp),%rdx
	mov    -0x90(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	jmp    <serialize_term+0x564>
	mov    $0x0,%ecx
	mov    -0x88(%rbp),%rdx
	mov    -0xd8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <serialize_term>
	cltq   
	add    %rax,-0x90(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x5b3>
	mov    -0x98(%rbp),%rax
	mov    %eax,%ecx
	mov    -0xe0(%rbp),%rax
	lea    0x1(%rax),%rdx
	mov    %ecx,%eax
	bswap  %eax
	mov    %eax,(%rdx)
	mov    -0x90(%rbp),%rax
	jmp    <serialize_term+0x7e3>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <serialize_term+0x66d>
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x5f3>
	mov    -0xe0(%rbp),%rax
	movb   $0x6d,(%rax)
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x58(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x661>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x50(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %eax,%ecx
	mov    -0xe0(%rbp),%rax
	lea    0x1(%rax),%rdx
	mov    %ecx,%eax
	bswap  %eax
	mov    %eax,(%rdx)
	mov    -0xe0(%rbp),%rax
	lea    0x5(%rax),%rcx
	mov    -0x58(%rbp),%rdx
	mov    -0x50(%rbp),%rax
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x58(%rbp),%rax
	add    $0x5,%eax
	jmp    <serialize_term+0x7e3>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <serialize_term+0x7b9>
	mov    -0xe8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_size>
	cltq   
	mov    %rax,-0x70(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x6cd>
	mov    -0xe0(%rbp),%rax
	movb   $0x74,(%rax)
	mov    -0x70(%rbp),%rax
	mov    %eax,%ecx
	mov    -0xe0(%rbp),%rax
	lea    0x1(%rax),%rdx
	mov    %ecx,%eax
	bswap  %eax
	mov    %eax,(%rdx)
	movq   $0x5,-0x80(%rbp)
	movq   $0x0,-0x78(%rbp)
	jmp    <serialize_term+0x7a5>
	mov    -0x78(%rbp),%rdx
	mov    -0xe8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_key>
	mov    %rax,-0x68(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x720>
	mov    -0xe0(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	jmp    <serialize_term+0x725>
	mov    $0x0,%ecx
	mov    -0x68(%rbp),%rdx
	mov    -0xd8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <serialize_term>
	cltq   
	add    %rax,-0x80(%rbp)
	mov    -0x78(%rbp),%rdx
	mov    -0xe8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	mov    %rax,-0x60(%rbp)
	cmpq   $0x0,-0xe0(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <serialize_term+0x77f>
	mov    -0xe0(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	jmp    <serialize_term+0x784>
	mov    $0x0,%ecx
	mov    -0x60(%rbp),%rdx
	mov    -0xd8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <serialize_term>
	cltq   
	add    %rax,-0x80(%rbp)
	addq   $0x1,-0x78(%rbp)
	mov    -0x78(%rbp),%rax
	cmp    -0x70(%rbp),%rax
	jb     <serialize_term+0x6e2>
	mov    -0x80(%rbp),%rax
	jmp    <serialize_term+0x7e3>
	mov    0x1a740(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0xe8(%rbp),%rdx
	lea    0xcb8a(%rip),%rcx        # <asso_values.0+0x458>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<parse_external_terms>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xe0,%rsp
	mov    %rdi,-0xc8(%rbp)
	mov    %rsi,-0xd0(%rbp)
	mov    %rdx,-0xd8(%rbp)
	mov    %ecx,-0xdc(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0xc8(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	sub    $0x46,%eax
	cmp    $0x31,%eax
	ja     <parse_external_terms+0x769>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0xcb30(%rip),%rax        # <asso_values.0+0x47c>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0xcb24(%rip),%rdx        # <asso_values.0+0x47c>
	add    %rdx,%rax
	notrack jmp *%rax
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%rax
	bswap  %rax
	mov    %rax,-0x78(%rbp)
	mov    -0xd0(%rbp),%rax
	movl   $0x9,(%rax)
	mov    -0x78(%rbp),%rax
	mov    -0xd8(%rbp),%rdx
	mov    %rdx,%rdi
	movq   %rax,%xmm0
	call   <term_from_float>
	jmp    <parse_external_terms+0x773>
	mov    -0xd0(%rbp),%rax
	movl   $0x2,(%rax)
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int11>
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x7c(%rbp)
	mov    -0xd0(%rbp),%rax
	movl   $0x5,(%rax)
	mov    -0x7c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xd8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_make_maybe_boxed_int64>
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	movzwl (%rax),%eax
	movzwl %ax,%eax
	rol    $0x8,%ax
	mov    %ax,-0xb2(%rbp)
	mov    -0xc8(%rbp),%rax
	lea    0x2(%rax),%rcx
	mov    -0xd8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0xdc(%rbp),%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom_maybe_copy>
	mov    %eax,-0x80(%rbp)
	movzwl -0xb2(%rbp),%eax
	lea    0x3(%rax),%edx
	mov    -0xd0(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x80(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_atom_index>
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	mov    %al,-0xb5(%rbp)
	movzbl -0xb5(%rbp),%eax
	mov    -0xd8(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_alloc_tuple>
	mov    %rax,-0x18(%rbp)
	movl   $0x2,-0xac(%rbp)
	movl   $0x0,-0xa8(%rbp)
	jmp    <parse_external_terms+0x23d>
	mov    -0xac(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc8(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0xdc(%rbp),%ecx
	mov    -0xd8(%rbp),%rdx
	lea    -0x78(%rbp),%rax
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <parse_external_terms+0x215>
	mov    -0x10(%rbp),%rax
	jmp    <parse_external_terms+0x773>
	mov    -0xa8(%rbp),%ecx
	mov    -0x10(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_put_tuple_element>
	mov    -0x78(%rbp),%eax
	add    %eax,-0xac(%rbp)
	addl   $0x1,-0xa8(%rbp)
	movzbl -0xb5(%rbp),%eax
	cmp    %eax,-0xa8(%rbp)
	jl     <parse_external_terms+0x1cb>
	mov    -0xd0(%rbp),%rax
	mov    -0xac(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x18(%rbp),%rax
	jmp    <parse_external_terms+0x773>
	mov    -0xd0(%rbp),%rax
	movl   $0x1,(%rax)
	mov    $0x0,%eax
	call   <term_nil>
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	movzwl (%rax),%eax
	movzwl %ax,%eax
	rol    $0x8,%ax
	mov    %ax,-0xb4(%rbp)
	movzwl -0xb4(%rbp),%eax
	lea    0x3(%rax),%edx
	mov    -0xd0(%rbp),%rax
	mov    %edx,(%rax)
	movzwl -0xb4(%rbp),%eax
	mov    -0xc8(%rbp),%rdx
	lea    0x3(%rdx),%rcx
	mov    -0xd8(%rbp),%rdx
	mov    %eax,%esi
	mov    %rcx,%rdi
	call   <term_from_string>
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x84(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,-0x70(%rbp)
	movq   $0x0,-0x68(%rbp)
	movl   $0x5,-0xa4(%rbp)
	movl   $0x0,-0xa0(%rbp)
	jmp    <parse_external_terms+0x3cf>
	mov    -0xa4(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc8(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0xdc(%rbp),%ecx
	mov    -0xd8(%rbp),%rdx
	lea    -0x78(%rbp),%rax
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <parse_external_terms+0x369>
	mov    -0x28(%rbp),%rax
	jmp    <parse_external_terms+0x773>
	mov    -0xd8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_alloc>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x68(%rbp)
	je     <parse_external_terms+0x398>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_from_list_ptr>
	mov    -0x68(%rbp),%rdx
	mov    %rax,(%rdx)
	jmp    <parse_external_terms+0x3a8>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_list_from_list_ptr>
	mov    %rax,-0x70(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,-0x68(%rbp)
	mov    -0x20(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x78(%rbp),%eax
	add    %eax,-0xa4(%rbp)
	addl   $0x1,-0xa0(%rbp)
	mov    -0xa0(%rbp),%eax
	cmp    -0x84(%rbp),%eax
	jb     <parse_external_terms+0x31f>
	cmpq   $0x0,-0x68(%rbp)
	je     <parse_external_terms+0x446>
	mov    -0xa4(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc8(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0xdc(%rbp),%ecx
	mov    -0xd8(%rbp),%rdx
	lea    -0x78(%rbp),%rax
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <parse_external_terms+0x432>
	mov    -0x30(%rbp),%rax
	jmp    <parse_external_terms+0x773>
	mov    -0x68(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x78(%rbp),%eax
	add    %eax,-0xa4(%rbp)
	mov    -0xd0(%rbp),%rax
	mov    -0xa4(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x70(%rbp),%rax
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x88(%rbp)
	mov    -0x88(%rbp),%eax
	add    $0x5,%eax
	mov    %eax,%edx
	mov    -0xd0(%rbp),%rax
	mov    %edx,(%rax)
	cmpl   $0x0,-0xdc(%rbp)
	je     <parse_external_terms+0x4b7>
	mov    -0xc8(%rbp),%rax
	lea    0x5(%rax),%rcx
	mov    -0xd8(%rbp),%rdx
	mov    -0x88(%rbp),%eax
	mov    %eax,%esi
	mov    %rcx,%rdi
	call   <term_from_literal_binary>
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	lea    0x5(%rax),%rcx
	mov    -0xd8(%rbp),%rdx
	mov    -0x88(%rbp),%eax
	mov    %eax,%esi
	mov    %rcx,%rdi
	call   <term_from_const_binary>
	jmp    <parse_external_terms+0x773>
	movl   $0x1,-0x8c(%rbp)
	mov    -0x8c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc8(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0xdc(%rbp),%ecx
	mov    -0xd8(%rbp),%rdx
	lea    -0x78(%rbp),%rax
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x48(%rbp)
	mov    -0x78(%rbp),%eax
	add    %eax,-0x8c(%rbp)
	mov    -0x8c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc8(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0xdc(%rbp),%ecx
	mov    -0xd8(%rbp),%rdx
	lea    -0x78(%rbp),%rax
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x40(%rbp)
	mov    -0x78(%rbp),%eax
	add    %eax,-0x8c(%rbp)
	mov    -0x8c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc8(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0xdc(%rbp),%ecx
	mov    -0xd8(%rbp),%rdx
	lea    -0x78(%rbp),%rax
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x38(%rbp)
	mov    -0x78(%rbp),%eax
	add    %eax,-0x8c(%rbp)
	mov    -0xd0(%rbp),%rax
	mov    -0x8c(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0xd8(%rbp),%rcx
	mov    -0x38(%rbp),%rdx
	mov    -0x40(%rbp),%rsi
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_make_function_reference>
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x90(%rbp)
	mov    -0x90(%rbp),%edx
	mov    -0xd8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_map>
	mov    %rax,-0x60(%rbp)
	movl   $0x5,-0x9c(%rbp)
	movl   $0x0,-0x98(%rbp)
	jmp    <parse_external_terms+0x6dc>
	mov    -0x9c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc8(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0xdc(%rbp),%ecx
	mov    -0xd8(%rbp),%rdx
	lea    -0xb0(%rbp),%rax
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <parse_external_terms+0x65c>
	mov    -0x58(%rbp),%rax
	jmp    <parse_external_terms+0x773>
	mov    -0xb0(%rbp),%eax
	add    %eax,-0x9c(%rbp)
	mov    -0x9c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0xc8(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0xdc(%rbp),%ecx
	mov    -0xd8(%rbp),%rdx
	lea    -0x78(%rbp),%rax
	mov    %rax,%rsi
	call   <parse_external_terms>
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <parse_external_terms+0x6b2>
	mov    -0x50(%rbp),%rax
	jmp    <parse_external_terms+0x773>
	mov    -0x78(%rbp),%eax
	add    %eax,-0x9c(%rbp)
	mov    -0x98(%rbp),%esi
	mov    -0x50(%rbp),%rcx
	mov    -0x58(%rbp),%rdx
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <term_set_map_assoc>
	addl   $0x1,-0x98(%rbp)
	mov    -0x98(%rbp),%eax
	cmp    -0x90(%rbp),%eax
	jb     <parse_external_terms+0x60f>
	mov    -0xd0(%rbp),%rax
	mov    -0x9c(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x60(%rbp),%rax
	jmp    <parse_external_terms+0x773>
	mov    -0xc8(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	mov    %al,-0xb6(%rbp)
	mov    -0xc8(%rbp),%rax
	lea    0x1(%rax),%rcx
	mov    -0xd8(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0xdc(%rbp),%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom_maybe_copy>
	mov    %eax,-0x94(%rbp)
	movzbl -0xb6(%rbp),%eax
	lea    0x2(%rax),%edx
	mov    -0xd0(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x94(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_atom_index>
	jmp    <parse_external_terms+0x773>
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <parse_external_terms+0x787>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<calculate_heap_usage>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xa0,%rsp
	mov    %rdi,-0x78(%rbp)
	mov    %rsi,-0x80(%rbp)
	mov    %rdx,-0x88(%rbp)
	mov    %ecx,%eax
	mov    %r8,-0x98(%rbp)
	mov    %al,-0x8c(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	cmpq   $0x0,-0x80(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x56>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x78(%rbp),%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	sub    $0x46,%eax
	cmp    $0x31,%eax
	ja     <calculate_heap_usage+0x84b>
	mov    %eax,%eax
	lea    0x0(,%rax,4),%rdx
	lea    0xc455(%rip),%rax        # <asso_values.0+0x544>
	mov    (%rdx,%rax,1),%eax
	cltq   
	lea    0xc449(%rip),%rdx        # <asso_values.0+0x544>
	add    %rdx,%rax
	notrack jmp *%rax
	cmpq   $0x8,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0xa9>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x88(%rbp),%rax
	movl   $0x9,(%rax)
	mov    $0x2,%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x1,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0xda>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x88(%rbp),%rax
	movl   $0x2,(%rax)
	mov    $0x0,%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x4,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x10b>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x78(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0xc(%rbp)
	mov    -0x88(%rbp),%rax
	movl   $0x5,(%rax)
	mov    -0xc(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_boxed_integer_size>
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x2,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x153>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x78(%rbp),%rax
	add    $0x1,%rax
	movzwl (%rax),%eax
	movzwl %ax,%eax
	rol    $0x8,%ax
	mov    %ax,-0x6a(%rbp)
	subq   $0x3,-0x80(%rbp)
	movzwl -0x6a(%rbp),%eax
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x18b>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	movzwl -0x6a(%rbp),%eax
	lea    0x3(%rax),%edx
	mov    -0x88(%rbp),%rax
	mov    %edx,(%rax)
	mov    $0x0,%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x0,-0x80(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x1bf>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	subq   $0x1,-0x80(%rbp)
	mov    -0x78(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	mov    %al,-0x6d(%rbp)
	movzbl -0x6d(%rbp),%eax
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x1ef>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	movl   $0x1,-0x60(%rbp)
	movl   $0x2,-0x5c(%rbp)
	movl   $0x0,-0x58(%rbp)
	jmp    <calculate_heap_usage+0x296>
	movl   $0x0,-0x64(%rbp)
	movzbl -0x8c(%rbp),%ecx
	mov    -0x5c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x78(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0x98(%rbp),%rsi
	lea    -0x64(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	mov    %rsi,%r8
	mov    %rax,%rsi
	call   <calculate_heap_usage>
	mov    %eax,-0x10(%rbp)
	cmpl   $0xffffffff,-0x10(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x25b>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	addl   $0x1,-0x10(%rbp)
	mov    -0x64(%rbp),%eax
	cltq   
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x27d>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x64(%rbp),%eax
	cltq   
	sub    %rax,-0x80(%rbp)
	mov    -0x10(%rbp),%eax
	add    %eax,-0x60(%rbp)
	mov    -0x64(%rbp),%eax
	add    %eax,-0x5c(%rbp)
	addl   $0x1,-0x58(%rbp)
	movzbl -0x6d(%rbp),%eax
	cmp    %eax,-0x58(%rbp)
	jl     <calculate_heap_usage+0x209>
	mov    -0x88(%rbp),%rax
	mov    -0x5c(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x60(%rbp),%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x0,-0x80(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x2d1>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x88(%rbp),%rax
	movl   $0x1,(%rax)
	mov    $0x0,%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x2,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x302>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x78(%rbp),%rax
	add    $0x1,%rax
	movzwl (%rax),%eax
	movzwl %ax,%eax
	rol    $0x8,%ax
	mov    %ax,-0x6c(%rbp)
	subq   $0x3,-0x80(%rbp)
	movzwl -0x6c(%rbp),%eax
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x33a>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	movzwl -0x6c(%rbp),%eax
	lea    0x3(%rax),%edx
	mov    -0x88(%rbp),%rax
	mov    %edx,(%rax)
	movzwl -0x6c(%rbp),%eax
	add    %eax,%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x4,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x36f>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x78(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x1c(%rbp)
	subq   $0x5,-0x80(%rbp)
	mov    -0x1c(%rbp),%eax
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x39f>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	movl   $0x5,-0x54(%rbp)
	movl   $0x0,-0x50(%rbp)
	movl   $0x0,-0x4c(%rbp)
	jmp    <calculate_heap_usage+0x446>
	movl   $0x0,-0x64(%rbp)
	movzbl -0x8c(%rbp),%ecx
	mov    -0x54(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x78(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0x98(%rbp),%rsi
	lea    -0x64(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	mov    %rsi,%r8
	mov    %rax,%rsi
	call   <calculate_heap_usage>
	mov    %eax,-0x14(%rbp)
	cmpl   $0xffffffff,-0x14(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x40b>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	addl   $0x2,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	add    %eax,-0x50(%rbp)
	mov    -0x64(%rbp),%eax
	add    %eax,-0x54(%rbp)
	mov    -0x64(%rbp),%eax
	cltq   
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x439>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x64(%rbp),%eax
	cltq   
	sub    %rax,-0x80(%rbp)
	addl   $0x1,-0x4c(%rbp)
	mov    -0x4c(%rbp),%eax
	cmp    -0x1c(%rbp),%eax
	jb     <calculate_heap_usage+0x3b9>
	movl   $0x0,-0x64(%rbp)
	movzbl -0x8c(%rbp),%ecx
	mov    -0x54(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x78(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0x98(%rbp),%rsi
	lea    -0x64(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	mov    %rsi,%r8
	mov    %rax,%rsi
	call   <calculate_heap_usage>
	mov    %eax,-0x18(%rbp)
	cmpl   $0xffffffff,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x4a4>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x18(%rbp),%eax
	add    %eax,-0x50(%rbp)
	mov    -0x64(%rbp),%eax
	add    %eax,-0x54(%rbp)
	mov    -0x64(%rbp),%eax
	cltq   
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x4ce>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x88(%rbp),%rax
	mov    -0x54(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x50(%rbp),%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x4,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x4fc>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x78(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x24(%rbp)
	subq   $0x5,-0x80(%rbp)
	mov    -0x24(%rbp),%eax
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x52c>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x24(%rbp),%eax
	add    $0x5,%eax
	mov    %eax,%edx
	mov    -0x88(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x24(%rbp),%eax
	add    $0x7,%eax
	shr    $0x3,%eax
	mov    %eax,-0x20(%rbp)
	cmpb   $0x0,-0x8c(%rbp)
	je     <calculate_heap_usage+0x56b>
	mov    -0x24(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <calculate_heap_usage+0x56b>
	mov    -0x20(%rbp),%eax
	add    $0x2,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    $0x6,%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x0,-0x80(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x58f>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	movl   $0x1,-0x48(%rbp)
	movl   $0x1,-0x44(%rbp)
	movl   $0x0,-0x40(%rbp)
	jmp    <calculate_heap_usage+0x636>
	movl   $0x0,-0x64(%rbp)
	movzbl -0x8c(%rbp),%ecx
	mov    -0x44(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x78(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0x98(%rbp),%rsi
	lea    -0x64(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	mov    %rsi,%r8
	mov    %rax,%rsi
	call   <calculate_heap_usage>
	mov    %eax,-0x28(%rbp)
	cmpl   $0xffffffff,-0x28(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x5fb>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	addl   $0x1,-0x28(%rbp)
	mov    -0x28(%rbp),%eax
	add    %eax,-0x48(%rbp)
	mov    -0x64(%rbp),%eax
	add    %eax,-0x44(%rbp)
	mov    -0x64(%rbp),%eax
	cltq   
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x629>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x64(%rbp),%eax
	cltq   
	sub    %rax,-0x80(%rbp)
	addl   $0x1,-0x40(%rbp)
	cmpl   $0x2,-0x40(%rbp)
	jle    <calculate_heap_usage+0x5a9>
	mov    -0x88(%rbp),%rax
	mov    -0x44(%rbp),%edx
	mov    %edx,(%rax)
	mov    $0x4,%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x4,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x670>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x78(%rbp),%rax
	add    $0x1,%rax
	mov    (%rax),%eax
	bswap  %eax
	mov    %eax,-0x30(%rbp)
	subq   $0x5,-0x80(%rbp)
	mov    -0x30(%rbp),%eax
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x6a0>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	movl   $0x1,-0x3c(%rbp)
	movl   $0x5,-0x38(%rbp)
	movl   $0x0,-0x34(%rbp)
	jmp    <calculate_heap_usage+0x7d0>
	movl   $0x0,-0x68(%rbp)
	movzbl -0x8c(%rbp),%ecx
	mov    -0x38(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x78(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0x98(%rbp),%rsi
	lea    -0x68(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	mov    %rsi,%r8
	mov    %rax,%rsi
	call   <calculate_heap_usage>
	mov    %eax,-0x2c(%rbp)
	cmpl   $0xffffffff,-0x2c(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x70c>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	addl   $0x1,-0x2c(%rbp)
	mov    -0x2c(%rbp),%eax
	add    %eax,-0x3c(%rbp)
	mov    -0x68(%rbp),%eax
	add    %eax,-0x38(%rbp)
	mov    -0x68(%rbp),%eax
	cltq   
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x73a>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x68(%rbp),%eax
	cltq   
	sub    %rax,-0x80(%rbp)
	movl   $0x0,-0x64(%rbp)
	movzbl -0x8c(%rbp),%ecx
	mov    -0x38(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x78(%rbp),%rax
	lea    (%rdx,%rax,1),%rdi
	mov    -0x98(%rbp),%rsi
	lea    -0x64(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	mov    %rsi,%r8
	mov    %rax,%rsi
	call   <calculate_heap_usage>
	mov    %eax,-0x2c(%rbp)
	cmpl   $0xffffffff,-0x2c(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x795>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	addl   $0x1,-0x2c(%rbp)
	mov    -0x2c(%rbp),%eax
	add    %eax,-0x3c(%rbp)
	mov    -0x64(%rbp),%eax
	add    %eax,-0x38(%rbp)
	mov    -0x64(%rbp),%eax
	cltq   
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x7c3>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x64(%rbp),%eax
	cltq   
	sub    %rax,-0x80(%rbp)
	addl   $0x1,-0x34(%rbp)
	mov    -0x34(%rbp),%eax
	cmp    -0x30(%rbp),%eax
	jb     <calculate_heap_usage+0x6ba>
	mov    -0x88(%rbp),%rax
	mov    -0x38(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x3c(%rbp),%eax
	add    $0x3,%eax
	jmp    <calculate_heap_usage+0x850>
	cmpq   $0x1,-0x80(%rbp)
	setbe  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x807>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    -0x78(%rbp),%rax
	add    $0x1,%rax
	movzbl (%rax),%eax
	mov    %al,-0x6e(%rbp)
	subq   $0x2,-0x80(%rbp)
	movzbl -0x6e(%rbp),%eax
	cmp    %rax,-0x80(%rbp)
	setb   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <calculate_heap_usage+0x834>
	mov    $0xffffffff,%eax
	jmp    <calculate_heap_usage+0x850>
	movzbl -0x6e(%rbp),%eax
	lea    0x2(%rax),%edx
	mov    -0x88(%rbp),%rax
	mov    %edx,(%rax)
	mov    $0x0,%eax
	jmp    <calculate_heap_usage+0x850>
	mov    $0xffffffff,%eax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <calculate_heap_usage+0x864>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<term_to_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_atom>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0xb,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nonempty_list>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x1,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_list>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_is_list+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_is_list+0x33>
	mov    $0x1,%eax
	jmp    <term_is_list+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_get_size_from_boxed_header>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_is_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	jne    <term_is_binary+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    $0x28,%eax
	seta   %dl
	test   %dl,%dl
	jne    <term_is_binary+0x69>
	movabs $0x11100000000,%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	test   %al,%al
	je     <term_is_binary+0x69>
	mov    $0x1,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_refc_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_refc_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x20,-0xc(%rbp)
	sete   %al
	jmp    <term_is_refc_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_refc_binary_is_const>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	leave  
	ret    

<term_is_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_sub_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x28,-0xc(%rbp)
	sete   %al
	jmp    <term_is_sub_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_uint8>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffff00f,%rax
	cmp    $0xf,%rax
	sete   %al
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x3b,%eax
	pop    %rbp
	ret    

<term_to_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x6,%rax
	pop    %rbp
	ret    

<term_to_uint8>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shr    $0x4,%ax
	pop    %rbp
	ret    

<term_to_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%rax
	pop    %rbp
	ret    

<term_binary_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_binary_data+0x5e>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	test   %al,%al
	je     <term_binary_data+0x49>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <refc_binary_get_data>
	jmp    <term_binary_data+0x9c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	je     <term_binary_data+0x94>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	add    %rdx,%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_arity>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_get_size_from_boxed_header>
	leave  
	ret    

<term_get_list_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffe,%rax
	pop    %rbp
	ret    

<term_get_list_head>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	leave  
	ret    

<term_get_list_tail>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_list_length>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	movl   $0x0,-0x4(%rbp)
	jmp    <term_list_length+0x2d>
	addl   $0x1,-0x4(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_list_length+0x19>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	mov    -0x20(%rbp),%rdx
	mov    %eax,(%rdx)
	mov    -0x4(%rbp),%eax
	leave  
	ret    

<term_equals>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jne    <term_equals+0x25>
	mov    $0x1,%eax
	jmp    <term_equals+0x44>
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_compare>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	leave  
	ret    

<term_is_map>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_map+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x3c,%rax
	jne    <term_is_map+0x43>
	mov    $0x1,%eax
	jmp    <term_is_map+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_get_map_keys_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	pop    %rbp
	ret    

<term_get_map_value_offset>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	pop    %rbp
	ret    

<term_get_map_keys>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_keys_offset>
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_map_value>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    $0x0,%eax
	call   <term_get_map_value_offset>
	mov    -0x20(%rbp),%rdx
	add    %rdx,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_find_map_pos>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_map_keys>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	mov    %eax,-0x14(%rbp)
	movl   $0x0,-0x18(%rbp)
	jmp    <term_find_map_pos+0x75>
	mov    -0x18(%rbp),%edx
	mov    -0x10(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x8(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x38(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_equals>
	test   %eax,%eax
	je     <term_find_map_pos+0x71>
	mov    -0x18(%rbp),%eax
	jmp    <term_find_map_pos+0x82>
	addl   $0x1,-0x18(%rbp)
	mov    -0x18(%rbp),%eax
	cmp    -0x14(%rbp),%eax
	jl     <term_find_map_pos+0x3c>
	mov    $0xffffffff,%eax
	leave  
	ret    

<globalcontext_is_term_equal_to_atom_string>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	jne    <globalcontext_is_term_equal_to_atom_string+0x2b>
	mov    $0x0,%eax
	jmp    <globalcontext_is_term_equal_to_atom_string+0x4f>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_atom_index>
	mov    %eax,-0x4(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x4(%rbp),%ecx
	mov    -0x18(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <globalcontext_is_atom_index_equal_to_atom_string>
	leave  
	ret    

<temp_stack_init>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movl   $0x8,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	add    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	nop
	leave  
	ret    

<temp_stack_destory>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	add    %rdx,%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<temp_stack_grow>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %eax,-0x18(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%eax
	add    %eax,%eax
	mov    %eax,-0x14(%rbp)
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,%rdx
	mov    -0x14(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	add    %rdx,%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%eax
	cltq   
	shl    $0x3,%rax
	neg    %rax
	add    %rdx,%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x28(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x14(%rbp),%edx
	mov    %edx,0x10(%rax)
	nop
	leave  
	ret    

<temp_stack_is_empty>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	cmp    %rax,%rdx
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<temp_stack_push>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	sar    $0x3,%rax
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%eax
	sub    $0x1,%eax
	cltq   
	cmp    %rax,%rdx
	jne    <temp_stack_push+0x49>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_grow>
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	lea    -0x8(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	leave  
	ret    

<temp_stack_pop>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x8(%rax),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	pop    %rbp
	ret    

<interop_term_to_string>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <interop_term_to_string+0x39>
	mov    -0x20(%rbp),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_list_to_string>
	jmp    <interop_term_to_string+0x7f>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <interop_term_to_string+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <interop_binary_to_string>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	setne  %al
	movzbl %al,%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,(%rax)
	mov    -0x8(%rbp),%rax
	jmp    <interop_term_to_string+0x7f>
	mov    -0x20(%rbp),%rax
	movl   $0x0,(%rax)
	mov    $0x0,%eax
	leave  
	ret    

<interop_binary_to_string>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x28,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x1c(%rbp)
	mov    -0x1c(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <interop_binary_to_string+0x4b>
	mov    $0x0,%eax
	jmp    <interop_binary_to_string+0x86>
	mov    -0x1c(%rbp),%eax
	movslq %eax,%rbx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x18(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x1c(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	movb   $0x0,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<interop_list_to_string>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	lea    -0x2c(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_list_length>
	mov    %eax,-0x24(%rbp)
	mov    -0x2c(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <interop_list_to_string+0x5d>
	mov    -0x40(%rbp),%rax
	movl   $0x0,(%rax)
	mov    $0x0,%eax
	jmp    <interop_list_to_string+0x17e>
	mov    -0x24(%rbp),%eax
	add    $0x1,%eax
	cltq   
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <interop_list_to_string+0x8b>
	mov    $0x0,%eax
	jmp    <interop_list_to_string+0x17e>
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	movl   $0x0,-0x28(%rbp)
	jmp    <interop_list_to_string+0x154>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <interop_list_to_string+0xe8>
	mov    -0x40(%rbp),%rax
	movl   $0x0,(%rax)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <interop_list_to_string+0x17e>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_uint8>
	test   %al,%al
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <interop_list_to_string+0x11e>
	mov    -0x40(%rbp),%rax
	movl   $0x0,(%rax)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <interop_list_to_string+0x17e>
	mov    -0x10(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_uint8>
	mov    %al,-0x2d(%rbp)
	mov    -0x28(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rax,%rdx
	movzbl -0x2d(%rbp),%eax
	mov    %al,(%rdx)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,-0x20(%rbp)
	addl   $0x1,-0x28(%rbp)
	mov    -0x28(%rbp),%eax
	cmp    -0x24(%rbp),%eax
	jl     <interop_list_to_string+0x9f>
	mov    -0x24(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	movb   $0x0,(%rax)
	mov    -0x40(%rbp),%rax
	movl   $0x1,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <interop_list_to_string+0x192>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<interop_proplist_get_value>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	leave  
	ret    

<interop_proplist_get_value_default>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	jmp    <interop_proplist_get_value_default+0xc1>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_ptr>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <interop_proplist_get_value_default+0x95>
	mov    -0x8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	cmp    %rax,-0x30(%rbp)
	jne    <interop_proplist_get_value_default+0x95>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_tuple_arity>
	cmp    $0x2,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	jne    <interop_proplist_get_value_default+0xd7>
	mov    -0x8(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	jmp    <interop_proplist_get_value_default+0xdc>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_atom>
	test   %eax,%eax
	je     <interop_proplist_get_value_default+0xb6>
	mov    -0x8(%rbp),%rax
	cmp    -0x30(%rbp),%rax
	jne    <interop_proplist_get_value_default+0xb6>
	mov    $0x4b,%eax
	jmp    <interop_proplist_get_value_default+0xdc>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <interop_proplist_get_value_default+0x25>
	jmp    <interop_proplist_get_value_default+0xd8>
	nop
	mov    -0x38(%rbp),%rax
	leave  
	ret    

<interop_iolist_size>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <interop_iolist_size+0x4e>
	mov    -0x40(%rbp),%rax
	movl   $0x1,(%rax)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	jmp    <interop_iolist_size+0x1b3>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <interop_iolist_size+0x7b>
	mov    -0x40(%rbp),%rax
	movl   $0x0,(%rax)
	mov    $0x0,%eax
	jmp    <interop_iolist_size+0x1b3>
	movq   $0x0,-0x28(%rbp)
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_init>
	mov    -0x38(%rbp),%rdx
	lea    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	jmp    <interop_iolist_size+0x185>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <interop_iolist_size+0xd1>
	addq   $0x1,-0x28(%rbp)
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x38(%rbp)
	jmp    <interop_iolist_size+0x185>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <interop_iolist_size+0xf6>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x38(%rbp)
	jmp    <interop_iolist_size+0x185>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <interop_iolist_size+0x136>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,%rdx
	lea    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x38(%rbp)
	jmp    <interop_iolist_size+0x185>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <interop_iolist_size+0x168>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	add    %rax,-0x28(%rbp)
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x38(%rbp)
	jmp    <interop_iolist_size+0x185>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_destory>
	mov    -0x40(%rbp),%rax
	movl   $0x0,(%rax)
	mov    $0x0,%eax
	jmp    <interop_iolist_size+0x1b3>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_is_empty>
	test   %eax,%eax
	je     <interop_iolist_size+0xa7>
	lea    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_destory>
	mov    -0x40(%rbp),%rax
	movl   $0x1,(%rax)
	mov    -0x28(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <interop_iolist_size+0x1c7>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<interop_write_iolist>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <interop_write_iolist+0x74>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x34(%rbp)
	mov    -0x34(%rbp),%eax
	movslq %eax,%rbx
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x50(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    $0x1,%eax
	jmp    <interop_write_iolist+0x1d4>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_init>
	mov    -0x48(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	jmp    <interop_write_iolist+0x1af>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	je     <interop_write_iolist+0xd6>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %eax,%edx
	mov    -0x50(%rbp),%rax
	mov    %dl,(%rax)
	addq   $0x1,-0x50(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x48(%rbp)
	jmp    <interop_write_iolist+0x1af>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <interop_write_iolist+0xfb>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x48(%rbp)
	jmp    <interop_write_iolist+0x1af>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <interop_write_iolist+0x13b>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_tail>
	mov    %rax,%rdx
	lea    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <temp_stack_push>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_get_list_head>
	mov    %rax,-0x48(%rbp)
	jmp    <interop_write_iolist+0x1af>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <interop_write_iolist+0x19c>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %eax,-0x38(%rbp)
	mov    -0x38(%rbp),%eax
	movslq %eax,%rbx
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x50(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <memcpy@plt>
	mov    -0x38(%rbp),%eax
	cltq   
	add    %rax,-0x50(%rbp)
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_pop>
	mov    %rax,-0x48(%rbp)
	jmp    <interop_write_iolist+0x1af>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_destory>
	mov    $0x0,%eax
	jmp    <interop_write_iolist+0x1d4>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_is_empty>
	test   %eax,%eax
	je     <interop_write_iolist+0x98>
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <temp_stack_destory>
	mov    $0x1,%eax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <interop_write_iolist+0x1e8>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<interop_map_get_value>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    $0x0,%eax
	call   <term_nil>
	mov    %rax,%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rsi
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <interop_map_get_value_default>
	leave  
	ret    

<interop_map_get_value_default>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_find_map_pos>
	mov    %eax,-0x4(%rbp)
	cmpl   $0xffffffff,-0x4(%rbp)
	jne    <interop_map_get_value_default+0x42>
	mov    -0x30(%rbp),%rax
	jmp    <interop_map_get_value_default+0x57>
	mov    -0x4(%rbp),%eax
	movslq %eax,%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_get_map_value>
	leave  
	ret    

<interop_atom_term_select_int>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	movl   $0x0,-0x4(%rbp)
	jmp    <interop_atom_term_select_int+0x6a>
	mov    -0x4(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rdx
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_is_term_equal_to_atom_string>
	test   %al,%al
	je     <interop_atom_term_select_int+0x66>
	mov    -0x4(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    0x8(%rax),%eax
	jmp    <interop_atom_term_select_int+0x9b>
	addl   $0x1,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	test   %rax,%rax
	jne    <interop_atom_term_select_int+0x21>
	mov    -0x4(%rbp),%eax
	cltq   
	shl    $0x4,%rax
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    0x8(%rax),%eax
	leave  
	ret    

<interop_kv_get_value_default>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    -0x20(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_existing_term_from_atom_string>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <interop_kv_get_value_default+0x49>
	mov    -0x28(%rbp),%rax
	jmp    <interop_kv_get_value_default+0x9f>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	je     <interop_kv_get_value_default+0x72>
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	jmp    <interop_kv_get_value_default+0x9f>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_map>
	test   %eax,%eax
	je     <interop_kv_get_value_default+0x9b>
	mov    -0x28(%rbp),%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x18(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	jmp    <interop_kv_get_value_default+0x9f>
	mov    -0x28(%rbp),%rax
	leave  
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<sys_consume_pending_events>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	test   %rax,%rax
	je     <sys_consume_pending_events+0x25a>
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x30(%rbp)
	movl   $0x0,-0x48(%rbp)
	mov    -0x30(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,-0x3c(%rbp)
	cmpl   $0x0,-0x3c(%rbp)
	js     <sys_consume_pending_events+0x65>
	addl   $0x1,-0x48(%rbp)
	mov    -0x30(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	je     <sys_consume_pending_events+0x81>
	mov    -0x30(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jne    <sys_consume_pending_events+0x51>
	cmpl   $0x0,-0x48(%rbp)
	je     <sys_consume_pending_events+0x25d>
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x48(%rbp),%eax
	cltq   
	shl    $0x3,%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	movl   $0x0,-0x44(%rbp)
	mov    -0x30(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,-0x38(%rbp)
	cmpl   $0x0,-0x38(%rbp)
	js     <sys_consume_pending_events+0x118>
	mov    -0x44(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rax,%rdx
	mov    -0x38(%rbp),%eax
	mov    %eax,(%rdx)
	mov    -0x44(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	movw   $0x1,0x4(%rax)
	mov    -0x44(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	movw   $0x0,0x6(%rax)
	addl   $0x1,-0x44(%rbp)
	mov    -0x30(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	je     <sys_consume_pending_events+0x134>
	mov    -0x30(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jne    <sys_consume_pending_events+0xb7>
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x44(%rbp),%eax
	movslq %eax,%rcx
	mov    -0x8(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <poll@plt>
	test   %eax,%eax
	jle    <sys_consume_pending_events+0x24c>
	movl   $0x0,-0x40(%rbp)
	jmp    <sys_consume_pending_events+0x240>
	mov    -0x40(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	movzwl 0x6(%rax),%edx
	mov    -0x40(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    -0x8(%rbp),%rax
	add    %rcx,%rax
	movzwl 0x4(%rax),%eax
	and    %edx,%eax
	test   %ax,%ax
	je     <sys_consume_pending_events+0x23b>
	mov    -0x40(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%eax
	mov    %eax,-0x34(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %rax,-0x28(%rbp)
	cmpq   $0x0,-0x28(%rbp)
	jne    <sys_consume_pending_events+0x1fe>
	mov    0x18310(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x17,%edx
	mov    $0x1,%esi
	lea    0xa908(%rip),%rax        # <asso_values.0+0x60c>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	jmp    <sys_consume_pending_events+0x25e>
	mov    -0x28(%rbp),%rax
	mov    0x20(%rax),%eax
	cmp    %eax,-0x34(%rbp)
	jne    <sys_consume_pending_events+0x21d>
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   *%rdx
	jmp    <sys_consume_pending_events+0x23c>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x28(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	je     <sys_consume_pending_events+0x23c>
	mov    -0x28(%rbp),%rax
	cmp    -0x10(%rbp),%rax
	jne    <sys_consume_pending_events+0x1fe>
	jmp    <sys_consume_pending_events+0x23c>
	nop
	addl   $0x1,-0x40(%rbp)
	mov    -0x40(%rbp),%eax
	cmp    -0x44(%rbp),%eax
	jl     <sys_consume_pending_events+0x16a>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	jmp    <sys_consume_pending_events+0x25e>
	nop
	jmp    <sys_consume_pending_events+0x25e>
	nop
	leave  
	ret    

<sys_time>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	mov    $0x0,%edi
	call   <clock_gettime@plt>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sys_time+0x56>
	mov    0x1824f(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x16,%edx
	mov    $0x1,%esi
	lea    0xa85f(%rip),%rax        # <asso_values.0+0x624>
	mov    %rax,%rdi
	call   <fwrite@plt>
	call   <abort@plt>
	nop
	leave  
	ret    

<sys_load_module>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movq   $0x0,-0x30(%rbp)
	movl   $0x0,-0x34(%rbp)
	movq   $0x0,-0x28(%rbp)
	mov    -0x48(%rbp),%rax
	mov    0x78(%rax),%rax
	mov    %rax,-0x20(%rbp)
	jmp    <sys_load_module+0x7b>
	mov    -0x20(%rbp),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x10(%rax),%rax
	lea    -0x34(%rbp),%rcx
	lea    -0x30(%rbp),%rdx
	mov    -0x50(%rbp),%rsi
	mov    %rax,%rdi
	call   <avmpack_find_section_by_name>
	test   %eax,%eax
	jne    <sys_load_module+0x8b>
	mov    -0x20(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x48(%rbp),%rax
	add    $0x78,%rax
	cmp    %rax,-0x20(%rbp)
	jne    <sys_load_module+0x48>
	jmp    <sys_load_module+0x8c>
	nop
	mov    -0x30(%rbp),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sys_load_module+0x122>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <mapped_file_open_beam>
	mov    %rax,-0x28(%rbp)
	cmpq   $0x0,-0x28(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sys_load_module+0xcc>
	mov    $0x0,%eax
	jmp    <sys_load_module+0x165>
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,%rdi
	call   <iff_is_valid_beam>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sys_load_module+0x10b>
	mov    0x1813b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x50(%rbp),%rdx
	lea    0xa76b(%rip),%rcx        # <asso_values.0+0x63b>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0x28(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %eax,-0x34(%rbp)
	mov    -0x34(%rbp),%eax
	mov    %eax,%edx
	mov    -0x30(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <module_new_from_iff_binary>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sys_load_module+0x155>
	mov    $0x0,%eax
	jmp    <sys_load_module+0x165>
	mov    -0x10(%rbp),%rax
	mov    -0x28(%rbp),%rdx
	mov    %rdx,0x60(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <sys_load_module+0x179>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<sys_create_port>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %r12
	push   %rbx
	sub    $0x60,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %rsi,-0x60(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x60(%rbp),%rax
	lea    0xa6d4(%rip),%rdx        # <asso_values.0+0x659>
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <sys_create_port+0x5c>
	mov    -0x68(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <socket_init>
	jmp    <sys_create_port+0x22d>
	mov    %rsp,%rax
	mov    %rax,%r12
	mov    %rsp,%rax
	mov    %rax,%rbx
	movq   $0x53,-0x48(%rbp)
	mov    $0x54,%edx
	mov    $0x10,%eax
	sub    $0x1,%rax
	add    %rdx,%rax
	mov    $0x10,%esi
	mov    $0x0,%edx
	div    %rsi
	imul   $0x10,%rax,%rax
	mov    %rax,%rcx
	and    $0xfffffffffffff000,%rcx
	mov    %rsp,%rdx
	sub    %rcx,%rdx
	cmp    %rdx,%rsp
	je     <sys_create_port+0xb9>
	sub    $0x1000,%rsp
	orq    $0x0,0xff8(%rsp)
	jmp    <sys_create_port+0xa2>
	mov    %rax,%rdx
	and    $0xfff,%edx
	sub    %rdx,%rsp
	mov    %rax,%rdx
	and    $0xfff,%edx
	test   %rdx,%rdx
	je     <sys_create_port+0xe3>
	and    $0xfff,%eax
	sub    $0x8,%rax
	add    %rsp,%rax
	orq    $0x0,(%rax)
	mov    %rsp,%rax
	add    $0x0,%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x60(%rbp),%rdx
	mov    -0x40(%rbp),%rax
	mov    %rdx,%rcx
	lea    0xa610(%rip),%rdx        # <asso_values.0+0x660>
	mov    $0x54,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	mov    -0x40(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <dlopen@plt>
	mov    %rax,-0x38(%rbp)
	cmpq   $0x0,-0x38(%rbp)
	jne    <sys_create_port+0x13b>
	mov    $0x0,%eax
	mov    %rbx,%rsp
	jmp    <sys_create_port+0x22a>
	mov    %rbx,%rsp
	movq   $0x4c,-0x30(%rbp)
	mov    $0x4d,%edx
	mov    $0x10,%eax
	sub    $0x1,%rax
	add    %rdx,%rax
	mov    $0x10,%ebx
	mov    $0x0,%edx
	div    %rbx
	imul   $0x10,%rax,%rax
	mov    %rax,%rcx
	and    $0xfffffffffffff000,%rcx
	mov    %rsp,%rdx
	sub    %rcx,%rdx
	cmp    %rdx,%rsp
	je     <sys_create_port+0x18f>
	sub    $0x1000,%rsp
	orq    $0x0,0xff8(%rsp)
	jmp    <sys_create_port+0x178>
	mov    %rax,%rdx
	and    $0xfff,%edx
	sub    %rdx,%rsp
	mov    %rax,%rdx
	and    $0xfff,%edx
	test   %rdx,%rdx
	je     <sys_create_port+0x1b9>
	and    $0xfff,%eax
	sub    $0x8,%rax
	add    %rsp,%rax
	orq    $0x0,(%rax)
	mov    %rsp,%rax
	add    $0x0,%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x60(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rcx
	lea    0xa552(%rip),%rdx        # <asso_values.0+0x678>
	mov    $0x4d,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	mov    -0x28(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <dlsym@plt>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x20(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sys_create_port+0x216>
	mov    $0x0,%eax
	jmp    <sys_create_port+0x22a>
	mov    -0x68(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    -0x20(%rbp),%rcx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   *%rcx
	mov    %r12,%rsp
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <sys_create_port+0x241>
	call   <__stack_chk_fail@plt>
	lea    -0x10(%rbp),%rsp
	pop    %rbx
	pop    %r12
	pop    %rbp
	ret    

<sys_get_info>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    $0x4,%edi
	call   <term_from_atom_index>
	leave  
	ret    

<sys_init_platform>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	movl   $0x0,0x17e38(%rip)        # <millis>
	mov    $0x8,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <sys_init_platform+0x3d>
	call   <abort@plt>
	mov    -0x8(%rbp),%rax
	movq   $0x0,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0xa8(%rax)
	nop
	leave  
	ret    

<sys_start_millis_timer>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xc0,%rsp
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movzbl 0x17dd7(%rip),%eax        # <has_signal_handler>
	xor    $0x1,%eax
	test   %al,%al
	je     <sys_start_millis_timer+0x71>
	lea    -0xa0(%rbp),%rdx
	mov    $0x0,%eax
	mov    $0x13,%ecx
	mov    %rdx,%rdi
	rep stos %rax,%es:(%rdi)
	lea    0x10a(%rip),%rax        # <alarm_handler>
	mov    %rax,-0xa0(%rbp)
	movl   $0x10000000,-0x18(%rbp)
	lea    -0xa0(%rbp),%rax
	mov    $0x0,%edx
	mov    %rax,%rsi
	mov    $0xe,%edi
	call   <sigaction@plt>
	movq   $0x0,-0xc0(%rbp)
	movq   $0x3e8,-0xb8(%rbp)
	movq   $0x0,-0xb0(%rbp)
	movq   $0x3e8,-0xa8(%rbp)
	lea    -0xc0(%rbp),%rax
	mov    $0x0,%edx
	mov    %rax,%rsi
	mov    $0x0,%edi
	call   <setitimer@plt>
	nop
	mov    -0x8(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <sys_start_millis_timer+0xcb>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<sys_stop_millis_timer>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	movq   $0x0,-0x30(%rbp)
	movq   $0x0,-0x28(%rbp)
	movq   $0x0,-0x20(%rbp)
	movq   $0x0,-0x18(%rbp)
	lea    -0x30(%rbp),%rax
	mov    $0x0,%edx
	mov    %rax,%rsi
	mov    $0x0,%edi
	call   <setitimer@plt>
	nop
	mov    -0x8(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <sys_stop_millis_timer+0x66>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<sys_millis>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    0x17cb5(%rip),%eax        # <millis>
	pop    %rbp
	ret    

<sys_sleep>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	nop
	pop    %rbp
	ret    

<alarm_handler>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    0x17c93(%rip),%eax        # <millis>
	add    $0x1,%eax
	mov    %eax,0x17c8a(%rip)        # <millis>
	nop
	pop    %rbp
	ret    

<mapped_file_open_beam>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xc0,%rsp
	mov    %rdi,-0xb8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    $0x18,%edi
	call   <malloc@plt>
	mov    %rax,-0xa8(%rbp)
	cmpq   $0x0,-0xa8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <mapped_file_open_beam+0x76>
	mov    0x17c2b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    %rax,%rcx
	mov    $0x25,%edx
	mov    $0x1,%esi
	lea    0xa29f(%rip),%rax        # <asso_values.0+0x688>
	mov    %rax,%rdi
	call   <fwrite@plt>
	mov    $0x0,%eax
	jmp    <mapped_file_open_beam+0x1c0>
	mov    -0xb8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <open@plt>
	mov    -0xa8(%rbp),%rdx
	mov    %eax,(%rdx)
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%eax
	shr    $0x1f,%eax
	movzbl %al,%eax
	test   %rax,%rax
	je     <mapped_file_open_beam+0xea>
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    0x17bb9(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0xb8(%rbp),%rdx
	lea    0xa259(%rip),%rcx        # <asso_values.0+0x6ae>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    $0x0,%eax
	jmp    <mapped_file_open_beam+0x1c0>
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%eax
	lea    -0xa0(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <fstat@plt>
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdx
	mov    -0xa8(%rbp),%rax
	mov    %rdx,0x10(%rax)
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%edx
	mov    -0xa8(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    $0x0,%r9d
	mov    %edx,%r8d
	mov    $0x1,%ecx
	mov    $0x1,%edx
	mov    %rax,%rsi
	mov    $0x0,%edi
	call   <mmap@plt>
	mov    -0xa8(%rbp),%rdx
	mov    %rax,0x8(%rdx)
	mov    -0xa8(%rbp),%rax
	mov    0x8(%rax),%rax
	test   %rax,%rax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <mapped_file_open_beam+0x1b9>
	mov    0x17b06(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0xb8(%rbp),%rdx
	lea    0xa1b9(%rip),%rcx        # <asso_values.0+0x6c1>
	mov    %rcx,%rsi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%eax
	mov    %eax,%edi
	call   <close@plt>
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x0,%eax
	jmp    <mapped_file_open_beam+0x1c0>
	mov    -0xa8(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <mapped_file_open_beam+0x1d4>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<mapped_file_close>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <munmap@plt>
	mov    -0x8(%rbp),%rax
	mov    (%rax),%eax
	mov    %eax,%edi
	call   <close@plt>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<platform_defaultatoms_init>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	movl   $0x1,-0x4(%rbp)
	lea    0xa111(%rip),%rdx        # <asso_values.0+0x6d1>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x3b,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa0f6(%rip),%rdx        # <asso_values.0+0x6d8>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x3c,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa0d9(%rip),%rdx        # <asso_values.0+0x6dd>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x3d,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa0bc(%rip),%rdx        # <asso_values.0+0x6e2>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x3e,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa0a2(%rip),%rdx        # <asso_values.0+0x6ea>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x3f,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa087(%rip),%rdx        # <asso_values.0+0x6f1>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x40,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa06b(%rip),%rdx        # <asso_values.0+0x6f7>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x41,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa056(%rip),%rdx        # <asso_values.0+0x704>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x42,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa03e(%rip),%rdx        # <asso_values.0+0x70e>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x43,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa022(%rip),%rdx        # <asso_values.0+0x714>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x44,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0xa008(%rip),%rdx        # <asso_values.0+0x71c>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x45,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9fec(%rip),%rdx        # <asso_values.0+0x722>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x46,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9fd6(%rip),%rdx        # <asso_values.0+0x72e>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x47,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9fc3(%rip),%rdx        # <asso_values.0+0x73d>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x48,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9faa(%rip),%rdx        # <asso_values.0+0x746>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x49,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9f8e(%rip),%rdx        # <asso_values.0+0x74c>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x4a,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9f81(%rip),%rdx        # <asso_values.0+0x761>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x4b,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9f67(%rip),%rdx        # <asso_values.0+0x769>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x4c,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9f4d(%rip),%rdx        # <asso_values.0+0x771>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x4d,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9f33(%rip),%rdx        # <asso_values.0+0x779>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x4e,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9f1e(%rip),%rdx        # <asso_values.0+0x786>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x4f,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9f0a(%rip),%rdx        # <asso_values.0+0x794>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x50,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9ef1(%rip),%rdx        # <asso_values.0+0x79d>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x51,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9edb(%rip),%rdx        # <asso_values.0+0x7a9>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x52,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9ec1(%rip),%rdx        # <asso_values.0+0x7b1>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x53,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9ea8(%rip),%rdx        # <asso_values.0+0x7ba>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x54,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9e8e(%rip),%rdx        # <asso_values.0+0x7c2>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x55,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	lea    0x9e70(%rip),%rdx        # <asso_values.0+0x7c6>
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	cmp    $0x56,%eax
	sete   %al
	movzbl %al,%eax
	and    %eax,-0x4(%rbp)
	cmpl   $0x0,-0x4(%rbp)
	jne    <platform_defaultatoms_init+0x3da>
	call   <abort@plt>
	nop
	leave  
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	jne    <term_is_binary+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    $0x28,%eax
	seta   %dl
	test   %dl,%dl
	jne    <term_is_binary+0x69>
	movabs $0x11100000000,%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	test   %al,%al
	je     <term_is_binary+0x69>
	mov    $0x1,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_refc_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_refc_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x20,-0xc(%rbp)
	sete   %al
	jmp    <term_is_refc_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_refc_binary_is_const>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	leave  
	ret    

<term_is_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_sub_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x28,-0xc(%rbp)
	sete   %al
	jmp    <term_is_sub_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_boxed_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_boxed_integer+0x43>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	cmp    $0x8,%rax
	jne    <term_is_boxed_integer+0x43>
	mov    $0x1,%eax
	jmp    <term_is_boxed_integer+0x48>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_any_integer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <term_is_any_integer+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <term_is_any_integer+0x33>
	mov    $0x1,%eax
	jmp    <term_is_any_integer+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<term_to_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%rax
	pop    %rbp
	ret    

<term_from_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shl    $0x4,%rax
	or     $0xf,%rax
	pop    %rbp
	ret    

<term_unbox_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_maybe_unbox_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed_integer>
	test   %eax,%eax
	je     <term_maybe_unbox_int+0x2a>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_unbox_int>
	jmp    <term_maybe_unbox_int+0x36>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	leave  
	ret    

<term_put_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x48,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rax,(%rdx)
	nop
	pop    %rbp
	ret    

<term_make_boxed_int>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_put_int>
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_binary_size_is_heap_binary>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	cmpl   $0x3f,-0x4(%rbp)
	setbe  %al
	pop    %rbp
	ret    

<term_binary_data_size_in_terms>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_binary_data_size_in_terms+0x27>
	mov    -0x4(%rbp),%eax
	add    $0x7,%eax
	shr    $0x3,%eax
	add    $0x1,%eax
	jmp    <term_binary_data_size_in_terms+0x2c>
	mov    $0x6,%eax
	leave  
	ret    

<term_binary_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_binary_data+0x5e>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	test   %al,%al
	je     <term_binary_data+0x49>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <refc_binary_get_data>
	jmp    <term_binary_data+0x9c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	je     <term_binary_data+0x94>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	add    %rdx,%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	leave  
	ret    

<term_create_uninitialized_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_create_uninitialized_binary+0x6f>
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0xc(%rbp),%eax
	shl    $0x6,%eax
	or     $0x24,%eax
	movslq %eax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x14(%rbp),%eax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	jmp    <term_create_uninitialized_binary+0x86>
	mov    -0x14(%rbp),%ecx
	mov    -0x20(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_refc_binary>
	leave  
	ret    

<term_from_literal_binary>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x2c(%rbp),%eax
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_create_uninitialized_binary>
	mov    %rax,-0x18(%rbp)
	mov    -0x2c(%rbp),%ebx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_openssl_md5>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_openssl_md5+0x80>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_openssl_md5+0x11f>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,%rbx
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	lea    -0x30(%rbp),%rax
	mov    %rax,%rdx
	mov    %rbx,%rsi
	mov    %rcx,%rdi
	call   <MD5@plt>
	mov    $0x10,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_openssl_md5+0x10a>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_openssl_md5+0x11f>
	mov    -0x48(%rbp),%rdx
	lea    -0x30(%rbp),%rax
	mov    $0x10,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_openssl_md5+0x133>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_openssl_rand_bytes>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %esi,-0x4c(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_any_integer>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_openssl_rand_bytes+0x71>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x58(%rbp),%rdx
	mov    %rax,(%rdx)
	mov    -0x58(%rbp),%rax
	lea    0x8(%rax),%rbx
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,(%rbx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_openssl_rand_bytes+0x1ba>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <term_maybe_unbox_int>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x0,-0x20(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_openssl_rand_bytes+0xd4>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_openssl_rand_bytes+0x1ba>
	mov    -0x28(%rbp),%rax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <RAND_bytes@plt>
	mov    %eax,-0x34(%rbp)
	cmpl   $0x1,-0x34(%rbp)
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_openssl_rand_bytes+0x133>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    -0x48(%rbp),%rax
	movq   $0x8cb,0x60(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_openssl_rand_bytes+0x1ba>
	mov    -0x28(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,%edx
	mov    -0x48(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_ensure_free>
	test   %eax,%eax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <nif_openssl_rand_bytes+0x18e>
	mov    $0x3,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x58(%rdx)
	mov    $0xb,%edi
	call   <term_from_atom_index>
	mov    -0x48(%rbp),%rdx
	mov    %rax,0x60(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	jmp    <nif_openssl_rand_bytes+0x1ba>
	mov    -0x28(%rbp),%rax
	mov    %eax,%ecx
	mov    -0x48(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	mov    %rax,-0x18(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<nif_openssl_random>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    $0x4,%edi
	call   <term_from_int>
	mov    %rax,-0x10(%rbp)
	lea    -0x10(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <nif_openssl_rand_bytes>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	je     <nif_openssl_random+0x63>
	mov    -0x20(%rbp),%rax
	jmp    <nif_openssl_random+0x8a>
	mov    -0x20(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    (%rax),%eax
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rsi
	mov    %rdx,%rdi
	call   <term_make_boxed_int>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <nif_openssl_random+0x9e>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<nif_atomvm_platform>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %esi,-0xc(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    $0x158b,%eax
	pop    %rbp
	ret    

<platform_nifs_get_nif>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	lea    0x9571(%rip),%rax        # <asso_values.0+0x7d4>
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <platform_nifs_get_nif+0x33>
	lea    0x167fa(%rip),%rax        # <openssl_md5_nif>
	jmp    <platform_nifs_get_nif+0xa1>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	lea    0x955b(%rip),%rax        # <asso_values.0+0x7e1>
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <platform_nifs_get_nif+0x56>
	lea    0x167e7(%rip),%rax        # <openssl_rand_bytes_nif>
	jmp    <platform_nifs_get_nif+0xa1>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	lea    0x954c(%rip),%rax        # <asso_values.0+0x7f5>
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <platform_nifs_get_nif+0x79>
	lea    0x167d4(%rip),%rax        # <openssl_random_nif>
	jmp    <platform_nifs_get_nif+0xa1>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rsi
	lea    0x9539(%rip),%rax        # <asso_values.0+0x805>
	mov    %rax,%rdi
	call   <strcmp@plt>
	test   %eax,%eax
	jne    <platform_nifs_get_nif+0x9c>
	lea    0x167c1(%rip),%rax        # <atomvm_platform_nif>
	jmp    <platform_nifs_get_nif+0xa1>
	mov    $0x0,%eax
	leave  
	ret    

<linkedlist_insert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,(%rax)
	nop
	pop    %rbp
	ret    

<linkedlist_remove>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	cmp    %rax,-0x10(%rbp)
	jne    <linkedlist_remove+0x26>
	mov    -0x8(%rbp),%rax
	movq   $0x0,(%rax)
	jmp    <linkedlist_remove+0x66>
	mov    -0x10(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    -0x10(%rbp),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,(%rax)
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rax
	mov    -0x10(%rbp),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	cmp    %rax,-0x10(%rbp)
	jne    <linkedlist_remove+0x66>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	pop    %rbp
	ret    

<linkedlist_append>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	test   %rax,%rax
	jne    <linkedlist_append+0x40>
	mov    -0x10(%rbp),%rdx
	mov    -0x10(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_insert>
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,(%rax)
	jmp    <linkedlist_append+0x61>
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rdx
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    0x8(%rax),%rcx
	mov    -0x10(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_insert>
	nop
	leave  
	ret    

<linkedlist_length>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	jne    <linkedlist_length+0x16>
	mov    $0x0,%eax
	jmp    <linkedlist_length+0x4b>
	movq   $0x0,-0x10(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,-0x8(%rbp)
	addq   $0x1,-0x10(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	je     <linkedlist_length+0x47>
	mov    -0x8(%rbp),%rax
	cmp    -0x18(%rbp),%rax
	jne    <linkedlist_length+0x26>
	mov    -0x10(%rbp),%rax
	pop    %rbp
	ret    

<term_to_const_term_ptr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xfffffffffffffffc,%rax
	pop    %rbp
	ret    

<term_is_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nil>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3f,%eax
	cmp    $0x3b,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_nonempty_list>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x1,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_list>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nonempty_list>
	test   %eax,%eax
	jne    <term_is_list+0x2c>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <term_is_list+0x33>
	mov    $0x1,%eax
	jmp    <term_is_list+0x38>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_boxed>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	and    $0x3,%eax
	cmp    $0x2,%rax
	jne    <term_is_binary+0x70>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	cmp    $0x28,%eax
	seta   %dl
	test   %dl,%dl
	jne    <term_is_binary+0x69>
	movabs $0x11100000000,%rdx
	mov    %eax,%ecx
	shr    %cl,%rdx
	mov    %rdx,%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	test   %al,%al
	je     <term_is_binary+0x69>
	mov    $0x1,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	jmp    <term_is_binary+0x75>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_refc_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_refc_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x20,-0xc(%rbp)
	sete   %al
	jmp    <term_is_refc_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_refc_binary_is_const>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	and    $0x1,%eax
	test   %rax,%rax
	setne  %al
	leave  
	ret    

<term_is_sub_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_sub_binary+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	mov    %eax,-0xc(%rbp)
	cmpl   $0x28,-0xc(%rbp)
	sete   %al
	jmp    <term_is_sub_binary+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_is_integer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0xf,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_pid>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	and    $0xf,%eax
	cmp    $0x3,%rax
	sete   %al
	movzbl %al,%eax
	pop    %rbp
	ret    

<term_is_tuple>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_boxed>
	test   %eax,%eax
	je     <term_is_tuple+0x42>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    (%rax),%rax
	and    $0x3f,%eax
	test   %rax,%rax
	jne    <term_is_tuple+0x42>
	mov    $0x1,%eax
	jmp    <term_is_tuple+0x47>
	mov    $0x0,%eax
	leave  
	ret    

<term_invalid_term>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x0,%eax
	pop    %rbp
	ret    

<term_from_atom_index>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x6,%eax
	or     $0xb,%eax
	cltq   
	pop    %rbp
	ret    

<term_to_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%eax
	pop    %rbp
	ret    

<term_to_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	sar    $0x4,%rax
	pop    %rbp
	ret    

<term_from_int11>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,%eax
	mov    %ax,-0x4(%rbp)
	movswl -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_from_int32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0xf,%eax
	cltq   
	pop    %rbp
	ret    

<term_from_int>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	shl    $0x4,%rax
	or     $0xf,%rax
	pop    %rbp
	ret    

<term_from_local_process_id>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	shl    $0x4,%eax
	or     $0x3,%eax
	mov    %eax,%eax
	pop    %rbp
	ret    

<term_binary_size_is_heap_binary>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edi,-0x4(%rbp)
	cmpl   $0x3f,-0x4(%rbp)
	setbe  %al
	pop    %rbp
	ret    

<term_binary_data_size_in_terms>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x8,%rsp
	mov    %edi,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_binary_data_size_in_terms+0x27>
	mov    -0x4(%rbp),%eax
	add    $0x7,%eax
	shr    $0x3,%eax
	add    $0x1,%eax
	jmp    <term_binary_data_size_in_terms+0x2c>
	mov    $0x6,%eax
	leave  
	ret    

<term_binary_size>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_binary_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_refc_binary>
	test   %al,%al
	je     <term_binary_data+0x5e>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_refc_binary_is_const>
	test   %al,%al
	je     <term_binary_data+0x49>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <refc_binary_get_data>
	jmp    <term_binary_data+0x9c>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_sub_binary>
	test   %al,%al
	je     <term_binary_data+0x94>
	mov    -0x8(%rbp),%rax
	add    $0x18,%rax
	mov    (%rax),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rdx
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	mov    (%rax),%rax
	add    %rdx,%rax
	jmp    <term_binary_data+0x9c>
	mov    -0x8(%rbp),%rax
	add    $0x10,%rax
	leave  
	ret    

<term_create_uninitialized_binary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edi,-0x14(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_size_is_heap_binary>
	test   %al,%al
	je     <term_create_uninitialized_binary+0x6f>
	mov    -0x14(%rbp),%eax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	mov    %eax,-0xc(%rbp)
	mov    -0xc(%rbp),%eax
	add    $0x1,%eax
	mov    %eax,%edx
	mov    -0x20(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0xc(%rbp),%eax
	shl    $0x6,%eax
	or     $0x24,%eax
	movslq %eax,%rdx
	mov    -0x8(%rbp),%rax
	mov    %rdx,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x14(%rbp),%eax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	jmp    <term_create_uninitialized_binary+0x86>
	mov    -0x14(%rbp),%ecx
	mov    -0x20(%rbp),%rax
	mov    $0x0,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_alloc_refc_binary>
	leave  
	ret    

<term_from_literal_binary>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,-0x2c(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x2c(%rbp),%eax
	mov    %rdx,%rsi
	mov    %eax,%edi
	call   <term_create_uninitialized_binary>
	mov    %rax,-0x18(%rbp)
	mov    -0x2c(%rbp),%ebx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rax,%rsi
	mov    %rcx,%rdi
	call   <memcpy@plt>
	mov    -0x18(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<term_from_ref_ticks>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movq   $0x50,(%rax)
	mov    -0x8(%rbp),%rax
	lea    0x8(%rax),%rdx
	mov    -0x18(%rbp),%rax
	mov    %rax,(%rdx)
	mov    -0x8(%rbp),%rax
	or     $0x2,%rax
	leave  
	ret    

<term_to_ref_ticks>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x18,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	add    $0x8,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_get_tuple_element>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %esi,-0x1c(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_const_term_ptr>
	mov    %rax,-0x8(%rbp)
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x1,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x8(%rbp),%rax
	add    %rdx,%rax
	mov    (%rax),%rax
	leave  
	ret    

<term_from_string>:
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %esi,%eax
	mov    %rdx,-0x38(%rbp)
	mov    %ax,-0x2c(%rbp)
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	mov    %eax,%edx
	mov    -0x38(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <memory_heap_alloc>
	mov    %rax,-0x18(%rbp)
	movl   $0x0,-0x1c(%rbp)
	jmp    <term_from_string+0xb4>
	mov    -0x1c(%rbp),%eax
	cltq   
	add    $0x2,%rax
	lea    0x0(,%rax,8),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	mov    %rax,%rdx
	mov    -0x1c(%rbp),%eax
	cltq   
	lea    0x0(,%rax,8),%rcx
	mov    -0x18(%rbp),%rax
	add    %rcx,%rax
	or     $0x1,%rdx
	mov    %rdx,(%rax)
	mov    -0x1c(%rbp),%eax
	mov    %eax,%edx
	shr    $0x1f,%edx
	add    %edx,%eax
	sar    %eax
	movslq %eax,%rdx
	mov    -0x28(%rbp),%rax
	add    %rdx,%rax
	movzbl (%rax),%eax
	movzbl %al,%eax
	mov    -0x1c(%rbp),%edx
	movslq %edx,%rdx
	add    $0x1,%rdx
	lea    0x0(,%rdx,8),%rcx
	mov    -0x18(%rbp),%rdx
	lea    (%rcx,%rdx,1),%rbx
	mov    %eax,%edi
	call   <term_from_int11>
	mov    %rax,(%rbx)
	addl   $0x2,-0x1c(%rbp)
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	cmp    %eax,-0x1c(%rbp)
	jl     <term_from_string+0x3a>
	movzwl -0x2c(%rbp),%eax
	add    %eax,%eax
	cltq   
	shl    $0x3,%rax
	lea    -0x10(%rax),%rdx
	mov    -0x18(%rbp),%rax
	add    %rdx,%rax
	movq   $0x3b,(%rax)
	mov    -0x18(%rbp),%rax
	or     $0x1,%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<context_make_atom>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    -0x20(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <globalcontext_insert_atom>
	mov    %eax,-0x4(%rbp)
	mov    -0x4(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_atom_index>
	leave  
	ret    

<socket_tuple_to_addr>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x8,%rsp
	mov    %rdi,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdi
	call   <term_to_int32>
	shl    $0x18,%eax
	mov    %eax,%ebx
	mov    -0x10(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdi
	call   <term_to_int32>
	shl    $0x10,%eax
	and    $0xff0000,%eax
	or     %eax,%ebx
	mov    -0x10(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdi
	call   <term_to_int32>
	shl    $0x8,%eax
	and    $0xff00,%eax
	or     %eax,%ebx
	mov    -0x10(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,%rdi
	call   <term_to_int32>
	movzbl %al,%eax
	or     %ebx,%eax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<socket_tuple_from_addr>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %esi,-0x3c(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x3c(%rbp),%eax
	shr    $0x18,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,-0x30(%rbp)
	mov    -0x3c(%rbp),%eax
	shr    $0x10,%eax
	movzbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,-0x28(%rbp)
	mov    -0x3c(%rbp),%eax
	shr    $0x8,%eax
	movzbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,-0x20(%rbp)
	mov    -0x3c(%rbp),%eax
	movzbl %al,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,-0x18(%rbp)
	lea    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    $0x4,%esi
	mov    %rax,%rdi
	call   <port_create_tuple_n>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <socket_tuple_from_addr+0x95>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<socket_create_packet_term>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %ecx,-0x1c(%rbp)
	cmpl   $0x0,-0x1c(%rbp)
	je     <socket_create_packet_term+0x3b>
	mov    -0x18(%rbp),%rax
	mov    %eax,%ecx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_literal_binary>
	jmp    <socket_create_packet_term+0x54>
	mov    -0x18(%rbp),%rax
	movzwl %ax,%ecx
	mov    -0x8(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    %ecx,%esi
	mov    %rax,%rdi
	call   <term_from_string>
	leave  
	ret    

<socket_driver_create_data>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0x40,%esi
	mov    $0x1,%edi
	call   <calloc@plt>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	movl   $0xffffffff,(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x8(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x10(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x18(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x20(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x28(%rdx)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    -0x8(%rbp),%rdx
	mov    %rax,0x30(%rdx)
	mov    -0x8(%rbp),%rax
	movq   $0x0,0x38(%rax)
	mov    -0x8(%rbp),%rax
	leave  
	ret    

<socket_driver_delete_data>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	leave  
	ret    

<do_bind>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %rsi,-0x60(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x40(%rbp)
	lea    -0x30(%rbp),%rax
	mov    $0x10,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <memset@plt>
	movw   $0x2,-0x30(%rbp)
	mov    $0x4,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x60(%rbp)
	jne    <do_bind+0x72>
	mov    $0x0,%edi
	call   <htonl@plt>
	mov    %eax,-0x2c(%rbp)
	jmp    <do_bind+0xd5>
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_tuple>
	test   %eax,%eax
	je     <do_bind+0x9a>
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_tuple_to_addr>
	mov    %eax,%edi
	call   <htonl@plt>
	mov    %eax,-0x2c(%rbp)
	jmp    <do_bind+0xd5>
	mov    0x16213(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    -0x58(%rbp),%rdx
	mov    -0x60(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <term_display>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <do_bind+0x1a8>
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <htons@plt>
	mov    %ax,-0x2e(%rbp)
	movl   $0x10,-0x44(%rbp)
	mov    -0x44(%rbp),%edx
	mov    -0x40(%rbp),%rax
	mov    (%rax),%eax
	lea    -0x30(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %eax,%edi
	call   <bind@plt>
	cmp    $0xffffffff,%eax
	jne    <do_bind+0x141>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x40,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <do_bind+0x1a8>
	mov    -0x40(%rbp),%rax
	mov    (%rax),%eax
	lea    -0x44(%rbp),%rdx
	lea    -0x30(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %eax,%edi
	call   <getsockname@plt>
	cmp    $0xffffffff,%eax
	jne    <do_bind+0x185>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x41,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <do_bind+0x1a8>
	movzwl -0x2e(%rbp),%eax
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <ntohs@plt>
	movzwl %ax,%edx
	mov    -0x40(%rbp),%rax
	mov    %rdx,0x10(%rax)
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <do_bind+0x1bc>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<init_udp_socket>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %rsi,-0x60(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %rcx,-0x70(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    $0x0,%edx
	mov    $0x2,%esi
	mov    $0x2,%edi
	call   <socket@plt>
	mov    %eax,-0x44(%rbp)
	cmpl   $0xffffffff,-0x44(%rbp)
	jne    <init_udp_socket+0x82>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x3e,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <init_udp_socket+0x255>
	mov    -0x60(%rbp),%rax
	mov    -0x44(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x60(%rbp),%rax
	mov    (%rax),%eax
	mov    $0x800,%edx
	mov    $0x4,%esi
	mov    %eax,%edi
	mov    $0x0,%eax
	call   <fcntl@plt>
	cmp    $0xffffffff,%eax
	jne    <init_udp_socket+0xe0>
	mov    -0x44(%rbp),%eax
	mov    %eax,%edi
	call   <close@plt>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x3f,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <init_udp_socket+0x255>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	mov    %rax,%rbx
	mov    $0x48,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x68(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	mov    %rax,-0x30(%rbp)
	mov    $0x49,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x30(%rbp),%rcx
	mov    -0x58(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <do_bind>
	mov    %rax,-0x20(%rbp)
	mov    $0x2,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x20(%rbp)
	je     <init_udp_socket+0x16a>
	mov    -0x44(%rbp),%eax
	mov    %eax,%edi
	call   <close@plt>
	jmp    <init_udp_socket+0x251>
	mov    -0x60(%rbp),%rax
	mov    (%rax),%eax
	mov    $0x800,%edx
	mov    $0x4,%esi
	mov    %eax,%edi
	mov    $0x0,%eax
	call   <fcntl@plt>
	cmp    $0xffffffff,%eax
	jne    <init_udp_socket+0x1b5>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x3f,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <init_udp_socket+0x255>
	cmpq   $0x4b,-0x70(%rbp)
	jne    <init_udp_socket+0x251>
	mov    $0x28,%edi
	call   <malloc@plt>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <init_udp_socket+0x20a>
	mov    0x15f0d(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0xaf,%ecx
	lea    0x8719(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x875a(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x60(%rbp),%rax
	mov    (%rax),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,0x20(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x58(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x18(%rbp),%rax
	lea    0x180a(%rip),%rdx        # <active_recvfrom_callback>
	mov    %rdx,0x10(%rax)
	mov    -0x18(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_append>
	mov    -0x60(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,0x38(%rax)
	mov    -0x20(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<do_connect>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xb8,%rsp
	mov    %rdi,-0xa8(%rbp)
	mov    %rsi,-0xb0(%rbp)
	mov    %rdx,-0xb8(%rbp)
	mov    %rcx,-0xc0(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	jne    <do_connect+0x72>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0xb0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <do_connect+0x26b>
	lea    -0x70(%rbp),%rax
	mov    $0x30,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <memset@plt>
	movl   $0x2,-0x6c(%rbp)
	movl   $0x1,-0x68(%rbp)
	movl   $0x6,-0x64(%rbp)
	lea    -0xa0(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_term_to_string>
	mov    %rax,-0x80(%rbp)
	mov    -0xa0(%rbp),%eax
	test   %eax,%eax
	jne    <do_connect+0xe8>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0xb0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <do_connect+0x26b>
	mov    -0xc0(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	movzwl %ax,%edx
	lea    -0x40(%rbp),%rax
	mov    %edx,%ecx
	lea    0x8613(%rip),%rdx        # <asso_values.0+0x883>
	mov    $0x20,%esi
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <snprintf@plt>
	lea    -0x98(%rbp),%rcx
	lea    -0x70(%rbp),%rdx
	lea    -0x40(%rbp),%rsi
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <getaddrinfo@plt>
	mov    %eax,-0x9c(%rbp)
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	cmpl   $0x0,-0x9c(%rbp)
	je     <do_connect+0x179>
	mov    $0x4e,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x9c(%rbp),%edx
	mov    -0xb0(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <do_connect+0x26b>
	movq   $0x0,-0x90(%rbp)
	movq   $0x0,-0x88(%rbp)
	mov    -0x98(%rbp),%rax
	mov    %rax,-0x78(%rbp)
	nop
	cmpq   $0x0,-0x78(%rbp)
	je     <do_connect+0x1c2>
	mov    -0x78(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x90(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0x10(%rax),%eax
	mov    %eax,%eax
	mov    %rax,-0x88(%rbp)
	nop
	cmpq   $0x0,-0x90(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <do_connect+0x1f6>
	mov    $0x4f,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0xb0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <do_connect+0x26b>
	mov    -0x88(%rbp),%rax
	mov    %eax,%edx
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%eax
	mov    -0x90(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %eax,%edi
	call   <connect@plt>
	mov    %eax,-0x9c(%rbp)
	mov    -0x98(%rbp),%rax
	mov    %rax,%rdi
	call   <freeaddrinfo@plt>
	cmpl   $0xffffffff,-0x9c(%rbp)
	jne    <do_connect+0x261>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x50,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0xb0(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <do_connect+0x26b>
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <do_connect+0x27f>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<init_client_tcp_socket>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %rsi,-0x60(%rbp)
	mov    %rdx,-0x68(%rbp)
	mov    %rcx,-0x70(%rbp)
	mov    -0x58(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x38(%rbp)
	mov    $0x0,%edx
	mov    $0x1,%esi
	mov    $0x2,%edi
	call   <socket@plt>
	mov    %eax,-0x44(%rbp)
	cmpl   $0xffffffff,-0x44(%rbp)
	jne    <init_client_tcp_socket+0x82>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x3e,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <init_client_tcp_socket+0x1a6>
	mov    -0x60(%rbp),%rax
	mov    -0x44(%rbp),%edx
	mov    %edx,(%rax)
	mov    $0x48,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x30(%rbp)
	mov    $0x49,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rcx
	mov    -0x30(%rbp),%rdx
	mov    -0x58(%rbp),%rsi
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <do_connect>
	mov    %rax,-0x20(%rbp)
	mov    $0x2,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x20(%rbp)
	je     <init_client_tcp_socket+0x106>
	mov    -0x44(%rbp),%eax
	mov    %eax,%edi
	call   <close@plt>
	jmp    <init_client_tcp_socket+0x1a2>
	cmpq   $0x4b,-0x70(%rbp)
	jne    <init_client_tcp_socket+0x1a2>
	mov    $0x28,%edi
	call   <malloc@plt>
	mov    %rax,-0x18(%rbp)
	cmpq   $0x0,-0x18(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <init_client_tcp_socket+0x15b>
	mov    0x15adc(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x104,%ecx
	lea    0x82e8(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x8329(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x60(%rbp),%rax
	mov    (%rax),%edx
	mov    -0x18(%rbp),%rax
	mov    %edx,0x20(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x58(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x18(%rbp),%rax
	lea    0xf1a(%rip),%rdx        # <active_recv_callback>
	mov    %rdx,0x10(%rax)
	mov    -0x18(%rbp),%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_append>
	mov    -0x60(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,0x38(%rax)
	mov    -0x20(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<do_listen>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x38,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    $0x53,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <do_listen+0x67>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x30(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <do_listen+0xbe>
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %eax,%edx
	mov    -0x28(%rbp),%rax
	mov    (%rax),%eax
	mov    %edx,%esi
	mov    %eax,%edi
	call   <listen@plt>
	mov    %eax,-0x1c(%rbp)
	cmpl   $0xffffffff,-0x1c(%rbp)
	jne    <do_listen+0xb4>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x52,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x30(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <do_listen+0xbe>
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<init_server_tcp_socket>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x58,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    $0x0,%edx
	mov    $0x1,%esi
	mov    $0x2,%edi
	call   <socket@plt>
	mov    %eax,-0x3c(%rbp)
	cmpl   $0xffffffff,-0x3c(%rbp)
	jne    <init_server_tcp_socket+0x6f>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x3e,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x48(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <init_server_tcp_socket+0x1e4>
	mov    -0x50(%rbp),%rax
	mov    -0x3c(%rbp),%edx
	mov    %edx,(%rax)
	movl   $0x1,-0x40(%rbp)
	lea    -0x40(%rbp),%rdx
	mov    -0x3c(%rbp),%eax
	mov    $0x4,%r8d
	mov    %rdx,%rcx
	mov    $0x2,%edx
	mov    $0x1,%esi
	mov    %eax,%edi
	call   <setsockopt@plt>
	movl   $0x1,-0x20(%rbp)
	movl   $0x0,-0x1c(%rbp)
	lea    -0x20(%rbp),%rdx
	mov    -0x3c(%rbp),%eax
	mov    $0x8,%r8d
	mov    %rdx,%rcx
	mov    $0xd,%edx
	mov    $0x1,%esi
	mov    %eax,%edi
	call   <setsockopt@plt>
	mov    -0x50(%rbp),%rax
	mov    (%rax),%eax
	mov    $0x800,%edx
	mov    $0x4,%esi
	mov    %eax,%edi
	mov    $0x0,%eax
	call   <fcntl@plt>
	cmp    $0xffffffff,%eax
	jne    <init_server_tcp_socket+0x124>
	mov    -0x3c(%rbp),%eax
	mov    %eax,%edi
	call   <close@plt>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x3f,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x48(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <init_server_tcp_socket+0x1e4>
	mov    $0x4,%edi
	call   <term_from_atom_index>
	mov    %rax,%rbx
	mov    $0x48,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x58(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	mov    %rax,-0x30(%rbp)
	mov    $0x49,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x30(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <do_bind>
	mov    %rax,-0x38(%rbp)
	mov    $0x2,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x38(%rbp)
	je     <init_server_tcp_socket+0x1ab>
	mov    -0x3c(%rbp),%eax
	mov    %eax,%edi
	call   <close@plt>
	jmp    <init_server_tcp_socket+0x1e0>
	mov    -0x58(%rbp),%rdx
	mov    -0x48(%rbp),%rcx
	mov    -0x50(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <do_listen>
	mov    %rax,-0x38(%rbp)
	mov    $0x2,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x38(%rbp)
	je     <init_server_tcp_socket+0x1e0>
	mov    -0x3c(%rbp),%eax
	mov    %eax,%edi
	call   <close@plt>
	mov    -0x38(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <init_server_tcp_socket+0x1f8>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<create_accepting_socket>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %edx,-0x34(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <context_new>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	lea    0x1d18(%rip),%rdx        # <socket_consume_mailbox>
	mov    %rdx,0x168(%rax)
	mov    -0x18(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <scheduler_make_waiting>
	mov    $0x0,%eax
	call   <socket_driver_create_data>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rax
	mov    -0x34(%rbp),%edx
	mov    %edx,(%rax)
	mov    -0x30(%rbp),%rax
	mov    0x8(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,0x8(%rax)
	mov    -0x30(%rbp),%rax
	mov    0x28(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,0x28(%rax)
	mov    -0x30(%rbp),%rax
	mov    0x20(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,0x20(%rax)
	mov    -0x30(%rbp),%rax
	mov    0x30(%rax),%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,0x30(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x40(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x18(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x198(%rax)
	mov    -0x10(%rbp),%rax
	mov    0x28(%rax),%rax
	cmp    $0x4b,%rax
	jne    <create_accepting_socket+0x174>
	mov    $0x28,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <create_accepting_socket+0x12d>
	mov    0x1569c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x15c,%ecx
	lea    0x7ea8(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x7ee9(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x10(%rbp),%rax
	mov    (%rax),%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0x20(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x18(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x8(%rbp),%rax
	lea    0xada(%rip),%rdx        # <active_recv_callback>
	mov    %rdx,0x10(%rax)
	mov    -0x8(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_append>
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x38(%rax)
	mov    -0x18(%rbp),%rax
	leave  
	ret    

<socket_driver_do_init>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x68,%rsp
	mov    %rdi,-0x68(%rbp)
	mov    %rsi,-0x70(%rbp)
	mov    -0x68(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x58(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	jne    <socket_driver_do_init+0x55>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_init+0x33b>
	mov    $0x3b,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x70(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value>
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_nil>
	test   %eax,%eax
	je     <socket_driver_do_init+0xa6>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_init+0x33b>
	mov    -0x58(%rbp),%rax
	mov    -0x50(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    $0x0,%eax
	call   <term_invalid_term>
	mov    %rax,%rbx
	mov    $0x4a,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_invalid_term>
	test   %eax,%eax
	jne    <socket_driver_do_init+0x123>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_pid>
	test   %eax,%eax
	jne    <socket_driver_do_init+0x123>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_init+0x33b>
	mov    -0x58(%rbp),%rax
	mov    -0x48(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    $0x4b,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	mov    $0xb,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	mov    %rax,-0x40(%rbp)
	cmpq   $0x4b,-0x40(%rbp)
	je     <socket_driver_do_init+0x183>
	cmpq   $0xb,-0x40(%rbp)
	je     <socket_driver_do_init+0x183>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_init+0x33b>
	mov    -0x58(%rbp),%rax
	mov    -0x40(%rbp),%rdx
	mov    %rdx,0x20(%rax)
	mov    $0x80,%edi
	call   <term_from_int>
	mov    %rax,%rbx
	mov    $0x4d,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	mov    %rbx,%rdx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_integer>
	test   %eax,%eax
	jne    <socket_driver_do_init+0x1f0>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_init+0x33b>
	mov    -0x58(%rbp),%rax
	mov    -0x38(%rbp),%rdx
	mov    %rdx,0x30(%rax)
	mov    $0x4c,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	mov    $0xb,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	mov    %rax,-0x30(%rbp)
	mov    -0x58(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	mov    %rdx,0x28(%rax)
	mov    $0x3c,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x50(%rbp)
	jne    <socket_driver_do_init+0x262>
	mov    -0x30(%rbp),%rcx
	mov    -0x70(%rbp),%rdx
	mov    -0x58(%rbp),%rsi
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <init_udp_socket>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	jmp    <socket_driver_do_init+0x33b>
	mov    $0x3d,%edi
	call   <term_from_atom_index>
	cmp    %rax,-0x50(%rbp)
	jne    <socket_driver_do_init+0x31f>
	mov    $0x50,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	mov    $0xb,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	mov    %rax,-0x28(%rbp)
	cmpq   $0x4b,-0x28(%rbp)
	jne    <socket_driver_do_init+0x2bc>
	mov    -0x30(%rbp),%rcx
	mov    -0x70(%rbp),%rdx
	mov    -0x58(%rbp),%rsi
	mov    -0x68(%rbp),%rax
	mov    %rax,%rdi
	call   <init_client_tcp_socket>
	jmp    <socket_driver_do_init+0x33b>
	mov    $0x52,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rax
	mov    $0xb,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <interop_proplist_get_value_default>
	mov    %rax,-0x20(%rbp)
	cmpq   $0x4b,-0x20(%rbp)
	jne    <socket_driver_do_init+0x301>
	mov    -0x70(%rbp),%rdx
	mov    -0x58(%rbp),%rcx
	mov    -0x68(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <init_server_tcp_socket>
	jmp    <socket_driver_do_init+0x33b>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_init+0x33b>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<socket_driver_do_close>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rax
	mov    0x28(%rax),%rax
	cmp    $0x4b,%rax
	jne    <socket_driver_do_close+0x7a>
	mov    -0x8(%rbp),%rax
	mov    0x38(%rax),%rax
	mov    %rax,%rdi
	call   <linkedlist_length>
	test   %rax,%rax
	je     <socket_driver_do_close+0x7a>
	mov    -0x8(%rbp),%rax
	mov    0x38(%rax),%rax
	mov    %rax,%rdx
	mov    -0x10(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_remove>
	mov    -0x8(%rbp),%rax
	mov    (%rax),%eax
	mov    %eax,%edi
	call   <close@plt>
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	call   <scheduler_terminate>
	nop
	leave  
	ret    

<socket_driver_get_port>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rax
	mov    $0x7,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x8(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,%rdx
	mov    -0x18(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_ok_tuple>
	leave  
	ret    

<socket_driver_sockname>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x40(%rbp)
	movl   $0x10,-0x48(%rbp)
	mov    -0x40(%rbp),%rax
	mov    (%rax),%eax
	lea    -0x48(%rbp),%rdx
	lea    -0x20(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %eax,%edi
	call   <getsockname@plt>
	mov    %eax,-0x44(%rbp)
	cmpl   $0x0,-0x44(%rbp)
	je     <socket_driver_sockname+0x8f>
	mov    -0x58(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	call   <__errno_location@plt>
	mov    (%rax),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_sockname+0x116>
	mov    -0x58(%rbp),%rax
	mov    $0xb,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x1c(%rbp),%eax
	mov    %eax,%edi
	call   <ntohl@plt>
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <socket_tuple_from_addr>
	mov    %rax,-0x38(%rbp)
	movzwl -0x1e(%rbp),%eax
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <ntohs@plt>
	movzwl %ax,%eax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rcx
	mov    -0x58(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_tuple2>
	mov    %rax,-0x28(%rbp)
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_tuple2>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <socket_driver_sockname+0x12a>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<socket_driver_peername>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x58(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x40(%rbp)
	movl   $0x10,-0x48(%rbp)
	mov    -0x40(%rbp),%rax
	mov    (%rax),%eax
	lea    -0x48(%rbp),%rdx
	lea    -0x20(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %eax,%edi
	call   <getpeername@plt>
	mov    %eax,-0x44(%rbp)
	cmpl   $0x0,-0x44(%rbp)
	je     <socket_driver_peername+0x8f>
	mov    -0x58(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	call   <__errno_location@plt>
	mov    (%rax),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,%rdx
	mov    -0x58(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_peername+0x116>
	mov    -0x58(%rbp),%rax
	mov    $0xb,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x1c(%rbp),%eax
	mov    %eax,%edi
	call   <ntohl@plt>
	mov    %eax,%edx
	mov    -0x58(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <socket_tuple_from_addr>
	mov    %rax,-0x38(%rbp)
	movzwl -0x1e(%rbp),%eax
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <ntohs@plt>
	movzwl %ax,%eax
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rcx
	mov    -0x58(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_tuple2>
	mov    %rax,-0x28(%rbp)
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x28(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_tuple2>
	mov    -0x8(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <socket_driver_peername+0x12a>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<socket_driver_do_send>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x48,%rsp
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x48(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <socket_driver_do_send+0x68>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x38(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x30(%rbp)
	jmp    <socket_driver_do_send+0x144>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <socket_driver_do_send+0x123>
	lea    -0x40(%rbp),%rdx
	mov    -0x50(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_iolist_size>
	cltq   
	mov    %rax,-0x30(%rbp)
	mov    -0x40(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <socket_driver_do_send+0xc6>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_send+0x1ce>
	mov    -0x30(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x50(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_write_iolist>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <socket_driver_do_send+0x144>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_send+0x1ce>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_send+0x1ce>
	mov    -0x28(%rbp),%rax
	mov    (%rax),%eax
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rsi
	mov    $0x0,%ecx
	mov    %eax,%edi
	call   <send@plt>
	mov    %eax,-0x3c(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <socket_driver_do_send+0x17d>
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	cmpl   $0xffffffff,-0x3c(%rbp)
	jne    <socket_driver_do_send+0x1aa>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x45,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x48(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <socket_driver_do_send+0x1ce>
	mov    -0x3c(%rbp),%eax
	cltq   
	mov    %rax,%rdi
	call   <term_from_int>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rdx
	mov    -0x48(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_ok_tuple>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <socket_driver_do_send+0x1e2>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<socket_driver_do_sendto>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x78,%rsp
	mov    %rdi,-0x68(%rbp)
	mov    %rsi,-0x70(%rbp)
	mov    %rdx,-0x78(%rbp)
	mov    %rcx,-0x80(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0x68(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x40(%rbp)
	lea    -0x30(%rbp),%rax
	mov    $0x10,%edx
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <memset@plt>
	movw   $0x2,-0x30(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_tuple_to_addr>
	mov    %eax,%edi
	call   <htonl@plt>
	mov    %eax,-0x2c(%rbp)
	mov    -0x78(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_int32>
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <htons@plt>
	mov    %ax,-0x2e(%rbp)
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_binary>
	test   %eax,%eax
	je     <socket_driver_do_sendto+0xbc>
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_data>
	mov    %rax,-0x50(%rbp)
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <term_binary_size>
	mov    %rax,-0x48(%rbp)
	jmp    <socket_driver_do_sendto+0x198>
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <socket_driver_do_sendto+0x177>
	lea    -0x58(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_iolist_size>
	cltq   
	mov    %rax,-0x48(%rbp)
	mov    -0x58(%rbp),%eax
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <socket_driver_do_sendto+0x11a>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_sendto+0x22c>
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <interop_write_iolist>
	test   %eax,%eax
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <socket_driver_do_sendto+0x198>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_sendto+0x22c>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	jmp    <socket_driver_do_sendto+0x22c>
	mov    -0x40(%rbp),%rax
	mov    (%rax),%eax
	lea    -0x30(%rbp),%rcx
	mov    -0x48(%rbp),%rdx
	mov    -0x50(%rbp),%rsi
	mov    $0x10,%r9d
	mov    %rcx,%r8
	mov    $0x0,%ecx
	mov    %eax,%edi
	call   <sendto@plt>
	mov    %eax,-0x54(%rbp)
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <term_is_list>
	test   %eax,%eax
	je     <socket_driver_do_sendto+0x1de>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	cmpl   $0xffffffff,-0x54(%rbp)
	jne    <socket_driver_do_sendto+0x20b>
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x44,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x68(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	jmp    <socket_driver_do_sendto+0x22c>
	mov    -0x54(%rbp),%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x68(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_ok_tuple>
	mov    -0x18(%rbp),%rdx
	sub    %fs:0x28,%rdx
	je     <socket_driver_do_sendto+0x240>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<active_recv_callback>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x90,%rsp
	mov    %rdi,-0x88(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x8(%rbp)
	xor    %eax,%eax
	mov    -0x88(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x70(%rbp)
	mov    -0x70(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x68(%rbp)
	mov    -0x68(%rbp),%rax
	mov    0x30(%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x60(%rbp)
	mov    -0x60(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x58(%rbp)
	cmpq   $0x0,-0x58(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <active_recv_callback+0xa3>
	mov    0x14afb(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x265,%ecx
	lea    0x7307(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x7348(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x60(%rbp),%rdx
	mov    -0x68(%rbp),%rax
	mov    (%rax),%eax
	mov    -0x58(%rbp),%rsi
	mov    $0x0,%r9d
	mov    $0x0,%r8d
	mov    $0x0,%ecx
	mov    %eax,%edi
	call   <recvfrom@plt>
	mov    %rax,-0x50(%rbp)
	cmpq   $0x0,-0x50(%rbp)
	jg     <active_recv_callback+0x152>
	mov    -0x70(%rbp),%rax
	mov    $0xc,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x68(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x30(%rbp)
	mov    $0x51,%edi
	call   <term_from_atom_index>
	mov    %rax,-0x20(%rbp)
	mov    -0x70(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x18(%rbp)
	lea    -0x20(%rbp),%rdx
	mov    -0x70(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <port_create_tuple_n>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rdx
	mov    -0x30(%rbp),%rcx
	mov    -0x70(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_send_message>
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_driver_do_close>
	jmp    <active_recv_callback+0x221>
	mov    -0x68(%rbp),%rax
	mov    0x20(%rax),%rax
	cmp    $0x4b,%rax
	jne    <active_recv_callback+0x17a>
	movl   $0x1,-0x74(%rbp)
	mov    -0x50(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,-0x78(%rbp)
	jmp    <active_recv_callback+0x18a>
	movl   $0x0,-0x74(%rbp)
	mov    -0x50(%rbp),%rax
	add    %eax,%eax
	mov    %eax,-0x78(%rbp)
	mov    -0x78(%rbp),%eax
	add    $0x14,%eax
	movslq %eax,%rdx
	mov    -0x70(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x68(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x48(%rbp)
	mov    -0x74(%rbp),%ecx
	mov    -0x50(%rbp),%rdx
	mov    -0x58(%rbp),%rsi
	mov    -0x70(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_create_packet_term>
	mov    %rax,-0x40(%rbp)
	mov    $0x3d,%edi
	call   <term_from_atom_index>
	mov    %rax,-0x20(%rbp)
	mov    -0x70(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x18(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,-0x10(%rbp)
	lea    -0x20(%rbp),%rdx
	mov    -0x70(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <port_create_tuple_n>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	mov    -0x48(%rbp),%rcx
	mov    -0x70(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_send_message>
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	mov    -0x8(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <active_recv_callback+0x242>
	call   <__stack_chk_fail@plt>
	leave  
	ret    

<passive_recv_callback>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0x98,%rsp
	mov    %rdi,-0x98(%rbp)
	mov    -0x98(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x80(%rbp)
	mov    -0x80(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x78(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x70(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x68(%rbp)
	mov    -0x68(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x60(%rbp)
	mov    -0x80(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x58(%rbp)
	mov    -0x58(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x50(%rbp)
	cmpq   $0x0,-0x50(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <passive_recv_callback+0xbe>
	mov    0x1489c(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x299,%ecx
	lea    0x70a8(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x70e9(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x58(%rbp),%rdx
	mov    -0x70(%rbp),%rax
	mov    (%rax),%eax
	mov    -0x50(%rbp),%rsi
	mov    $0x0,%r9d
	mov    $0x0,%r8d
	mov    $0x0,%ecx
	mov    %eax,%edi
	call   <recvfrom@plt>
	mov    %rax,-0x48(%rbp)
	cmpq   $0x0,-0x48(%rbp)
	jg     <passive_recv_callback+0x178>
	mov    -0x78(%rbp),%rax
	mov    $0xc,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x80(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x80(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    -0x78(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x18(%rbp)
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x43,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x78(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	mov    %rax,%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0x20(%rbp),%rsi
	mov    -0x78(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	mov    -0x78(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_driver_do_close>
	jmp    <passive_recv_callback+0x237>
	mov    -0x70(%rbp),%rax
	mov    0x20(%rax),%rax
	cmp    $0x4b,%rax
	jne    <passive_recv_callback+0x19c>
	mov    -0x48(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,-0x84(%rbp)
	jmp    <passive_recv_callback+0x1a8>
	mov    -0x48(%rbp),%rax
	add    %eax,%eax
	mov    %eax,-0x84(%rbp)
	mov    -0x84(%rbp),%eax
	add    $0x14,%eax
	movslq %eax,%rdx
	mov    -0x78(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x80(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x80(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    -0x78(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x38(%rbp)
	mov    -0x84(%rbp),%ecx
	mov    -0x48(%rbp),%rdx
	mov    -0x50(%rbp),%rsi
	mov    -0x78(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_create_packet_term>
	mov    %rax,-0x30(%rbp)
	mov    -0x30(%rbp),%rdx
	mov    -0x78(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_ok_tuple>
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rcx
	mov    -0x38(%rbp),%rdx
	mov    -0x40(%rbp),%rsi
	mov    -0x78(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	mov    -0x98(%rbp),%rdx
	mov    -0x60(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_remove>
	mov    -0x98(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x80(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x50(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<active_recvfrom_callback>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xc8,%rsp
	mov    %rdi,-0xc8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0xc8(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0xb0(%rbp)
	mov    -0xb0(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0xa8(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    0x30(%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0xa0(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x98(%rbp)
	cmpq   $0x0,-0x98(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <active_recvfrom_callback+0xbc>
	mov    0x14623(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x2ca,%ecx
	lea    0x6e2f(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x6e70(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movl   $0x10,-0xb8(%rbp)
	mov    -0xa0(%rbp),%rdx
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%eax
	lea    -0xb8(%rbp),%rdi
	lea    -0x50(%rbp),%rcx
	mov    -0x98(%rbp),%rsi
	mov    %rdi,%r9
	mov    %rcx,%r8
	mov    $0x0,%ecx
	mov    %eax,%edi
	call   <recvfrom@plt>
	mov    %rax,-0x90(%rbp)
	cmpq   $0xffffffffffffffff,-0x90(%rbp)
	jne    <active_recvfrom_callback+0x1bc>
	mov    -0xb0(%rbp),%rax
	mov    $0xc,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0xa8(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x60(%rbp)
	mov    $0x3c,%edi
	call   <term_from_atom_index>
	mov    %rax,-0x40(%rbp)
	mov    -0xb0(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x38(%rbp)
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x42,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0xb0(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	mov    %rax,-0x30(%rbp)
	lea    -0x40(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <port_create_tuple_n>
	mov    %rax,-0x58(%rbp)
	mov    -0x58(%rbp),%rdx
	mov    -0x60(%rbp),%rcx
	mov    -0xb0(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_send_message>
	jmp    <active_recvfrom_callback+0x30c>
	mov    -0xa8(%rbp),%rax
	mov    0x20(%rax),%rax
	cmp    $0x4b,%rax
	jne    <active_recvfrom_callback+0x1e6>
	mov    -0x90(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,-0xb4(%rbp)
	jmp    <active_recvfrom_callback+0x1f5>
	mov    -0x90(%rbp),%rax
	add    %eax,%eax
	mov    %eax,-0xb4(%rbp)
	mov    -0xb4(%rbp),%eax
	add    $0x14,%eax
	movslq %eax,%rdx
	mov    -0xb0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0xa8(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x88(%rbp)
	mov    -0x4c(%rbp),%eax
	mov    %eax,%edi
	call   <htonl@plt>
	mov    %eax,%edx
	mov    -0xb0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <socket_tuple_from_addr>
	mov    %rax,-0x80(%rbp)
	movzwl -0x4e(%rbp),%eax
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <htons@plt>
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,-0x78(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    0x20(%rax),%rax
	cmp    $0x4b,%rax
	sete   %al
	movzbl %al,%ecx
	mov    -0x90(%rbp),%rdx
	mov    -0x98(%rbp),%rsi
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_create_packet_term>
	mov    %rax,-0x70(%rbp)
	mov    $0x3c,%edi
	call   <term_from_atom_index>
	mov    %rax,-0x40(%rbp)
	mov    -0xb0(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x38(%rbp)
	mov    -0x80(%rbp),%rax
	mov    %rax,-0x30(%rbp)
	mov    -0x78(%rbp),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x70(%rbp),%rax
	mov    %rax,-0x20(%rbp)
	lea    -0x40(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	mov    $0x5,%esi
	mov    %rax,%rdi
	call   <port_create_tuple_n>
	mov    %rax,-0x68(%rbp)
	mov    -0x68(%rbp),%rdx
	mov    -0x88(%rbp),%rcx
	mov    -0xb0(%rbp),%rax
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_send_message>
	mov    -0x98(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	mov    -0x18(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <active_recvfrom_callback+0x330>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<passive_recvfrom_callback>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xc8,%rsp
	mov    %rdi,-0xc8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0xc8(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0xb8(%rbp)
	mov    -0xb8(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0xb0(%rbp)
	mov    -0xb0(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0xa8(%rbp)
	mov    -0xb0(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0xa0(%rbp)
	mov    -0xa0(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x98(%rbp)
	mov    -0xb8(%rbp),%rax
	mov    0x10(%rax),%rax
	mov    %rax,%rdi
	call   <term_to_int>
	mov    %rax,-0x90(%rbp)
	mov    -0x90(%rbp),%rax
	mov    %rax,%rdi
	call   <malloc@plt>
	mov    %rax,-0x88(%rbp)
	cmpq   $0x0,-0x88(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <passive_recvfrom_callback+0xf7>
	mov    0x142b2(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x2fd,%ecx
	lea    0x6abe(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x6aff(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	movl   $0x10,-0xc0(%rbp)
	mov    -0x90(%rbp),%rdx
	mov    -0xa8(%rbp),%rax
	mov    (%rax),%eax
	lea    -0xc0(%rbp),%rdi
	lea    -0x30(%rbp),%rcx
	mov    -0x88(%rbp),%rsi
	mov    %rdi,%r9
	mov    %rcx,%r8
	mov    $0x0,%ecx
	mov    %eax,%edi
	call   <recvfrom@plt>
	mov    %rax,-0x80(%rbp)
	cmpq   $0xffffffffffffffff,-0x80(%rbp)
	jne    <passive_recvfrom_callback+0x1cf>
	mov    -0xb0(%rbp),%rax
	mov    $0xc,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0xb8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0xb8(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    -0xb0(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x38(%rbp)
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x42,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0xb0(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	mov    %rax,%rcx
	mov    -0x38(%rbp),%rdx
	mov    -0x40(%rbp),%rsi
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <passive_recvfrom_callback+0x314>
	mov    -0xa8(%rbp),%rax
	mov    0x20(%rax),%rax
	cmp    $0x4b,%rax
	jne    <passive_recvfrom_callback+0x1f6>
	mov    -0x80(%rbp),%rax
	mov    %eax,%edi
	call   <term_binary_data_size_in_terms>
	add    $0x2,%eax
	mov    %eax,-0xbc(%rbp)
	jmp    <passive_recvfrom_callback+0x202>
	mov    -0x80(%rbp),%rax
	add    %eax,%eax
	mov    %eax,-0xbc(%rbp)
	mov    -0xbc(%rbp),%eax
	add    $0x14,%eax
	movslq %eax,%rdx
	mov    -0xb0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0xb8(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x78(%rbp)
	mov    -0xb8(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    -0xb0(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x70(%rbp)
	mov    -0x2c(%rbp),%eax
	mov    %eax,%edi
	call   <htonl@plt>
	mov    %eax,%edx
	mov    -0xb0(%rbp),%rax
	mov    %edx,%esi
	mov    %rax,%rdi
	call   <socket_tuple_from_addr>
	mov    %rax,-0x68(%rbp)
	movzwl -0x2e(%rbp),%eax
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <htons@plt>
	movzwl %ax,%eax
	mov    %eax,%edi
	call   <term_from_int32>
	mov    %rax,-0x60(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    0x20(%rax),%rax
	cmp    $0x4b,%rax
	sete   %al
	movzbl %al,%ecx
	mov    -0x80(%rbp),%rdx
	mov    -0x88(%rbp),%rsi
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_create_packet_term>
	mov    %rax,-0x58(%rbp)
	mov    -0x58(%rbp),%rcx
	mov    -0x60(%rbp),%rdx
	mov    -0x68(%rbp),%rsi
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <port_create_tuple3>
	mov    %rax,-0x50(%rbp)
	mov    -0x50(%rbp),%rdx
	mov    -0xb0(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_ok_tuple>
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rcx
	mov    -0x70(%rbp),%rdx
	mov    -0x78(%rbp),%rsi
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	mov    -0xc8(%rbp),%rdx
	mov    -0x98(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_remove>
	mov    -0xc8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x88(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	mov    -0x18(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <passive_recvfrom_callback+0x36f>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<do_recv>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    %rcx,-0x50(%rbp)
	mov    %r8,-0x58(%rbp)
	mov    %r9,-0x60(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rax
	mov    0x28(%rax),%rax
	cmp    $0x4b,%rax
	jne    <do_recv+0xa8>
	mov    -0x38(%rbp),%rax
	mov    $0xc,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0x38(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	mov    %rax,%rcx
	mov    -0x48(%rbp),%rdx
	mov    -0x40(%rbp),%rsi
	mov    -0x38(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <do_recv+0x1ab>
	mov    $0x28,%edi
	call   <malloc@plt>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <do_recv+0xf2>
	mov    0x13f42(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x33c,%ecx
	lea    0x674e(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x67b7(%rip),%rsi        # <asso_values.0+0x888>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x10(%rbp),%rax
	mov    -0x38(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x40(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x50(%rbp),%rdx
	mov    %rdx,0x10(%rax)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_ref_ticks>
	mov    -0x10(%rbp),%rdx
	mov    %rax,0x20(%rdx)
	mov    $0x28,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <do_recv+0x173>
	mov    0x13ec1(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x348,%ecx
	lea    0x66cd(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x670e(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0x20(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x60(%rbp),%rdx
	mov    %rdx,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x8(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_append>
	leave  
	ret    

<socket_driver_do_recvfrom>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    %r8,-0x28(%rbp)
	mov    -0x28(%rbp),%rdi
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rsi
	mov    -0x8(%rbp),%rax
	lea    -0x55d(%rip),%r9        # <passive_recvfrom_callback>
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <do_recv>
	nop
	leave  
	ret    

<socket_driver_do_recv>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    %r8,-0x28(%rbp)
	mov    -0x28(%rbp),%rdi
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rsi
	mov    -0x8(%rbp),%rax
	lea    -0xb57(%rip),%r9        # <passive_recv_callback>
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <do_recv>
	nop
	leave  
	ret    

<accept_callback>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	push   %rbx
	sub    $0xa8,%rsp
	mov    %rdi,-0xa8(%rbp)
	mov    %fs:0x28,%rax
	mov    %rax,-0x18(%rbp)
	xor    %eax,%eax
	mov    -0xa8(%rbp),%rax
	mov    0x18(%rax),%rax
	mov    %rax,-0x90(%rbp)
	mov    -0x90(%rbp),%rax
	mov    (%rax),%rax
	mov    %rax,-0x88(%rbp)
	mov    -0x88(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x80(%rbp)
	mov    -0x88(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x78(%rbp)
	mov    -0x78(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x70(%rbp)
	movl   $0x10,-0x98(%rbp)
	mov    -0x80(%rbp),%rax
	mov    (%rax),%eax
	lea    -0x98(%rbp),%rdx
	lea    -0x30(%rbp),%rcx
	mov    %rcx,%rsi
	mov    %eax,%edi
	call   <accept@plt>
	mov    %eax,-0x94(%rbp)
	cmpl   $0xffffffff,-0x94(%rbp)
	jne    <accept_callback+0x13f>
	mov    -0x88(%rbp),%rax
	mov    $0xc,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x90(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    -0x90(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    -0x88(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x38(%rbp)
	call   <__errno_location@plt>
	mov    (%rax),%ebx
	mov    $0x54,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x88(%rbp),%rax
	mov    %ebx,%edx
	mov    %rcx,%rsi
	mov    %rax,%rdi
	call   <port_create_sys_error_tuple>
	mov    %rax,%rcx
	mov    -0x38(%rbp),%rdx
	mov    -0x40(%rbp),%rsi
	mov    -0x88(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <accept_callback+0x1e8>
	mov    -0x90(%rbp),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x68(%rbp)
	mov    -0x68(%rbp),%rcx
	mov    -0x94(%rbp),%edx
	mov    -0x80(%rbp),%rsi
	mov    -0x78(%rbp),%rax
	mov    %rax,%rdi
	call   <create_accepting_socket>
	mov    %rax,-0x60(%rbp)
	mov    -0x60(%rbp),%rax
	mov    0x20(%rax),%eax
	mov    %eax,%edi
	call   <term_from_local_process_id>
	mov    %rax,-0x58(%rbp)
	mov    -0x88(%rbp),%rax
	mov    $0xa,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0x90(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    -0x88(%rbp),%rdx
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <term_from_ref_ticks>
	mov    %rax,-0x50(%rbp)
	mov    -0x58(%rbp),%rdx
	mov    -0x88(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_ok_tuple>
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rcx
	mov    -0x50(%rbp),%rdx
	mov    -0x68(%rbp),%rsi
	mov    -0x88(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	mov    -0xa8(%rbp),%rdx
	mov    -0x70(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_remove>
	mov    -0xa8(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	mov    -0x90(%rbp),%rax
	mov    %rax,%rdi
	call   <free@plt>
	nop
	mov    -0x18(%rbp),%rax
	sub    %fs:0x28,%rax
	je     <accept_callback+0x231>
	call   <__stack_chk_fail@plt>
	mov    -0x8(%rbp),%rbx
	leave  
	ret    

<socket_driver_do_accept>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdx,-0x48(%rbp)
	mov    %rcx,-0x50(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x160(%rax),%rax
	mov    %rax,-0x28(%rbp)
	mov    -0x28(%rbp),%rax
	mov    0xa8(%rax),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x38(%rbp),%rax
	mov    0x198(%rax),%rax
	mov    %rax,-0x18(%rbp)
	mov    $0x28,%edi
	call   <malloc@plt>
	mov    %rax,-0x10(%rbp)
	cmpq   $0x0,-0x10(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <socket_driver_do_accept+0x93>
	mov    0x13b2b(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x396,%ecx
	lea    0x6337(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x63a0(%rip),%rsi        # <asso_values.0+0x888>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x10(%rbp),%rax
	mov    -0x38(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x40(%rbp),%rdx
	mov    %rdx,0x8(%rax)
	mov    -0x10(%rbp),%rax
	movq   $0x0,0x10(%rax)
	mov    -0x48(%rbp),%rax
	mov    %rax,%rdi
	call   <term_to_ref_ticks>
	mov    -0x10(%rbp),%rdx
	mov    %rax,0x20(%rdx)
	mov    $0x28,%edi
	call   <malloc@plt>
	mov    %rax,-0x8(%rbp)
	cmpq   $0x0,-0x8(%rbp)
	sete   %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <socket_driver_do_accept+0x114>
	mov    0x13aaa(%rip),%rax        # <stderr@GLIBC_2.2.5>
	mov    $0x3a2,%ecx
	lea    0x62b6(%rip),%rdx        # <asso_values.0+0x818>
	lea    0x62f7(%rip),%rsi        # <asso_values.0+0x860>
	mov    %rax,%rdi
	mov    $0x0,%eax
	call   <fprintf@plt>
	call   <abort@plt>
	mov    -0x18(%rbp),%rax
	mov    (%rax),%edx
	mov    -0x8(%rbp),%rax
	mov    %edx,0x20(%rax)
	mov    -0x8(%rbp),%rax
	lea    -0x363(%rip),%rdx        # <accept_callback>
	mov    %rdx,0x10(%rax)
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rdx
	mov    %rdx,0x18(%rax)
	mov    -0x8(%rbp),%rdx
	mov    -0x20(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <linkedlist_append>
	nop
	leave  
	ret    

<socket_consume_mailbox>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xc0,%rsp
	mov    %rdi,-0xb8(%rbp)
	mov    -0xb8(%rbp),%rax
	mov    0x168(%rax),%rax
	lea    -0x2b(%rip),%rdx        # <socket_consume_mailbox>
	cmp    %rdx,%rax
	setne  %al
	movzbl %al,%eax
	test   %rax,%rax
	je     <socket_consume_mailbox+0x3e>
	call   <abort@plt>
	mov    -0xb8(%rbp),%rax
	mov    $0x10,%esi
	mov    %rax,%rdi
	call   <port_ensure_available>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_dequeue>
	mov    %rax,-0xb0(%rbp)
	mov    -0xb0(%rbp),%rax
	mov    0x20(%rax),%rax
	mov    %rax,-0xa8(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0xa0(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x98(%rbp)
	mov    -0xa8(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x90(%rbp)
	mov    -0x90(%rbp),%rax
	mov    $0x0,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x88(%rbp)
	lea    0x6222(%rip),%rdx        # <asso_values.0+0x8c8>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x16a>
	mov    -0x90(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x10(%rbp)
	mov    -0x10(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <socket_driver_do_init>
	mov    %rax,-0x8(%rbp)
	mov    -0x8(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	mov    $0x2,%edi
	call   <term_from_atom_index>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x6196(%rip),%rdx        # <asso_values.0+0x8c0>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x21d>
	mov    -0x90(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x30(%rbp)
	mov    -0x90(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x28(%rbp)
	mov    -0x90(%rbp),%rax
	mov    $0x3,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rdx
	mov    -0x30(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_driver_do_sendto>
	mov    %rax,-0x18(%rbp)
	mov    -0x18(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x60dd(%rip),%rdx        # <asso_values.0+0x8ba>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x297>
	mov    -0x90(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x40(%rbp)
	mov    -0x40(%rbp),%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <socket_driver_do_send>
	mov    %rax,-0x38(%rbp)
	mov    -0x38(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x607d(%rip),%rdx        # <asso_values.0+0x8d4>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x316>
	mov    -0x90(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x50(%rbp)
	mov    -0x90(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x48(%rbp)
	mov    -0x48(%rbp),%rdi
	mov    -0x50(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <socket_driver_do_recvfrom>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x6008(%rip),%rdx        # <asso_values.0+0x8de>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x395>
	mov    -0x90(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x60(%rbp)
	mov    -0x90(%rbp),%rax
	mov    $0x2,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x58(%rbp)
	mov    -0x58(%rbp),%rdi
	mov    -0x60(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rdi,%r8
	mov    %rax,%rdi
	call   <socket_driver_do_recv>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x5fa0(%rip),%rdx        # <asso_values.0+0x8f5>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x3f5>
	mov    -0x90(%rbp),%rax
	mov    $0x1,%esi
	mov    %rax,%rdi
	call   <term_get_tuple_element>
	mov    %rax,-0x68(%rbp)
	mov    -0x68(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_driver_do_accept>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x5f2f(%rip),%rdx        # <asso_values.0+0x8e4>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x455>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_driver_do_close>
	mov    $0x2,%edi
	call   <term_from_atom_index>
	mov    %rax,%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x5ee8(%rip),%rdx        # <asso_values.0+0x8fd>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x4b0>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_driver_sockname>
	mov    %rax,-0x70(%rbp)
	mov    -0x70(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x5e97(%rip),%rdx        # <asso_values.0+0x907>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x50b>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_driver_peername>
	mov    %rax,-0x78(%rbp)
	mov    -0x78(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <socket_consume_mailbox+0x5a2>
	lea    0x5e20(%rip),%rdx        # <asso_values.0+0x8eb>
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <context_make_atom>
	cmp    %rax,-0x88(%rbp)
	jne    <socket_consume_mailbox+0x563>
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <socket_driver_get_port>
	mov    %rax,-0x80(%rbp)
	mov    -0x80(%rbp),%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	jmp    <socket_consume_mailbox+0x5a2>
	mov    $0x5,%edi
	call   <term_from_atom_index>
	mov    %rax,%rdx
	mov    -0xb8(%rbp),%rax
	mov    %rdx,%rsi
	mov    %rax,%rdi
	call   <port_create_error_tuple>
	mov    %rax,%rcx
	mov    -0x98(%rbp),%rdx
	mov    -0xa0(%rbp),%rsi
	mov    -0xb8(%rbp),%rax
	mov    %rax,%rdi
	call   <port_send_reply>
	mov    -0xb0(%rbp),%rax
	mov    %rax,%rdi
	call   <mailbox_destroy_message>
	nop
	leave  
	ret    

<socket_init>:
	endbr64 
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	call   <context_new>
	mov    %rax,-0x10(%rbp)
	mov    $0x0,%eax
	call   <socket_driver_create_data>
	mov    %rax,-0x8(%rbp)
	mov    -0x10(%rbp),%rax
	lea    -0x5f1(%rip),%rdx        # <socket_consume_mailbox>
	mov    %rdx,0x168(%rax)
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rdx
	mov    %rdx,0x198(%rax)
	mov    -0x10(%rbp),%rax
	leave  
	ret    

Disassembly of section .fini:

<_fini>:
	endbr64 
	sub    $0x8,%rsp
	add    $0x8,%rsp
	ret    
